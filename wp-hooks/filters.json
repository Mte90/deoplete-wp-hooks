[
    {
        "name": "_get_page_link",
        "line": 394,
        "end_line": 394,
        "type": "filter",
        "doc": {
            "description": "Filters the permalink for a non-page_on_front page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The page's permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "The ID of the page.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "_wp_post_revision_field_{$field}",
        "line": 83,
        "end_line": 83,
        "type": "filter",
        "doc": {
            "description": "Contextually filter a post revision field.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field</code>, corresponds to each of the post fields of the revision object being iterated over in a foreach statement.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The current revision field to compare to or from.",
                    "types": [
                        "string"
                    ],
                    "variable": "$revision_field"
                },
                {
                    "name": "param",
                    "content": "The current revision field.",
                    "types": [
                        "string"
                    ],
                    "variable": "$field"
                },
                {
                    "name": "param",
                    "content": "The revision post object to compare to or from.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$compare_from"
                },
                {
                    "name": "param",
                    "content": "The context of whether the current revision is the old                                or the new one. Values are 'to' or 'from'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/revision.php"
    },
    {
        "name": "_wp_post_revision_fields",
        "line": 56,
        "end_line": 56,
        "type": "filter",
        "doc": {
            "description": "Filters the list of fields saved in post revisions.",
            "long_description": "<p>Included by default: 'post_title', 'post_content' and 'post_excerpt'.</p> <p>Disallowed fields: 'ID', 'post_name', 'post_parent', 'post_date', 'post_date_gmt', 'post_status', 'post_type', 'comment_count', and 'post_author'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "The <code>$post</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "List of fields to revision. Contains 'post_title',                      'post_content', and 'post_excerpt' by default.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "A post array being processed for insertion as a post revision.",
                    "types": [
                        "array"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/revision.php"
    },
    {
        "name": "_wp_relative_upload_path",
        "line": 584,
        "end_line": 584,
        "type": "filter",
        "doc": {
            "description": "Filters the relative path to an uploaded file.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Relative path to the file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$new_path"
                },
                {
                    "name": "param",
                    "content": "Full path to the file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "add_menu_classes",
        "line": 245,
        "end_line": 245,
        "type": "filter",
        "doc": {
            "description": "Filters administration menus array with classes added for top-level items.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of administration menu items.",
                    "types": [
                        "array"
                    ],
                    "variable": "$menu"
                }
            ]
        },
        "file": "wp-admin/includes/menu.php"
    },
    {
        "name": "add_ping",
        "line": 4696,
        "end_line": 4696,
        "type": "filter",
        "doc": {
            "description": "Filters the new ping URL to add for the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "New ping URL to add.",
                    "types": [
                        "string"
                    ],
                    "variable": "$new"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "add_signup_meta",
        "line": 474,
        "end_line": 474,
        "type": "filter",
        "doc": {
            "description": "Filters the new default site meta variables.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "{     An array of default site meta variables.     @type int $lang_id     The language ID.     @type int $blog_public Whether search engines should be discouraged from indexing the site. 1 for true, 0 for false. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-signup.php"
    },
    {
        "name": "add_{$meta_type}_metadata",
        "line": 72,
        "end_line": 72,
        "type": "filter",
        "doc": {
            "description": "Filters whether to add metadata of a specific type.",
            "long_description": "<p>The dynamic portion of the hook, <code>$meta_type</code>, refers to the meta object type (comment, post, term, or user). Returning a non-null value will effectively short-circuit the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow adding metadata for the given type.",
                    "types": [
                        "null",
                        "bool"
                    ],
                    "variable": "$check"
                },
                {
                    "name": "param",
                    "content": "Object ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$object_id"
                },
                {
                    "name": "param",
                    "content": "Meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Meta value. Must be serializable if non-scalar.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$meta_value"
                },
                {
                    "name": "param",
                    "content": "Whether the specified meta key should be unique                              for the object. Optional. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$unique"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "additional_capabilities_display",
        "line": 744,
        "end_line": 744,
        "type": "filter",
        "doc": {
            "description": "Filters whether to display additional capabilities for the user.",
            "long_description": "<p>The 'Additional Capabilities' section will only be enabled if the number of the user's capabilities exceeds their number of roles.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether to display the capabilities. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enable"
                },
                {
                    "name": "param",
                    "content": "The current WP_User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$profileuser"
                }
            ]
        },
        "file": "wp-admin/user-edit.php"
    },
    {
        "name": "admin_body_class",
        "line": 220,
        "end_line": 220,
        "type": "filter",
        "doc": {
            "description": "Filters the CSS classes for the body tag in the admin.",
            "long_description": "<p>This filter differs from the {@see 'post_class'} and {@see 'body_class'} filters in two important ways:</p> <ol> <li><code>$classes</code> is a space-separated string of class names instead of an array.</li> <li>Not all core admin classes are filterable, notably: wp-admin, wp-core-ui, and no-js cannot be removed.</li> </ol>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Space-separated list of CSS classes.",
                    "types": [
                        "string"
                    ],
                    "variable": "$classes"
                }
            ]
        },
        "file": "wp-admin/admin-header.php"
    },
    {
        "name": "admin_comment_types_dropdown",
        "line": 390,
        "end_line": 396,
        "type": "filter",
        "doc": {
            "description": "Filters the comment types dropdown menu.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of comment types. Accepts 'Comments', 'Pings'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$comment_types"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-comments-list-table.php"
    },
    {
        "name": "admin_email_check_interval",
        "line": 599,
        "end_line": 599,
        "type": "filter",
        "doc": {
            "description": "Filters the interval for redirecting the user to the admin email confirmation screen.",
            "long_description": "<p>If <code>0</code> (zero) is returned, the user will not be redirected.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "Interval time (in seconds).",
                    "types": [
                        "int"
                    ],
                    "variable": "$interval"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "admin_footer_text",
        "line": 48,
        "end_line": 48,
        "type": "filter",
        "doc": {
            "description": "Filters the \"Thank you\" text displayed in the admin footer.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The content that will be printed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-admin/admin-footer.php"
    },
    {
        "name": "admin_memory_limit",
        "line": 6561,
        "end_line": 6561,
        "type": "filter",
        "doc": {
            "description": "Filters the maximum memory limit available for administration screens.",
            "long_description": "<p>This only applies to administrators, who may require more memory for tasks like updates. Memory limits when processing images (uploaded or edited by users of any role) are handled separately.</p> <p>The <code>WP_MAX_MEMORY_LIMIT</code> constant specifically defines the maximum memory limit available when in the administration back end. The default is 256M (256 megabytes of memory) or the original <code>memory_limit</code> php.ini value if this is higher.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "The default now takes the original <code>memory_limit</code> into account."
                },
                {
                    "name": "param",
                    "content": "The maximum WordPress memory limit. Accepts an integer                                   (bytes), or a shorthand string notation, such as '256M'.",
                    "types": [
                        "int",
                        "string"
                    ],
                    "variable": "$filtered_limit"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "admin_post_thumbnail_html",
        "line": 1562,
        "end_line": 1562,
        "type": "filter",
        "doc": {
            "description": "Filters the admin post thumbnail HTML markup to return.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "since",
                    "content": "3.5.0",
                    "description": "Added the <code>$post_id</code> parameter."
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "Added the <code>$thumbnail_id</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Admin post thumbnail HTML markup.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Thumbnail attachment ID, or null if there isn't one.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$thumbnail_id"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "admin_post_thumbnail_size",
        "line": 1533,
        "end_line": 1533,
        "type": "filter",
        "doc": {
            "description": "Filters the size used to display the post thumbnail image in the 'Featured Image' meta box.",
            "long_description": "<p>Note: When a theme adds 'post-thumbnail' support, a special 'post-thumbnail' image size is registered, which differs from the 'thumbnail' image size managed via the Settings &gt; Media screen. See the <code>$size</code> parameter description for more information on default values.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Post thumbnail image size to display in the meta box. Accepts any valid                                   image size, or an array of width and height values in pixels (in that order).                                   If the 'post-thumbnail' size is set, default is 'post-thumbnail'. Otherwise,                                   default is an array with 266 as both the height and width values.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "Post thumbnail attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$thumbnail_id"
                },
                {
                    "name": "param",
                    "content": "The post object associated with the thumbnail.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "admin_referrer_policy",
        "line": 1250,
        "end_line": 1250,
        "type": "filter",
        "doc": {
            "description": "Filters the admin referrer policy header value.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "since",
                    "content": "4.9.5",
                    "description": "The default value was changed to 'strict-origin-when-cross-origin'."
                },
                {
                    "name": "link",
                    "content": "<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy\">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy</a>",
                    "link": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy"
                },
                {
                    "name": "param",
                    "content": "The admin referrer policy header value. Default 'strict-origin-when-cross-origin'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$policy"
                }
            ]
        },
        "file": "wp-admin/includes/misc.php"
    },
    {
        "name": "admin_title",
        "line": 68,
        "end_line": 68,
        "type": "filter",
        "doc": {
            "description": "Filters the title tag content for an admin page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The page title, with extra context added.",
                    "types": [
                        "string"
                    ],
                    "variable": "$admin_title"
                },
                {
                    "name": "param",
                    "content": "The original page title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-admin/admin-header.php"
    },
    {
        "name": "admin_url",
        "line": 3311,
        "end_line": 3311,
        "type": "filter",
        "doc": {
            "description": "Filters the admin area URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The complete admin area URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the admin area URL. Blank string if no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Site ID, or null for the current site.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$blog_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "ajax_query_attachments_args",
        "line": 2962,
        "end_line": 2962,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments passed to WP_Query during an Ajax call for querying attachments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Query::parse_query()"
                },
                {
                    "name": "param",
                    "content": "An array of query variables.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "all_plugins",
        "line": 91,
        "end_line": 91,
        "type": "filter",
        "doc": {
            "description": "Filters the full array of plugins to list in the Plugins list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_plugins()"
                },
                {
                    "name": "param",
                    "content": "An array of plugins to display in the list table.",
                    "types": [
                        "array"
                    ],
                    "variable": "$all_plugins"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugins-list-table.php"
    },
    {
        "name": "all_themes",
        "line": 102,
        "end_line": 102,
        "type": "filter",
        "doc": {
            "description": "Filters the full array of WP_Theme objects to list in the Multisite themes list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of WP_Theme objects to display in the list table.",
                    "types": [
                        "\\WP_Theme[]"
                    ],
                    "variable": "$all"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-themes-list-table.php"
    },
    {
        "name": "alloptions",
        "line": 239,
        "end_line": 239,
        "type": "filter",
        "doc": {
            "description": "Filters all options after retrieving them.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Array with all options.",
                    "types": [
                        "array"
                    ],
                    "variable": "$alloptions"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "allow_dev_auto_core_updates",
        "line": 345,
        "end_line": 345,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable automatic core updates for development versions.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to enable automatic updates for                          development versions.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$upgrade_dev"
                }
            ]
        },
        "file": "wp-admin/includes/class-core-upgrader.php"
    },
    {
        "name": "allow_empty_comment",
        "line": 3368,
        "end_line": 3368,
        "type": "filter",
        "doc": {
            "description": "Filters whether an empty comment should be allowed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow empty comments. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow_empty_comment"
                },
                {
                    "name": "param",
                    "content": "Array of comment data to be sent to wp_insert_comment().",
                    "types": [
                        "array"
                    ],
                    "variable": "$commentdata"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "allow_major_auto_core_updates",
        "line": 374,
        "end_line": 374,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable major automatic core updates.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to enable major automatic core updates.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$upgrade_major"
                }
            ]
        },
        "file": "wp-admin/includes/class-core-upgrader.php"
    },
    {
        "name": "allow_minor_auto_core_updates",
        "line": 361,
        "end_line": 361,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable minor automatic core updates.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to enable minor automatic core updates.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$upgrade_minor"
                }
            ]
        },
        "file": "wp-admin/includes/class-core-upgrader.php"
    },
    {
        "name": "allow_password_reset",
        "line": 2299,
        "end_line": 2299,
        "type": "filter",
        "doc": {
            "description": "Filters whether to allow a password to be reset.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow the password to be reset. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow"
                },
                {
                    "name": "param",
                    "content": "The ID of the user attempting to reset a password.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_data->ID"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "allow_subdirectory_install",
        "line": 62,
        "end_line": 62,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable the subdirectory installation feature in Multisite.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to enable the subdirectory installation feature in Multisite. Default is false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow"
                }
            ]
        },
        "file": "wp-admin/includes/network.php"
    },
    {
        "name": "allowed_block_types",
        "line": 149,
        "end_line": 149,
        "type": "filter",
        "doc": {
            "description": "Filters the allowed block types for the editor, defaulting to true (all block types supported).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of block type slugs, or                                        boolean to enable/disable all.",
                    "types": [
                        "bool",
                        "array"
                    ],
                    "variable": "$allowed_block_types"
                },
                {
                    "name": "param",
                    "content": "The post resource data.",
                    "types": [
                        "object"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/edit-form-blocks.php"
    },
    {
        "name": "allowed_http_origin",
        "line": 474,
        "end_line": 474,
        "type": "filter",
        "doc": {
            "description": "Change the allowed HTTP origin result.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Origin URL if allowed, empty string if not.",
                    "types": [
                        "string"
                    ],
                    "variable": "$origin"
                },
                {
                    "name": "param",
                    "content": "Original origin string passed into is_allowed_http_origin function.",
                    "types": [
                        "string"
                    ],
                    "variable": "$origin_arg"
                }
            ]
        },
        "file": "wp-includes/http.php"
    },
    {
        "name": "allowed_http_origins",
        "line": 444,
        "end_line": 444,
        "type": "filter",
        "doc": {
            "description": "Change the origin types allowed for HTTP requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "{     Array of default allowed HTTP origins.     @type string $0 Non-secure URL for admin origin.     @type string $1 Secure URL for admin origin.     @type string $2 Non-secure URL for home origin.     @type string $3 Secure URL for home origin. }",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$allowed_origins"
                }
            ]
        },
        "file": "wp-includes/http.php"
    },
    {
        "name": "allowed_redirect_hosts",
        "line": 1455,
        "end_line": 1455,
        "type": "filter",
        "doc": {
            "description": "Filters the whitelist of hosts to redirect to.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of allowed host names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$hosts"
                },
                {
                    "name": "param",
                    "content": "The host name of the redirect destination; empty string if not set.",
                    "types": [
                        "string"
                    ],
                    "variable": "$host"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "allowed_themes",
        "line": 1476,
        "end_line": 1476,
        "type": "filter",
        "doc": {
            "description": "Filters the array of themes allowed on the network.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "An array of theme stylesheet names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$allowed_themes"
                }
            ]
        },
        "file": "wp-includes/class-wp-theme.php"
    },
    {
        "name": "async_update_translation",
        "line": 81,
        "end_line": 81,
        "type": "filter",
        "doc": {
            "description": "Filters whether to asynchronously update translation for core, a plugin, or a theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to update.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$update"
                },
                {
                    "name": "param",
                    "content": "The update offer.",
                    "types": [
                        "object"
                    ],
                    "variable": "$language_update"
                }
            ]
        },
        "file": "wp-admin/includes/class-language-pack-upgrader.php"
    },
    {
        "name": "async_upload_{$type}",
        "line": 128,
        "end_line": 128,
        "type": "filter",
        "doc": {
            "description": "Filters the returned ID of an uploaded attachment.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$type</code>, refers to the attachment type, such as 'image', 'audio', 'video', 'file', etc.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Uploaded attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-admin/async-upload.php"
    },
    {
        "name": "atom_enclosure",
        "line": 525,
        "end_line": 525,
        "type": "filter",
        "doc": {
            "description": "Filters the atom enclosure HTML link tag for the current post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The HTML link tag with a URI and other attributes.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html_link_tag"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "attach_session_information",
        "line": 133,
        "end_line": 133,
        "type": "filter",
        "doc": {
            "description": "Filters the information attached to the newly created session.",
            "long_description": "<p>Can be used to attach further information to a session.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of extra data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$session"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-session-tokens.php"
    },
    {
        "name": "attachment_fields_to_edit",
        "line": 1464,
        "end_line": 1464,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment fields to edit.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of attachment form fields.",
                    "types": [
                        "array"
                    ],
                    "variable": "$form_fields"
                },
                {
                    "name": "param",
                    "content": "The WP_Post attachment object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "attachment_fields_to_save",
        "line": 765,
        "end_line": 765,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment fields to be saved.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_get_attachment_metadata()"
                },
                {
                    "name": "param",
                    "content": "An array of post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "An array of attachment metadata.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attachment"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "attachment_link",
        "line": 457,
        "end_line": 457,
        "type": "filter",
        "doc": {
            "description": "Filters the permalink for an attachment.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "The attachment's permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "attachment_thumbnail_args",
        "line": 500,
        "end_line": 500,
        "type": "filter",
        "doc": {
            "description": "Filters the parameters for the attachment thumbnail creation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "An array of parameters to create the thumbnail.",
                    "types": [
                        "array"
                    ],
                    "variable": "$image_attachment"
                },
                {
                    "name": "param",
                    "content": "Current attachment metadata.",
                    "types": [
                        "array"
                    ],
                    "variable": "$metadata"
                },
                {
                    "name": "param",
                    "content": "An array containing the thumbnail path and url.",
                    "types": [
                        "array"
                    ],
                    "variable": "$uploaded"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "attachment_url_to_postid",
        "line": 4308,
        "end_line": 4308,
        "type": "filter",
        "doc": {
            "description": "Filters an attachment id found by URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "The post_id (if any) found by the function.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "The URL being looked up.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "attribute_escape",
        "line": 4481,
        "end_line": 4481,
        "type": "filter",
        "doc": {
            "description": "Filters a string cleaned and escaped for output in an HTML attribute.",
            "long_description": "<p>Text passed to esc_attr() is stripped of invalid or special characters before output.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.6"
                },
                {
                    "name": "param",
                    "content": "The text after it has been escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$safe_text"
                },
                {
                    "name": "param",
                    "content": "The text prior to being escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "audio_submitbox_misc_sections",
        "line": 3361,
        "end_line": 3361,
        "type": "filter",
        "doc": {
            "description": "Filters the audio attachment metadata fields to be shown in the publish meta box.",
            "long_description": "<p>The key for each item in the array should correspond to an attachment metadata key, and the value should be the desired label.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of the attachment metadata keys and labels.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "WP_Post object for the current attachment.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "auth_cookie",
        "line": 756,
        "end_line": 756,
        "type": "filter",
        "doc": {
            "description": "Filters the authentication cookie.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "4.0.0",
                    "description": "The <code>$token</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Authentication cookie.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cookie"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "The time the cookie expires as a UNIX timestamp.",
                    "types": [
                        "int"
                    ],
                    "variable": "$expiration"
                },
                {
                    "name": "param",
                    "content": "Cookie scheme used. Accepts 'auth', 'secure_auth', or 'logged_in'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$scheme"
                },
                {
                    "name": "param",
                    "content": "User's session token used.",
                    "types": [
                        "string"
                    ],
                    "variable": "$token"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "auth_cookie_expiration",
        "line": 837,
        "end_line": 837,
        "type": "filter",
        "doc": {
            "description": "Filters the duration of the authentication cookie expiration period.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Duration of the expiration period in seconds.",
                    "types": [
                        "int"
                    ],
                    "variable": "$length"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Whether to remember the user login. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$remember"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "auth_redirect_scheme",
        "line": 1058,
        "end_line": 1058,
        "type": "filter",
        "doc": {
            "description": "Filters the authentication redirect scheme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Authentication redirect scheme. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$scheme"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "auth_{$object_type}_meta_{$meta_key}",
        "line": 342,
        "end_line": 342,
        "type": "filter",
        "doc": {
            "description": "Filters whether the user is allowed to edit a specific meta key of a specific object type.",
            "long_description": "<p>Return true to have the mapped meta caps from <code>edit_{$object_type}</code> apply.</p> <p>The dynamic portion of the hook name, <code>$object_type</code> refers to the object type being filtered. The dynamic portion of the hook name, <code>$meta_key</code>, refers to the meta key passed to map_meta_cap().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0",
                    "description": "As <code>auth_post_meta_{$meta_key}</code>."
                },
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether the user can add the object meta. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allowed"
                },
                {
                    "name": "param",
                    "content": "The meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Object ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$object_id"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Capability name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cap"
                },
                {
                    "name": "param",
                    "content": "Array of the user's capabilities.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$caps"
                }
            ]
        },
        "file": "wp-includes/capabilities.php"
    },
    {
        "name": "auth_{$object_type}_meta_{$meta_key}_for_{$object_subtype}",
        "line": 321,
        "end_line": 321,
        "type": "filter",
        "doc": {
            "description": "Filters whether the user is allowed to edit a specific meta key of a specific object type and subtype.",
            "long_description": "<p>The dynamic portions of the hook name, <code>$object_type</code>, <code>$meta_key</code>, and <code>$object_subtype</code>, refer to the metadata object type (comment, post, term or user), the meta key value, and the object subtype respectively.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.8"
                },
                {
                    "name": "param",
                    "content": "Whether the user can add the object meta. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allowed"
                },
                {
                    "name": "param",
                    "content": "The meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Object ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$object_id"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Capability name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cap"
                },
                {
                    "name": "param",
                    "content": "Array of the user's capabilities.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$caps"
                }
            ]
        },
        "file": "wp-includes/capabilities.php"
    },
    {
        "name": "authenticate",
        "line": 539,
        "end_line": 539,
        "type": "filter",
        "doc": {
            "description": "Filters whether a set of user login credentials are valid.",
            "long_description": "<p>A WP_User object is returned if the credentials authenticate a user. WP_Error or null otherwise.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "<code>$username</code> now accepts an email address."
                },
                {
                    "name": "param",
                    "content": "WP_User if the user is authenticated.                                        WP_Error or null otherwise.",
                    "types": [
                        "null",
                        "\\WP_User",
                        "\\WP_Error"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "Username or email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$username"
                },
                {
                    "name": "param",
                    "content": "User password",
                    "types": [
                        "string"
                    ],
                    "variable": "$password"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "author_email",
        "line": 130,
        "end_line": 130,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's email for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The comment author's email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author_email"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "author_feed_link",
        "line": 815,
        "end_line": 815,
        "type": "filter",
        "doc": {
            "description": "Filters the feed link for a given author.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.1"
                },
                {
                    "name": "param",
                    "content": "The author feed link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Feed type. Possible values include 'rss2', 'atom'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "author_link",
        "line": 371,
        "end_line": 371,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to the author's page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The URL to the author's page.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "The author's id.",
                    "types": [
                        "int"
                    ],
                    "variable": "$author_id"
                },
                {
                    "name": "param",
                    "content": "The author's nice name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author_nicename"
                }
            ]
        },
        "file": "wp-includes/author-template.php"
    },
    {
        "name": "author_rewrite_rules",
        "line": 1366,
        "end_line": 1366,
        "type": "filter",
        "doc": {
            "description": "Filters rewrite rules used for author archives.",
            "long_description": "<p>Likely author archives would include /author/author-name/, as well as pagination and feed paths for author archives.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of rewrite rules for author archives, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$author_rewrite"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "auto_core_update_email",
        "line": 841,
        "end_line": 841,
        "type": "filter",
        "doc": {
            "description": "Filters the email sent following an automatic background core update.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "{     Array of email arguments that will be passed to wp_mail().     @type string $to      The email recipient. An array of emails                            can be returned, as handled by wp_mail().     @type string $subject The email's subject.     @type string $body    The email message body.     @type string $headers Any email headers, defaults to no headers. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email"
                },
                {
                    "name": "param",
                    "content": "The type of email being sent. Can be one of                            'success', 'fail', 'manual', 'critical'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "The update offer that was attempted.",
                    "types": [
                        "object"
                    ],
                    "variable": "$core_update"
                },
                {
                    "name": "param",
                    "content": "The result for the core update. Can be WP_Error.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$result"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-automatic-updater.php"
    },
    {
        "name": "auto_core_update_send_email",
        "line": 646,
        "end_line": 646,
        "type": "filter",
        "doc": {
            "description": "Filters whether to send an email following an automatic background core update.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to send the email. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$send"
                },
                {
                    "name": "param",
                    "content": "The type of email to send. Can be one of                            'success', 'fail', 'critical'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "The update offer that was attempted.",
                    "types": [
                        "object"
                    ],
                    "variable": "$core_update"
                },
                {
                    "name": "param",
                    "content": "The result for the core update. Can be WP_Error.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$result"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-automatic-updater.php"
    },
    {
        "name": "auto_update_{$type}",
        "line": 184,
        "end_line": 184,
        "type": "filter",
        "doc": {
            "description": "Filters whether to automatically update core, a plugin, a theme, or a language.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$type</code>, refers to the type of update being checked. Can be 'core', 'theme', 'plugin', or 'translation'.</p> <p>Generally speaking, plugins, themes, and major core versions are not updated by default, while translations and minor and development versions for core are updated by default.</p> <p>See the {@see 'allow_dev_auto_core_updates'}, {@see 'allow_minor_auto_core_updates'}, and {@see 'allow_major_auto_core_updates'} filters for a more straightforward way to adjust core updates.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to update.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$update"
                },
                {
                    "name": "param",
                    "content": "The update offer.",
                    "types": [
                        "object"
                    ],
                    "variable": "$item"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-automatic-updater.php"
    },
    {
        "name": "autocomplete_users_for_site_admins",
        "line": 283,
        "end_line": 283,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable user auto-complete for non-super admins in Multisite.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to enable auto-complete for non-super admins. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enable"
                }
            ]
        },
        "file": "wp-admin/user-new.php"
    },
    {
        "name": "automatic_updater_disabled",
        "line": 55,
        "end_line": 55,
        "type": "filter",
        "doc": {
            "description": "Filters whether to entirely disable background updates.",
            "long_description": "<p>There are more fine-grained filters and controls for selective disabling. This filter parallels the AUTOMATIC_UPDATER_DISABLED constant in name.</p> <p>This also disables update notification emails. That may change in the future.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the updater should be disabled.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$disabled"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-automatic-updater.php"
    },
    {
        "name": "automatic_updates_debug_email",
        "line": 1012,
        "end_line": 1012,
        "type": "filter",
        "doc": {
            "description": "Filters the debug email that can be sent following an automatic background core update.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.8.0"
                },
                {
                    "name": "param",
                    "content": "{     Array of email arguments that will be passed to wp_mail().     @type string $to      The email recipient. An array of emails                           can be returned, as handled by wp_mail().     @type string $subject Email subject.     @type string $body    Email message body.     @type string $headers Any email headers. Default empty. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email"
                },
                {
                    "name": "param",
                    "content": "The number of failures encountered while upgrading.",
                    "types": [
                        "int"
                    ],
                    "variable": "$failures"
                },
                {
                    "name": "param",
                    "content": "The results of all attempted updates.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$results"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-automatic-updater.php"
    },
    {
        "name": "automatic_updates_is_vcs_checkout",
        "line": 120,
        "end_line": 120,
        "type": "filter",
        "doc": {
            "description": "Filters whether the automatic updater should consider a filesystem location to be potentially managed by a version control system.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether a VCS checkout was discovered at $context                        or ABSPATH, or anywhere higher.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$checkout"
                },
                {
                    "name": "param",
                    "content": "The filesystem context (a path) against which                        filesystem status should be checked.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-automatic-updater.php"
    },
    {
        "name": "automatic_updates_send_debug_email",
        "line": 494,
        "end_line": 494,
        "type": "filter",
        "doc": {
            "description": "Filters whether to send a debugging email for each automatic background update.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "By default, emails are sent if the                                  install is a development version.                                  Return false to avoid the email.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$development_version"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-automatic-updater.php"
    },
    {
        "name": "available_permalink_structure_tags",
        "line": 271,
        "end_line": 271,
        "type": "filter",
        "doc": {
            "description": "Filters the list of available permalink structure tags on the Permalinks settings page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of key =&gt; value pairs of available permalink structure tags.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$available_tags"
                }
            ]
        },
        "file": "wp-admin/options-permalink.php"
    },
    {
        "name": "avatar_defaults",
        "line": 293,
        "end_line": 293,
        "type": "filter",
        "doc": {
            "description": "Filters the default avatars.",
            "long_description": "<p>Avatars are stored in key/value pairs, where the key is option value, and the name is the displayed avatar name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of default avatars.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$avatar_defaults"
                }
            ]
        },
        "file": "wp-admin/options-discussion.php"
    },
    {
        "name": "big_image_size_threshold",
        "line": 243,
        "end_line": 243,
        "type": "filter",
        "doc": {
            "description": "Filters the \"BIG image\" threshold value.",
            "long_description": "<p>If the original image width or height is above the threshold, it will be scaled down. The threshold is used as max width and max height. The scaled down image will be used as the largest available size, including the <code>_wp_attached_file</code> post meta value.</p> <p>Returning <code>false</code> from the filter callback will disable the scaling.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "The threshold value in pixels. Default 2560.",
                    "types": [
                        "int"
                    ],
                    "variable": "$threshold"
                },
                {
                    "name": "param",
                    "content": "Indexed array of the image width and height (in that order).",
                    "types": [
                        "array"
                    ],
                    "variable": "$imagesize"
                },
                {
                    "name": "param",
                    "content": "Full path to the uploaded image file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "Attachment post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "block_categories",
        "line": 2197,
        "end_line": 2197,
        "type": "filter",
        "doc": {
            "description": "Filter the default array of block categories.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of block categories.",
                    "types": [
                        "array[]"
                    ],
                    "variable": "$default_categories"
                },
                {
                    "name": "param",
                    "content": "Post being loaded.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "block_editor_no_javascript_message",
        "line": 433,
        "end_line": 433,
        "type": "filter",
        "doc": {
            "description": "Filters the message displayed in the block editor interface when JavaScript is not enabled in the browser.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.3"
                },
                {
                    "name": "param",
                    "content": "The message being displayed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$message"
                },
                {
                    "name": "param",
                    "content": "The post being edited.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/edit-form-blocks.php"
    },
    {
        "name": "block_editor_preload_paths",
        "line": 65,
        "end_line": 65,
        "type": "filter",
        "doc": {
            "description": "Preload common data by specifying an array of REST API paths that will be preloaded.",
            "long_description": "<p>Filters the array of paths that will be preloaded.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of paths to preload.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$preload_paths"
                },
                {
                    "name": "param",
                    "content": "Post being edited.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/edit-form-blocks.php"
    },
    {
        "name": "block_editor_settings",
        "line": 381,
        "end_line": 381,
        "type": "filter",
        "doc": {
            "description": "Filters the settings to pass to the block editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Default editor settings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$editor_settings"
                },
                {
                    "name": "param",
                    "content": "Post being edited.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/edit-form-blocks.php"
    },
    {
        "name": "block_local_requests",
        "line": 870,
        "end_line": 870,
        "type": "filter",
        "doc": {
            "description": "Filters whether to block local HTTP API requests.",
            "long_description": "<p>A local request is one to <code>localhost</code> or to the same host as the site itself.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether to block local requests. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$block"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "block_parser_class",
        "line": 294,
        "end_line": 294,
        "type": "filter",
        "doc": {
            "description": "Filter to allow plugins to replace the server-side block parser",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Name of block parser class.",
                    "types": [
                        "string"
                    ],
                    "variable": "$parser_class"
                }
            ]
        },
        "file": "wp-includes/blocks.php"
    },
    {
        "name": "blog_option_{$option}",
        "line": 372,
        "end_line": 372,
        "type": "filter",
        "doc": {
            "description": "Filters a blog option value.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the blog option name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "The option value.",
                    "types": [
                        "string"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Blog ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/ms-blogs.php"
    },
    {
        "name": "blog_redirect_404",
        "line": 2052,
        "end_line": 2052,
        "type": "filter",
        "doc": {
            "description": "Filters the redirect URL for 404s on the main site.",
            "long_description": "<p>The filter is only evaluated if the NOBLOGREDIRECT constant is defined.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The redirect URL defined in NOBLOGREDIRECT.",
                    "types": [
                        "string"
                    ],
                    "variable": "$no_blog_redirect"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "bloginfo",
        "line": 838,
        "end_line": 838,
        "type": "filter",
        "doc": {
            "description": "Filters the site information returned by get_bloginfo().",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "0.71"
                },
                {
                    "name": "param",
                    "content": "The requested non-URL site information.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Type of information requested.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$show"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "bloginfo_rss",
        "line": 65,
        "end_line": 65,
        "type": "filter",
        "doc": {
            "description": "Filters the bloginfo for display in RSS feeds.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_bloginfo()"
                },
                {
                    "name": "param",
                    "content": "RSS container for the blog information.",
                    "types": [
                        "string"
                    ],
                    "variable": "$rss_container"
                },
                {
                    "name": "param",
                    "content": "The type of blog information to retrieve.",
                    "types": [
                        "string"
                    ],
                    "variable": "$show"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "bloginfo_url",
        "line": 828,
        "end_line": 828,
        "type": "filter",
        "doc": {
            "description": "Filters the URL returned by get_bloginfo().",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.5"
                },
                {
                    "name": "param",
                    "content": "The URL returned by bloginfo().",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Type of information requested.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$show"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "body_class",
        "line": 832,
        "end_line": 832,
        "type": "filter",
        "doc": {
            "description": "Filters the list of CSS body class names for the current post or page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of body class names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$classes"
                },
                {
                    "name": "param",
                    "content": "An array of additional class names added to the body.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$class"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "browse-happy-notice",
        "line": 1610,
        "end_line": 1610,
        "type": "filter",
        "doc": {
            "description": "Filters the notice output for the 'Browse Happy' nag meta box.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "The notice content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$notice"
                },
                {
                    "name": "param",
                    "content": "An array containing web browser information. See <code>wp_check_browser_version()</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "bulk_actions-{$this->screen->id}",
        "line": 454,
        "end_line": 454,
        "type": "filter",
        "doc": {
            "description": "Filters the list table Bulk Actions drop-down.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;screen-&gt;id</code>, refers to the ID of the current screen, usually a string.</p> <p>This filter can currently only be used to remove bulk actions.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of the available bulk actions.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-list-table.php"
    },
    {
        "name": "bulk_post_updated_messages",
        "line": 367,
        "end_line": 367,
        "type": "filter",
        "doc": {
            "description": "Filters the bulk action updated messages.",
            "long_description": "<p>By default, custom post types use the messages for the 'post' post type.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Arrays of messages, each keyed by the corresponding post type. Messages are                               keyed with 'updated', 'locked', 'deleted', 'trashed', and 'untrashed'.",
                    "types": [
                        "array[]"
                    ],
                    "variable": "$bulk_messages"
                },
                {
                    "name": "param",
                    "content": "Array of item counts for each message, used to build internationalized strings.",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$bulk_counts"
                }
            ]
        },
        "file": "wp-admin/edit.php"
    },
    {
        "name": "can_add_user_to_blog",
        "line": 179,
        "end_line": 179,
        "type": "filter",
        "doc": {
            "description": "Filters whether a user should be added to a site.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "True if the user should be added to the site, false                               or error object otherwise.",
                    "types": [
                        "bool",
                        "\\WP_Error"
                    ],
                    "variable": "$retval"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "User role.",
                    "types": [
                        "string"
                    ],
                    "variable": "$role"
                },
                {
                    "name": "param",
                    "content": "Site ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$blog_id"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "can_edit_network",
        "line": 830,
        "end_line": 830,
        "type": "filter",
        "doc": {
            "description": "Filters whether this network can be edited from this page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the network can be edited from this page.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "The network ID to check.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-admin/includes/ms.php"
    },
    {
        "name": "cancel_comment_reply_link",
        "line": 1861,
        "end_line": 1861,
        "type": "filter",
        "doc": {
            "description": "Filters the cancel comment reply link HTML.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The HTML-formatted cancel comment reply link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$formatted_link"
                },
                {
                    "name": "param",
                    "content": "Cancel comment reply link URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Cancel comment reply link text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "category_css_class",
        "line": 235,
        "end_line": 235,
        "type": "filter",
        "doc": {
            "description": "Filters the list of CSS classes to include with each category in the list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_list_categories()"
                },
                {
                    "name": "param",
                    "content": "An array of CSS classes to be applied to each list item.",
                    "types": [
                        "array"
                    ],
                    "variable": "$css_classes"
                },
                {
                    "name": "param",
                    "content": "Category data object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$category"
                },
                {
                    "name": "param",
                    "content": "Depth of page, used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                },
                {
                    "name": "param",
                    "content": "An array of wp_list_categories() arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-walker-category.php"
    },
    {
        "name": "category_description",
        "line": 119,
        "end_line": 119,
        "type": "filter",
        "doc": {
            "description": "Filters the category description for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "param",
                    "content": "Category description.",
                    "types": [
                        "string"
                    ],
                    "variable": "$description"
                },
                {
                    "name": "param",
                    "content": "Category object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$category"
                }
            ]
        },
        "file": "wp-includes/class-walker-category.php"
    },
    {
        "name": "category_feed_link",
        "line": 895,
        "end_line": 895,
        "type": "filter",
        "doc": {
            "description": "Filters the category feed link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.1"
                },
                {
                    "name": "param",
                    "content": "The category feed link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Feed type. Possible values include 'rss2', 'atom'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "category_link",
        "line": 4264,
        "end_line": 4264,
        "type": "filter",
        "doc": {
            "description": "Filters the category link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "deprecated",
                    "content": "2.5.0",
                    "description": "Use 'term_link' instead."
                },
                {
                    "name": "param",
                    "content": "Category link URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$termlink"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "category_list_link_attributes",
        "line": 138,
        "end_line": 138,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML attributes applied to a category list item's anchor element.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "{     The HTML attributes applied to the list item's <code>&lt;a&gt;</code> element, empty strings are ignored.     @type string $href  The href attribute.     @type string $title The title attribute. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$atts"
                },
                {
                    "name": "param",
                    "content": "Term data object.",
                    "types": [
                        "\\WP_Term"
                    ],
                    "variable": "$category"
                },
                {
                    "name": "param",
                    "content": "Depth of category, used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "ID of the current category.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/class-walker-category.php"
    },
    {
        "name": "check_is_user_spammed",
        "line": 318,
        "end_line": 318,
        "type": "filter",
        "doc": {
            "description": "Filters whether the user has been marked as a spammer.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the user is considered a spammer.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$spammed"
                },
                {
                    "name": "param",
                    "content": "User to check against.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "check_password",
        "line": 2365,
        "end_line": 2365,
        "type": "filter",
        "doc": {
            "description": "Filters whether the plaintext password matches the encrypted password.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether the passwords match.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$check"
                },
                {
                    "name": "param",
                    "content": "The plaintext password.",
                    "types": [
                        "string"
                    ],
                    "variable": "$password"
                },
                {
                    "name": "param",
                    "content": "The hashed password.",
                    "types": [
                        "string"
                    ],
                    "variable": "$hash"
                },
                {
                    "name": "param",
                    "content": "User ID. Can be empty.",
                    "types": [
                        "string",
                        "int"
                    ],
                    "variable": "$user_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "clean_url",
        "line": 4370,
        "end_line": 4370,
        "type": "filter",
        "doc": {
            "description": "Filters a string cleaned and escaped for output as a URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The cleaned URL to be returned.",
                    "types": [
                        "string"
                    ],
                    "variable": "$good_protocol_url"
                },
                {
                    "name": "param",
                    "content": "The URL prior to cleaning.",
                    "types": [
                        "string"
                    ],
                    "variable": "$original_url"
                },
                {
                    "name": "param",
                    "content": "If 'display', replace ampersands and single quotes only.",
                    "types": [
                        "string"
                    ],
                    "variable": "$_context"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "close_comments_for_post_types",
        "line": 3107,
        "end_line": 3107,
        "type": "filter",
        "doc": {
            "description": "Filters the list of post types to automatically close comments for.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "An array of post type names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_types"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "comment_author",
        "line": 73,
        "end_line": 73,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's name for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The comment author's username.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_author_rss",
        "line": 334,
        "end_line": 334,
        "type": "filter",
        "doc": {
            "description": "Filters the current comment author for use in a feed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_comment_author()"
                },
                {
                    "name": "param",
                    "content": "The current comment author.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_author"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "comment_class",
        "line": 536,
        "end_line": 536,
        "type": "filter",
        "doc": {
            "description": "Filters the returned CSS classes for the current comment.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of comment classes.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$classes"
                },
                {
                    "name": "param",
                    "content": "A comma-separated list of additional classes added to the list.",
                    "types": [
                        "string"
                    ],
                    "variable": "$class"
                },
                {
                    "name": "param",
                    "content": "The comment id.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                },
                {
                    "name": "param",
                    "content": "The post ID or WP_Post object.",
                    "types": [
                        "int",
                        "\\WP_Post"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_cookie_lifetime",
        "line": 574,
        "end_line": 574,
        "type": "filter",
        "doc": {
            "description": "Filters the lifetime of the comment cookie in seconds.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Comment cookie lifetime. Default 30000000.",
                    "types": [
                        "int"
                    ],
                    "variable": "$seconds"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "comment_duplicate_message",
        "line": 710,
        "end_line": 710,
        "type": "filter",
        "doc": {
            "description": "Filters duplicate comment error message.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Duplicate comment error message.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_duplicate_message"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "comment_edit_pre",
        "line": 123,
        "end_line": 123,
        "type": "filter",
        "doc": {
            "description": "Filters the comment content before editing.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Comment content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment->comment_content"
                }
            ]
        },
        "file": "wp-admin/includes/comment.php"
    },
    {
        "name": "comment_edit_redirect",
        "line": 350,
        "end_line": 350,
        "type": "filter",
        "doc": {
            "description": "Filters the URI the user is redirected to after editing a comment in the admin.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The URI the user will be redirected to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                },
                {
                    "name": "param",
                    "content": "The ID of the comment being edited.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-admin/comment.php"
    },
    {
        "name": "comment_email",
        "line": 193,
        "end_line": 193,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's email for display.",
            "long_description": "<p>Care should be taken to protect the email address and assure that email harvesters do not capture your commenter's email address.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The comment author's email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_author_email"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_excerpt",
        "line": 648,
        "end_line": 648,
        "type": "filter",
        "doc": {
            "description": "Filters the comment excerpt for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The comment excerpt text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_excerpt"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_excerpt_length",
        "line": 609,
        "end_line": 609,
        "type": "filter",
        "doc": {
            "description": "Filters the maximum number of words used in the comment excerpt.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The amount of words you want to display in the comment excerpt.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_excerpt_length"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_feed_groupby",
        "line": 2612,
        "end_line": 2612,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the GROUP BY clause of the comments feed query before sending.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The GROUP BY clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cgroupby"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "comment_feed_join",
        "line": 2592,
        "end_line": 2592,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the JOIN clause of the comments feed query before sending.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The JOIN clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cjoin"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "comment_feed_limits",
        "line": 2632,
        "end_line": 2632,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the LIMIT clause of the comments feed query before sending.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The JOIN clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$climits"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "comment_feed_orderby",
        "line": 2622,
        "end_line": 2622,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the ORDER BY clause of the comments feed query before sending.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The ORDER BY clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$corderby"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "comment_feed_where",
        "line": 2602,
        "end_line": 2602,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the WHERE clause of the comments feed query before sending.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The WHERE clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cwhere"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "comment_flood_filter",
        "line": 905,
        "end_line": 905,
        "type": "filter",
        "doc": {
            "description": "Filters the comment flood status.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether a comment flood is occurring. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$bool"
                },
                {
                    "name": "param",
                    "content": "Timestamp of when the last comment was posted.",
                    "types": [
                        "int"
                    ],
                    "variable": "$time_lastcomment"
                },
                {
                    "name": "param",
                    "content": "Timestamp of when the new comment was posted.",
                    "types": [
                        "int"
                    ],
                    "variable": "$time_newcomment"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "comment_flood_message",
        "line": 927,
        "end_line": 927,
        "type": "filter",
        "doc": {
            "description": "Filters the comment flood error message.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Comment flood error message.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_flood_message"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "comment_form_default_fields",
        "line": 2358,
        "end_line": 2358,
        "type": "filter",
        "doc": {
            "description": "Filters the default comment form fields.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of the default comment fields.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$fields"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_form_defaults",
        "line": 2430,
        "end_line": 2430,
        "type": "filter",
        "doc": {
            "description": "Filters the comment form default arguments.",
            "long_description": "<p>Use {@see 'comment_form_default_fields'} to filter the comment fields.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The default comment form arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$defaults"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_form_field_comment",
        "line": 2555,
        "end_line": 2555,
        "type": "filter",
        "doc": {
            "description": "Filters the content of the comment textarea field for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The content of the comment textarea field.",
                    "types": [
                        "string"
                    ],
                    "variable": "$args_comment_field"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_form_field_{$name}",
        "line": 2580,
        "end_line": 2580,
        "type": "filter",
        "doc": {
            "description": "Filters a comment form field for display.",
            "long_description": "<p>The dynamic portion of the filter hook, <code>$name</code>, refers to the name of the comment form field. Such as 'author', 'email', or 'url'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The HTML-formatted output of the comment form field.",
                    "types": [
                        "string"
                    ],
                    "variable": "$field"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_form_fields",
        "line": 2535,
        "end_line": 2535,
        "type": "filter",
        "doc": {
            "description": "Filters the comment form fields, including the textarea.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The comment fields.",
                    "types": [
                        "array"
                    ],
                    "variable": "$comment_fields"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_form_logged_in",
        "line": 2505,
        "end_line": 2505,
        "type": "filter",
        "doc": {
            "description": "Filters the 'logged in' message for the comment form for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The logged-in-as HTML-formatted message.",
                    "types": [
                        "string"
                    ],
                    "variable": "$args_logged_in"
                },
                {
                    "name": "param",
                    "content": "An array containing the comment author's                               username, email, and URL.",
                    "types": [
                        "array"
                    ],
                    "variable": "$commenter"
                },
                {
                    "name": "param",
                    "content": "If the commenter is a registered user,                               the display name, blank otherwise.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_identity"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_form_submit_button",
        "line": 2609,
        "end_line": 2609,
        "type": "filter",
        "doc": {
            "description": "Filters the submit button for the comment form to display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "HTML markup for the submit button.",
                    "types": [
                        "string"
                    ],
                    "variable": "$submit_button"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to comment_form().",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_form_submit_field",
        "line": 2628,
        "end_line": 2628,
        "type": "filter",
        "doc": {
            "description": "Filters the submit field for the comment form to display.",
            "long_description": "<p>The submit field includes the submit button, hidden fields for the comment form, and any wrapper markup.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "HTML markup for the submit field.",
                    "types": [
                        "string"
                    ],
                    "variable": "$submit_field"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to comment_form().",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_id_fields",
        "line": 1901,
        "end_line": 1901,
        "type": "filter",
        "doc": {
            "description": "Filters the returned comment id fields.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The HTML-formatted hidden id field comment elements.",
                    "types": [
                        "string"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                },
                {
                    "name": "param",
                    "content": "The id of the comment being replied to.",
                    "types": [
                        "int"
                    ],
                    "variable": "$replytoid"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_link",
        "line": 314,
        "end_line": 314,
        "type": "filter",
        "doc": {
            "description": "Filters the current comment's permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_comment_link()"
                },
                {
                    "name": "param",
                    "content": "The current comment permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_permalink"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "comment_max_links_url",
        "line": 65,
        "end_line": 65,
        "type": "filter",
        "doc": {
            "description": "Filters the number of links found in a comment.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "Added the <code>$comment</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The number of links found.",
                    "types": [
                        "int"
                    ],
                    "variable": "$num_links"
                },
                {
                    "name": "param",
                    "content": "Comment author's URL. Included in allowed links total.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Content of the comment.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "comment_moderation_headers",
        "line": 1847,
        "end_line": 1847,
        "type": "filter",
        "doc": {
            "description": "Filters the comment moderation email headers.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Headers for the comment moderation email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$message_headers"
                },
                {
                    "name": "param",
                    "content": "Comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "comment_moderation_recipients",
        "line": 1817,
        "end_line": 1817,
        "type": "filter",
        "doc": {
            "description": "Filters the list of recipients for comment moderation emails.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "List of email addresses to notify for comment moderation.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$emails"
                },
                {
                    "name": "param",
                    "content": "Comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "comment_moderation_subject",
        "line": 1837,
        "end_line": 1837,
        "type": "filter",
        "doc": {
            "description": "Filters the comment moderation email subject.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.2"
                },
                {
                    "name": "param",
                    "content": "Subject of the comment moderation email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                },
                {
                    "name": "param",
                    "content": "Comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "comment_moderation_text",
        "line": 1827,
        "end_line": 1827,
        "type": "filter",
        "doc": {
            "description": "Filters the comment moderation email text.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.2"
                },
                {
                    "name": "param",
                    "content": "Text of the comment moderation email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$notify_message"
                },
                {
                    "name": "param",
                    "content": "Comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "comment_notification_headers",
        "line": 1672,
        "end_line": 1672,
        "type": "filter",
        "doc": {
            "description": "Filters the comment notification email headers.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.2"
                },
                {
                    "name": "param",
                    "content": "Headers for the comment notification email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$message_headers"
                },
                {
                    "name": "param",
                    "content": "Comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "comment_notification_notify_author",
        "line": 1528,
        "end_line": 1528,
        "type": "filter",
        "doc": {
            "description": "Filters whether to notify comment authors of their comments on their own posts.",
            "long_description": "<p>By default, comment authors aren't notified of their comments on their own posts. This filter allows you to override that.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether to notify the post author of their own comment.                         Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$notify"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "comment_notification_recipients",
        "line": 1505,
        "end_line": 1505,
        "type": "filter",
        "doc": {
            "description": "Filters the list of email addresses to receive a comment notification.",
            "long_description": "<p>By default, only post authors are notified of comments. This filter allows others to be added.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of email addresses to receive a comment notification.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$emails"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "comment_notification_subject",
        "line": 1662,
        "end_line": 1662,
        "type": "filter",
        "doc": {
            "description": "Filters the comment notification email subject.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.2"
                },
                {
                    "name": "param",
                    "content": "The comment notification email subject.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                },
                {
                    "name": "param",
                    "content": "Comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "comment_notification_text",
        "line": 1652,
        "end_line": 1652,
        "type": "filter",
        "doc": {
            "description": "Filters the comment notification email text.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.2"
                },
                {
                    "name": "param",
                    "content": "The comment notification email text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$notify_message"
                },
                {
                    "name": "param",
                    "content": "Comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "comment_post_redirect",
        "line": 78,
        "end_line": 78,
        "type": "filter",
        "doc": {
            "description": "Filters the location URI to send the commenter after posting.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.5"
                },
                {
                    "name": "param",
                    "content": "The 'redirect_to' URI sent via $_POST.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                },
                {
                    "name": "param",
                    "content": "Comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-comments-post.php"
    },
    {
        "name": "comment_reply_link",
        "line": 1725,
        "end_line": 1725,
        "type": "filter",
        "doc": {
            "description": "Filters the comment reply link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The HTML markup for the comment reply link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "An array of arguments overriding the defaults.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The object of the comment being replied.",
                    "types": [
                        "object"
                    ],
                    "variable": "$comment"
                },
                {
                    "name": "param",
                    "content": "The WP_Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_reply_link_args",
        "line": 1673,
        "end_line": 1673,
        "type": "filter",
        "doc": {
            "description": "Filters the comment reply link arguments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "Comment reply link arguments. See get_comment_reply_link()                            for more information on accepted arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The object of the comment being replied to.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                },
                {
                    "name": "param",
                    "content": "The WP_Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_row_actions",
        "line": 742,
        "end_line": 742,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed for each comment in the 'Recent Comments' dashboard widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "An array of comment actions. Default actions include:                            'Approve', 'Unapprove', 'Edit', 'Reply', 'Spam',                            'Delete', and 'Trash'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "comment_save_pre",
        "line": 2349,
        "end_line": 2349,
        "type": "filter",
        "doc": {
            "description": "Filters the comment content before it is updated in the database.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The comment data.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_content"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "comment_status_links",
        "line": 324,
        "end_line": 324,
        "type": "filter",
        "doc": {
            "description": "Filters the comment status links.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "The 'Mine' link was added."
                },
                {
                    "name": "param",
                    "content": "An associative array of fully-formed comment status links. Includes 'All', 'Mine',                              'Pending', 'Approved', 'Spam', and 'Trash'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$status_links"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-comments-list-table.php"
    },
    {
        "name": "comment_text",
        "line": 1003,
        "end_line": 1003,
        "type": "filter",
        "doc": {
            "description": "Filters the text of a comment to be displayed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "Walker_Comment::comment()"
                },
                {
                    "name": "param",
                    "content": "Text of the current comment.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_text"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment",
                        "null"
                    ],
                    "variable": "$comment"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comment_text_rss",
        "line": 360,
        "end_line": 360,
        "type": "filter",
        "doc": {
            "description": "Filters the current comment content for use in a feed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The content of the current comment.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_text"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "comment_url",
        "line": 351,
        "end_line": 351,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's URL for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The comment author's URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author_url"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comments_array",
        "line": 1475,
        "end_line": 1475,
        "type": "filter",
        "doc": {
            "description": "Filters the comments array.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of comments supplied to the comments template.",
                    "types": [
                        "array"
                    ],
                    "variable": "$comments"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_ID"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comments_clauses",
        "line": 885,
        "end_line": 885,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the comment query clauses.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An associative array of comment query clauses.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$pieces"
                },
                {
                    "name": "param",
                    "content": "Current instance of WP_Comment_Query (passed by reference).",
                    "types": [
                        "\\WP_Comment_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-comment-query.php"
    },
    {
        "name": "comments_link_feed",
        "line": 264,
        "end_line": 264,
        "type": "filter",
        "doc": {
            "description": "Filters the comments permalink for the current post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The current comment permalink with                                  '#comments' appended.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_permalink"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "comments_list_table_query_args",
        "line": 145,
        "end_line": 145,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the comment query in the comments list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of get_comments() arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-comments-list-table.php"
    },
    {
        "name": "comments_number",
        "line": 943,
        "end_line": 943,
        "type": "filter",
        "doc": {
            "description": "Filters the comments count for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "_n()"
                },
                {
                    "name": "param",
                    "content": "A translatable string formatted based on whether the count                       is equal to 0, 1, or 1+.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "The number of post comments.",
                    "types": [
                        "int"
                    ],
                    "variable": "$number"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comments_open",
        "line": 1229,
        "end_line": 1229,
        "type": "filter",
        "doc": {
            "description": "Filters whether the current post is open for comments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether the current post is open for comments.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$open"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comments_per_page",
        "line": 192,
        "end_line": 192,
        "type": "filter",
        "doc": {
            "description": "Filters the number of comments listed per page in the comments list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "The number of comments to list per page.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comments_per_page"
                },
                {
                    "name": "param",
                    "content": "The comment status name. Default 'All'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_status"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-comments-list-table.php"
    },
    {
        "name": "comments_popup_link_attributes",
        "line": 1592,
        "end_line": 1592,
        "type": "filter",
        "doc": {
            "description": "Filters the comments link attributes for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The comments link attributes. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attributes"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comments_pre_query",
        "line": 401,
        "end_line": 401,
        "type": "filter_reference",
        "doc": {
            "description": "Filter the comments data before the query takes place.",
            "long_description": "<p>Return a non-null value to bypass WordPress's default comment queries.</p> <p>The expected return type from this filter depends on the value passed in the request query_vars. When <code>$this-&gt;query_vars['count']</code> is set, the filter should return the comment count as an int. When <code>'ids' == $this-&gt;query_vars['fields']</code>, the filter should return an array of comment ids. Otherwise the filter should return an array of WP_Comment objects.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "Return an array of comment data to short-circuit WP's comment query,                                       the comment count as an integer if <code>$this-&gt;query_vars['count']</code> is set,                                       or null to allow WP to run its normal queries.",
                    "types": [
                        "array",
                        "int",
                        "null"
                    ],
                    "variable": "$comment_data"
                },
                {
                    "name": "param",
                    "content": "The WP_Comment_Query instance, passed by reference.",
                    "types": [
                        "\\WP_Comment_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-comment-query.php"
    },
    {
        "name": "comments_rewrite_rules",
        "line": 1335,
        "end_line": 1335,
        "type": "filter",
        "doc": {
            "description": "Filters rewrite rules used for comment feed archives.",
            "long_description": "<p>Likely comments feed archives include /comments/feed/, and /comments/feed/atom/.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of rewrite rules for the site-wide comments feeds, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$comments_rewrite"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "comments_template",
        "line": 1506,
        "end_line": 1506,
        "type": "filter",
        "doc": {
            "description": "Filters the path to the theme template file used for the comments template.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.1"
                },
                {
                    "name": "param",
                    "content": "The path to the theme template file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$theme_template"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "comments_template_query_args",
        "line": 1442,
        "end_line": 1442,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments used to query comments in comments_template().",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Comment_Query::__construct()"
                },
                {
                    "name": "param",
                    "content": "{     Array of WP_Comment_Query arguments.     @type string|array $orderby                   Field(s) to order by.     @type string       $order                     Order of results. Accepts 'ASC' or 'DESC'.     @type string       $status                    Comment status.     @type array        $include_unapproved        Array of IDs or email addresses whose unapproved comments                                                   will be included in results.     @type int          $post_id                   ID of the post.     @type bool         $no_found_rows             Whether to refrain from querying for found rows.     @type bool         $update_comment_meta_cache Whether to prime cache for comment meta.     @type bool|string  $hierarchical              Whether to query for comments hierarchically.     @type int          $offset                    Comment offset.     @type int          $number                    Number of comments to fetch. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$comment_args"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "content_pagination",
        "line": 4308,
        "end_line": 4308,
        "type": "filter",
        "doc": {
            "description": "Filters the \"pages\" derived from splitting the post content.",
            "long_description": "<p>\"Pages\" are determined by splitting the post content based on the presence of <code>&lt;!-- nextpage --&gt;</code> tags.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Array of \"pages\" from the post content split by <code>&lt;!-- nextpage --&gt;</code> tags.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$pages"
                },
                {
                    "name": "param",
                    "content": "Current post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "content_url",
        "line": 3367,
        "end_line": 3367,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to the content directory.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The complete URL to the content directory including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the URL to the content directory. Blank string                     if no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "contextual_help",
        "line": 814,
        "end_line": 814,
        "type": "filter",
        "doc": {
            "description": "Filters the legacy contextual help text.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.3.0",
                    "description": "Use get_current_screen()-&gt;add_help_tab() or                   get_current_screen()-&gt;remove_help_tab() instead."
                },
                {
                    "name": "param",
                    "content": "Help text that appears on the screen.",
                    "types": [
                        "string"
                    ],
                    "variable": "$old_help"
                },
                {
                    "name": "param",
                    "content": "Screen ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$screen_id"
                },
                {
                    "name": "param",
                    "content": "Current WP_Screen instance.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-screen.php"
    },
    {
        "name": "contextual_help_list",
        "line": 799,
        "end_line": 799,
        "type": "filter",
        "doc": {
            "description": "Filters the legacy contextual help list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.3.0",
                    "description": "Use get_current_screen()-&gt;add_help_tab() or                   get_current_screen()-&gt;remove_help_tab() instead."
                },
                {
                    "name": "param",
                    "content": "Old contextual help.",
                    "types": [
                        "array"
                    ],
                    "variable": "$old_compat_help"
                },
                {
                    "name": "param",
                    "content": "Current WP_Screen instance.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-screen.php"
    },
    {
        "name": "core_version_check_locale",
        "line": 66,
        "end_line": 66,
        "type": "filter",
        "doc": {
            "description": "Filters the locale requested for WordPress core translations.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Current locale.",
                    "types": [
                        "string"
                    ],
                    "variable": "$locale"
                }
            ]
        },
        "file": "wp-includes/update.php"
    },
    {
        "name": "core_version_check_query_args",
        "line": 125,
        "end_line": 125,
        "type": "filter",
        "doc": {
            "description": "Filter the query arguments sent as part of the core version check.",
            "long_description": "<p>WARNING: Changing this data may result in your site not receiving security updates. Please exercise extreme caution.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "{     Version check query arguments.     @type string $version            WordPress version number.     @type string $php                PHP version number.     @type string $locale             The locale to retrieve updates for.     @type string $mysql              MySQL version number.     @type string $local_package      The value of the $wp_local_package global, when set.     @type int    $blogs              Number of sites on this WordPress installation.     @type int    $users              Number of users on this WordPress installation.     @type int    $multisite_enabled  Whether this WordPress installation uses Multisite.     @type int    $initial_db_version Database version of WordPress at time of installation. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$query"
                }
            ]
        },
        "file": "wp-includes/update.php"
    },
    {
        "name": "cron_request",
        "line": 712,
        "end_line": 725,
        "type": "filter",
        "doc": {
            "description": "Filters the cron request arguments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "The <code>$doing_wp_cron</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "{     An array of cron request URL arguments.     @type string $url  The cron request URL.     @type int    $key  The 22 digit GMT microtime.     @type array  $args {         An array of cron request arguments.         @type int  $timeout   The request timeout in seconds. Default .01 seconds.         @type bool $blocking  Whether to set blocking for the request. Default false.         @type bool $sslverify Whether SSL should be verified for the request. Default false.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$cron_request_array"
                },
                {
                    "name": "param",
                    "content": "The unix timestamp of the cron lock.",
                    "types": [
                        "string"
                    ],
                    "variable": "$doing_wp_cron"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "cron_schedules",
        "line": 834,
        "end_line": 834,
        "type": "filter",
        "doc": {
            "description": "Filters the non-default cron schedules.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of non-default cron schedules. Default empty.",
                    "types": [
                        "array"
                    ],
                    "variable": "$new_schedules"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "current_theme_supports-{$feature}",
        "line": 2877,
        "end_line": 2877,
        "type": "filter",
        "doc": {
            "description": "Filters whether the current theme supports a specific feature.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$feature</code>, refers to the specific theme feature. Possible values include 'post-formats', 'post-thumbnails', 'custom-background', 'custom-header', 'menus', 'automatic-feed-links', 'html5', 'starter-content', and 'customize-selective-refresh-widgets'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether the current theme supports the given feature. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$supports"
                },
                {
                    "name": "param",
                    "content": "Array of arguments for the feature.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The theme feature.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feature"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "custom_menu_order",
        "line": 259,
        "end_line": 259,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable custom ordering of the administration menu.",
            "long_description": "<p>See the {@see 'menu_order'} filter for reordering menu items.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether custom ordering is enabled. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$custom"
                }
            ]
        },
        "file": "wp-admin/includes/menu.php"
    },
    {
        "name": "customize_allowed_urls",
        "line": 4589,
        "end_line": 4589,
        "type": "filter",
        "doc": {
            "description": "Filters the list of URLs allowed to be clicked and followed in the Customizer preview.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of allowed URLs.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$allowed_urls"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_changeset_branching",
        "line": 796,
        "end_line": 796,
        "type": "filter",
        "doc": {
            "description": "Filters whether or not changeset branching is\u00a0allowed.",
            "long_description": "<p>By default in core, when changeset branching is not allowed, changesets will operate linearly in that only one saved changeset will exist at a time (with a 'draft' or 'future' status). This makes the Customizer operate in a way that is similar to going to \"edit\" to one existing post: all users will be making changes to the same post, and autosave revisions will be made for that post.</p> <p>By contrast, when changeset branching is allowed, then the model is like users going to \"add new\" for a page and each user makes changes independently of each other since they are all operating on their own separate pages, each getting their own separate initial auto-drafts and then once initially saved, autosave revisions on top of that user's specific post.</p> <p>Since linear changesets are deemed to be more suitable for the majority of WordPress users, they are the default. For WordPress sites that have heavy site management in the Customizer by multiple users then branching changesets should be enabled by means of this filter.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether branching is allowed. If <code>false</code>, the default,                                              then only one saved changeset exists at a time.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow_branching"
                },
                {
                    "name": "param",
                    "content": "Manager instance.",
                    "types": [
                        "\\WP_Customize_Manager"
                    ],
                    "variable": "$wp_customize"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_changeset_save_data",
        "line": 2875,
        "end_line": 2875,
        "type": "filter",
        "doc": {
            "description": "Filters the settings' data that will be persisted into the changeset.",
            "long_description": "<p>Plugins may amend additional data (such as additional meta for settings) into the changeset with this filter.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Updated changeset data, mapping setting IDs to arrays containing a $value item and optionally other metadata.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "{     Filter context.     @type string               $uuid          Changeset UUID.     @type string               $title         Requested title for the changeset post.     @type string               $status        Requested status for the changeset post.     @type string               $date_gmt      Requested date for the changeset post in MySQL format and GMT timezone.     @type int|false            $post_id       Post ID for the changeset, or false if it doesn't exist yet.     @type array                $previous_data Previous data contained in the changeset.     @type WP_Customize_Manager $manager       Manager instance. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_control_active",
        "line": 264,
        "end_line": 264,
        "type": "filter",
        "doc": {
            "description": "Filters response of WP_Customize_Control::active().",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether the Customizer control is active.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$active"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Control instance.",
                    "types": [
                        "\\WP_Customize_Control"
                    ],
                    "variable": "$control"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-control.php"
    },
    {
        "name": "customize_dynamic_partial_args",
        "line": 250,
        "end_line": 250,
        "type": "filter",
        "doc": {
            "description": "Filters a dynamic partial's constructor arguments.",
            "long_description": "<p>For a dynamic partial to be registered, this filter must be employed to override the default false value with an array of args to pass to the WP_Customize_Partial constructor.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "The arguments to the WP_Customize_Partial constructor.",
                    "types": [
                        "false",
                        "array"
                    ],
                    "variable": "$partial_args"
                },
                {
                    "name": "param",
                    "content": "ID for dynamic partial.",
                    "types": [
                        "string"
                    ],
                    "variable": "$partial_id"
                }
            ]
        },
        "file": "wp-includes/customize/class-wp-customize-selective-refresh.php"
    },
    {
        "name": "customize_dynamic_partial_class",
        "line": 266,
        "end_line": 266,
        "type": "filter",
        "doc": {
            "description": "Filters the class used to construct partials.",
            "long_description": "<p>Allow non-statically created partials to be constructed with custom WP_Customize_Partial subclass.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Partial or a subclass.",
                    "types": [
                        "string"
                    ],
                    "variable": "$partial_class"
                },
                {
                    "name": "param",
                    "content": "ID for dynamic partial.",
                    "types": [
                        "string"
                    ],
                    "variable": "$partial_id"
                },
                {
                    "name": "param",
                    "content": "The arguments to the WP_Customize_Partial constructor.",
                    "types": [
                        "array"
                    ],
                    "variable": "$partial_args"
                }
            ]
        },
        "file": "wp-includes/customize/class-wp-customize-selective-refresh.php"
    },
    {
        "name": "customize_dynamic_setting_args",
        "line": 3756,
        "end_line": 3756,
        "type": "filter",
        "doc": {
            "description": "Filters a dynamic setting's constructor args.",
            "long_description": "<p>For a dynamic setting to be registered, this filter must be employed to override the default false value with an array of args to pass to the WP_Customize_Setting constructor.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "The arguments to the WP_Customize_Setting constructor.",
                    "types": [
                        "false",
                        "array"
                    ],
                    "variable": "$setting_args"
                },
                {
                    "name": "param",
                    "content": "ID for dynamic setting, usually coming from <code>$_POST['customized']</code>.",
                    "types": [
                        "string"
                    ],
                    "variable": "$setting_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_dynamic_setting_class",
        "line": 3770,
        "end_line": 3770,
        "type": "filter",
        "doc": {
            "description": "Allow non-statically created settings to be constructed with custom WP_Customize_Setting subclass.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Setting or a subclass.",
                    "types": [
                        "string"
                    ],
                    "variable": "$setting_class"
                },
                {
                    "name": "param",
                    "content": "ID for dynamic setting, usually coming from <code>$_POST['customized']</code>.",
                    "types": [
                        "string"
                    ],
                    "variable": "$setting_id"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Setting or a subclass.",
                    "types": [
                        "array"
                    ],
                    "variable": "$setting_args"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_load_themes",
        "line": 5871,
        "end_line": 5871,
        "type": "filter",
        "doc": {
            "description": "Filters the theme data loaded in the customizer.",
            "long_description": "<p>This allows theme data to be loading from an external source, or modification of data loaded from <code>wp_prepare_themes_for_js()</code> or WordPress.org via <code>themes_api()</code>.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_prepare_themes_for_js()"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "themes_api()"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Customize_Manager::__construct()"
                },
                {
                    "name": "param",
                    "content": "Nested array of theme data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$themes"
                },
                {
                    "name": "param",
                    "content": "List of arguments, such as page, search term, and tags to query for.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Instance of Customize manager.",
                    "types": [
                        "\\WP_Customize_Manager"
                    ],
                    "variable": "$manager"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_loaded_components",
        "line": 352,
        "end_line": 352,
        "type": "filter",
        "doc": {
            "description": "Filters the core Customizer components to load.",
            "long_description": "<p>This allows Core components to be excluded from being instantiated by filtering them out of the array. Note that this filter generally runs during the {@see 'plugins_loaded'} action, so it cannot be added in a theme.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Customize_Manager::__construct()"
                },
                {
                    "name": "param",
                    "content": "Array of core components to load.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$components"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Manager instance.",
                    "types": [
                        "\\WP_Customize_Manager"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_nav_menu_available_item_types",
        "line": 861,
        "end_line": 861,
        "type": "filter",
        "doc": {
            "description": "Filters the available menu item types.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "Each array item now includes a <code>$type_label</code> in addition to <code>$title</code>, <code>$type</code>, and <code>$object</code>."
                },
                {
                    "name": "param",
                    "content": "Navigation menu item types.",
                    "types": [
                        "array"
                    ],
                    "variable": "$item_types"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-nav-menus.php"
    },
    {
        "name": "customize_nav_menu_available_items",
        "line": 254,
        "end_line": 254,
        "type": "filter",
        "doc": {
            "description": "Filters the available menu items.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "The array of menu items.",
                    "types": [
                        "array"
                    ],
                    "variable": "$items"
                },
                {
                    "name": "param",
                    "content": "The object type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "The object name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$object"
                },
                {
                    "name": "param",
                    "content": "The current page number.",
                    "types": [
                        "int"
                    ],
                    "variable": "$page"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-nav-menus.php"
    },
    {
        "name": "customize_nav_menu_searched_items",
        "line": 415,
        "end_line": 415,
        "type": "filter",
        "doc": {
            "description": "Filters the available menu items during a search request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "The array of menu items.",
                    "types": [
                        "array"
                    ],
                    "variable": "$items"
                },
                {
                    "name": "param",
                    "content": "Includes 'pagenum' and 's' (search) arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-nav-menus.php"
    },
    {
        "name": "customize_panel_active",
        "line": 182,
        "end_line": 182,
        "type": "filter",
        "doc": {
            "description": "Filters response of WP_Customize_Panel::active().",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the Customizer panel is active.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$active"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Panel instance.",
                    "types": [
                        "\\WP_Customize_Panel"
                    ],
                    "variable": "$panel"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-panel.php"
    },
    {
        "name": "customize_partial_render",
        "line": 227,
        "end_line": 227,
        "type": "filter",
        "doc": {
            "description": "Filters partial rendering.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "The partial value. Default false.",
                    "types": [
                        "string",
                        "array",
                        "false"
                    ],
                    "variable": "$rendered"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Setting instance.",
                    "types": [
                        "\\WP_Customize_Partial"
                    ],
                    "variable": "$partial"
                },
                {
                    "name": "param",
                    "content": "Optional array of context data associated with                                                the target container.",
                    "types": [
                        "array"
                    ],
                    "variable": "$container_context"
                }
            ]
        },
        "file": "wp-includes/customize/class-wp-customize-partial.php"
    },
    {
        "name": "customize_partial_render_{$partial->id}",
        "line": 241,
        "end_line": 241,
        "type": "filter",
        "doc": {
            "description": "Filters partial rendering for a specific partial.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$partial-&gt;ID</code> refers to the partial ID.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "The partial value. Default false.",
                    "types": [
                        "string",
                        "array",
                        "false"
                    ],
                    "variable": "$rendered"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Setting instance.",
                    "types": [
                        "\\WP_Customize_Partial"
                    ],
                    "variable": "$partial"
                },
                {
                    "name": "param",
                    "content": "Optional array of context data associated with                                                the target container.",
                    "types": [
                        "array"
                    ],
                    "variable": "$container_context"
                }
            ]
        },
        "file": "wp-includes/customize/class-wp-customize-partial.php"
    },
    {
        "name": "customize_previewable_devices",
        "line": 4954,
        "end_line": 4954,
        "type": "filter",
        "doc": {
            "description": "Filters the available devices to allow previewing in the Customizer.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Customize_Manager::get_previewable_devices()"
                },
                {
                    "name": "param",
                    "content": "List of devices with labels and default setting.",
                    "types": [
                        "array"
                    ],
                    "variable": "$devices"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_refresh_nonces",
        "line": 4704,
        "end_line": 4704,
        "type": "filter",
        "doc": {
            "description": "Filters nonces for Customizer.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "Array of refreshed nonces for save and                                     preview actions.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$nonces"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Manager instance.",
                    "types": [
                        "\\WP_Customize_Manager"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_render_partials_response",
        "line": 452,
        "end_line": 452,
        "type": "filter",
        "doc": {
            "description": "Filters the response from rendering the partials.",
            "long_description": "<p>Plugins may use this filter to inject <code>$scripts</code> and <code>$styles</code>, which are dependencies for the partials being rendered. The response data will be available to the client via the <code>render-partials-response</code> JS event, so the client can then inject the scripts and styles into the DOM if they have not already been enqueued there.</p> <p>If plugins do this, they'll need to take care for any scripts that do <code>document.write()</code> and make sure that these are not injected, or else to override the function to no-op, or else the page will be destroyed.</p> <p>Plugins should be aware that <code>$scripts</code> and <code>$styles</code> may eventually be included by default in the response.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "{     Response.     @type array $contents Associative array mapping a partial ID its corresponding array of contents                           for the containers requested.     @type array $errors   List of errors triggered during rendering of partials, if <code>WP_DEBUG_DISPLAY</code>                           is enabled. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "Selective refresh component.",
                    "types": [
                        "\\WP_Customize_Selective_Refresh"
                    ],
                    "variable": "$this"
                },
                {
                    "name": "param",
                    "content": "Placements' context data for the partials rendered in the request.                                                 The array is keyed by partial ID, with each item being an array of                                                 the placements' context data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$partials"
                }
            ]
        },
        "file": "wp-includes/customize/class-wp-customize-selective-refresh.php"
    },
    {
        "name": "customize_sanitize_js_{$this->id}",
        "line": 785,
        "end_line": 785,
        "type": "filter",
        "doc": {
            "description": "Filters a Customize setting value for use in JavaScript.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;id</code>, refers to the setting ID.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "The setting value.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Setting instance.",
                    "types": [
                        "\\WP_Customize_Setting"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-setting.php"
    },
    {
        "name": "customize_sanitize_{$this->id}",
        "line": 559,
        "end_line": 559,
        "type": "filter",
        "doc": {
            "description": "Filters a Customize setting value in un-slashed form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Value of the setting.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Setting instance.",
                    "types": [
                        "\\WP_Customize_Setting"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-setting.php"
    },
    {
        "name": "customize_save_response",
        "line": 2582,
        "end_line": 2582,
        "type": "filter",
        "doc": {
            "description": "Filters response data for a successful customize_save Ajax request.",
            "long_description": "<p>This filter does not apply if there was a nonce or authentication failure.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "Additional information passed back to the 'saved'                                       event on <code>wp.customize</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Manager instance.",
                    "types": [
                        "\\WP_Customize_Manager"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-manager.php"
    },
    {
        "name": "customize_section_active",
        "line": 193,
        "end_line": 193,
        "type": "filter",
        "doc": {
            "description": "Filters response of WP_Customize_Section::active().",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the Customizer section is active.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$active"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Section instance.",
                    "types": [
                        "\\WP_Customize_Section"
                    ],
                    "variable": "$section"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-section.php"
    },
    {
        "name": "customize_validate_{$this->id}",
        "line": 595,
        "end_line": 595,
        "type": "filter",
        "doc": {
            "description": "Validates a Customize setting value.",
            "long_description": "<p>Plugins should amend the <code>$validity</code> object via its <code>WP_Error::add()</code> method.</p> <p>The dynamic portion of the hook name, <code>$this-&gt;ID</code>, refers to the setting ID.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Filtered from <code>true</code> to <code>WP_Error</code> when invalid.",
                    "types": [
                        "\\WP_Error"
                    ],
                    "variable": "$validity"
                },
                {
                    "name": "param",
                    "content": "Value of the setting.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "WP_Customize_Setting instance.",
                    "types": [
                        "\\WP_Customize_Setting"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-setting.php"
    },
    {
        "name": "customize_value_{$id_base}",
        "line": 751,
        "end_line": 751,
        "type": "filter",
        "doc": {
            "description": "Filters a Customize setting value not handled as a theme_mod or option.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$id_base</code>, refers to the base slug of the setting name, initialized from <code>$this-&gt;id_data['base']</code>.</p> <p>For settings handled as theme_mods or options, see those corresponding functions for available hooks.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "Added the <code>$this</code> setting instance as the second parameter."
                },
                {
                    "name": "param",
                    "content": "The setting default value. Default empty.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$default"
                },
                {
                    "name": "param",
                    "content": "The setting instance.",
                    "types": [
                        "\\WP_Customize_Setting"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-setting.php"
    },
    {
        "name": "customizer_widgets_section_args",
        "line": 467,
        "end_line": 467,
        "type": "filter",
        "doc": {
            "description": "Filters Customizer widget section arguments for a given sidebar.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "Array of Customizer widget section arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$section_args"
                },
                {
                    "name": "param",
                    "content": "Customizer section ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$section_id"
                },
                {
                    "name": "param",
                    "content": "Sidebar ID.",
                    "types": [
                        "int",
                        "string"
                    ],
                    "variable": "$sidebar_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-widgets.php"
    },
    {
        "name": "dashboard_glance_items",
        "line": 320,
        "end_line": 320,
        "type": "filter",
        "doc": {
            "description": "Filters the array of extra elements to list in the 'At a Glance' dashboard widget.",
            "long_description": "<p>Prior to 3.8.0, the widget was named 'Right Now'. Each element is wrapped in list-item tags on output.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of extra 'At a Glance' widget items.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$items"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "dashboard_primary_feed",
        "line": 1412,
        "end_line": 1412,
        "type": "filter",
        "doc": {
            "description": "Filters the primary feed URL for the 'WordPress Events and News' dashboard widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The widget's primary feed URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "dashboard_primary_link",
        "line": 1403,
        "end_line": 1403,
        "type": "filter",
        "doc": {
            "description": "Filters the primary link URL for the 'WordPress Events and News' dashboard widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The widget's primary link URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "dashboard_primary_title",
        "line": 1421,
        "end_line": 1421,
        "type": "filter",
        "doc": {
            "description": "Filters the primary link title for the 'WordPress Events and News' dashboard widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Title attribute for the widget's primary link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "dashboard_recent_drafts_query_args",
        "line": 576,
        "end_line": 576,
        "type": "filter",
        "doc": {
            "description": "Filters the post query arguments for the 'Recent Drafts' dashboard widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The query arguments for the 'Recent Drafts' dashboard widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_args"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "dashboard_recent_posts_query_args",
        "line": 915,
        "end_line": 915,
        "type": "filter",
        "doc": {
            "description": "Filters the query arguments used for the Recent Posts widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "The arguments passed to WP_Query to produce the list of posts.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_args"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "dashboard_secondary_feed",
        "line": 1445,
        "end_line": 1445,
        "type": "filter",
        "doc": {
            "description": "Filters the secondary feed URL for the 'WordPress Events and News' dashboard widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The widget's secondary feed URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "dashboard_secondary_items",
        "line": 1463,
        "end_line": 1463,
        "type": "filter",
        "doc": {
            "description": "Filters the number of secondary link items for the 'WordPress Events and News' dashboard widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "How many items to show in the secondary feed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$items"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "dashboard_secondary_link",
        "line": 1436,
        "end_line": 1436,
        "type": "filter",
        "doc": {
            "description": "Filters the secondary link URL for the 'WordPress Events and News' dashboard widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The widget's secondary link URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "dashboard_secondary_title",
        "line": 1454,
        "end_line": 1454,
        "type": "filter",
        "doc": {
            "description": "Filters the secondary link title for the 'WordPress Events and News' dashboard widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Title attribute for the widget's secondary link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "date_formats",
        "line": 332,
        "end_line": 332,
        "type": "filter",
        "doc": {
            "description": "Filters the default date formats.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "since",
                    "content": "4.0.0",
                    "description": "Added ISO date standard YYYY-MM-DD format."
                },
                {
                    "name": "param",
                    "content": "Array of default date formats.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$default_date_formats"
                }
            ]
        },
        "file": "wp-admin/options-general.php"
    },
    {
        "name": "date_i18n",
        "line": 206,
        "end_line": 206,
        "type": "filter",
        "doc": {
            "description": "Filters the date formatted based on the locale.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Formatted date string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$date"
                },
                {
                    "name": "param",
                    "content": "Format to display the date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$format"
                },
                {
                    "name": "param",
                    "content": "A sum of Unix timestamp and timezone offset in seconds.                          Might be without offset if input omitted timestamp but requested GMT.",
                    "types": [
                        "int"
                    ],
                    "variable": "$timestamp"
                },
                {
                    "name": "param",
                    "content": "Whether to use GMT timezone. Only applies if timestamp was not provided.                          Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$gmt"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "date_query_valid_columns",
        "line": 503,
        "end_line": 503,
        "type": "filter",
        "doc": {
            "description": "Filters the list of valid date query columns.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "Added 'user_registered' to the default recognized columns."
                },
                {
                    "name": "param",
                    "content": "An array of valid date query columns. Defaults                                are 'post_date', 'post_date_gmt', 'post_modified',                                'post_modified_gmt', 'comment_date', 'comment_date_gmt',                                'user_registered'",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$valid_columns"
                }
            ]
        },
        "file": "wp-includes/class-wp-date-query.php"
    },
    {
        "name": "date_rewrite_rules",
        "line": 1306,
        "end_line": 1306,
        "type": "filter",
        "doc": {
            "description": "Filters rewrite rules used for date archives.",
            "long_description": "<p>Likely date archives would include /yyyy/, /yyyy/mm/, and /yyyy/mm/dd/.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of rewrite rules for date archives, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$date_rewrite"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "day_link",
        "line": 578,
        "end_line": 578,
        "type": "filter",
        "doc": {
            "description": "Filters the day archive permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Permalink for the day archive.",
                    "types": [
                        "string"
                    ],
                    "variable": "$daylink"
                },
                {
                    "name": "param",
                    "content": "Year for the archive.",
                    "types": [
                        "int"
                    ],
                    "variable": "$year"
                },
                {
                    "name": "param",
                    "content": "Month for the archive.",
                    "types": [
                        "int"
                    ],
                    "variable": "$month"
                },
                {
                    "name": "param",
                    "content": "The day for the archive.",
                    "types": [
                        "int"
                    ],
                    "variable": "$day"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "dbdelta_create_queries",
        "line": 2598,
        "end_line": 2598,
        "type": "filter",
        "doc": {
            "description": "Filters the dbDelta SQL queries for creating tables and/or databases.",
            "long_description": "<p>Queries filterable via this hook contain \"CREATE TABLE\" or \"CREATE DATABASE\".</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of dbDelta create SQL queries.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$cqueries"
                }
            ]
        },
        "file": "wp-admin/includes/upgrade.php"
    },
    {
        "name": "dbdelta_insert_queries",
        "line": 2609,
        "end_line": 2609,
        "type": "filter",
        "doc": {
            "description": "Filters the dbDelta SQL queries for inserting or updating.",
            "long_description": "<p>Queries filterable via this hook contain \"INSERT INTO\" or \"UPDATE\".</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of dbDelta insert or update SQL queries.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$iqueries"
                }
            ]
        },
        "file": "wp-admin/includes/upgrade.php"
    },
    {
        "name": "dbdelta_queries",
        "line": 2567,
        "end_line": 2567,
        "type": "filter",
        "doc": {
            "description": "Filters the dbDelta SQL queries.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of dbDelta SQL queries.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$queries"
                }
            ]
        },
        "file": "wp-admin/includes/upgrade.php"
    },
    {
        "name": "debug_information",
        "line": 1122,
        "end_line": 1122,
        "type": "filter",
        "doc": {
            "description": "Add or modify the debug information.",
            "long_description": "<p>Plugin or themes may wish to introduce their own debug information without creating additional admin pages they can utilize this filter to introduce their own sections or add more data to existing sections.</p> <p>Array keys for sections added by core are all prefixed with <code>wp-</code>, plugins and themes should use their own slug as a prefix, both for consistency as well as avoiding key collisions. Note that the array keys are used as labels for the copied data.</p> <p>All strings are expected to be plain text except $description that can contain inline HTML tags (see below).</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "{     The debug information to be added to the core information page.     This is an associative multi-dimensional array, up to three levels deep. The topmost array holds the sections.     Each section has a <code>$fields</code> associative array (see below), and each <code>$value</code> in <code>$fields</code> can be     another associative array of name/value pairs when there is more structured data to display.     @type string  $label        The title for this section of the debug output.     @type string  $description  Optional. A description for your information section which may contain basic HTML                                 markup, inline tags only as it is outputted in a paragraph.     @type boolean $show_count   Optional. If set to <code>true</code> the amount of fields will be included in the title for                                 this section.     @type boolean $private      Optional. If set to <code>true</code> the section and all associated fields will be excluded                                 from the copied data.     @type array   $fields {         An associative array containing the data to be displayed.         @type string  $label    The label for this piece of information.         @type string  $value    The output that is displayed for this field. Text should be translated. Can be                                 an associative array that is displayed as name/value pairs.         @type string  $debug    Optional. The output that is used for this field when the user copies the data.                                 It should be more concise and not translated. If not set, the content of <code>$value</code> is used.                                 Note that the array keys are used as labels for the copied data.         @type boolean $private  Optional. If set to <code>true</code> the field will not be included in the copied data                                 allowing you to show, for example, API keys here.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-debug-data.php"
    },
    {
        "name": "default_avatar_select",
        "line": 317,
        "end_line": 317,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output of the default avatar list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "HTML markup of the avatar list.",
                    "types": [
                        "string"
                    ],
                    "variable": "$avatar_list"
                }
            ]
        },
        "file": "wp-admin/options-discussion.php"
    },
    {
        "name": "default_content",
        "line": 713,
        "end_line": 713,
        "type": "filter",
        "doc": {
            "description": "Filters the default post content initially used in the \"Write Post\" form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Default post content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_content"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "default_contextual_help",
        "line": 828,
        "end_line": 828,
        "type": "filter",
        "doc": {
            "description": "Filters the default legacy contextual help text.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.3.0",
                    "description": "Use get_current_screen()-&gt;add_help_tab() or                   get_current_screen()-&gt;remove_help_tab() instead."
                },
                {
                    "name": "param",
                    "content": "Default contextual help text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$old_help_default"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-screen.php"
    },
    {
        "name": "default_excerpt",
        "line": 733,
        "end_line": 733,
        "type": "filter",
        "doc": {
            "description": "Filters the default post excerpt initially used in the \"Write Post\" form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Default post excerpt.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_excerpt"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "default_feed",
        "line": 87,
        "end_line": 87,
        "type": "filter",
        "doc": {
            "description": "Filters the default feed type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Type of default feed. Possible values include 'rss2', 'atom'.                          Default 'rss2'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed_type"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "default_hidden_columns",
        "line": 73,
        "end_line": 73,
        "type": "filter",
        "doc": {
            "description": "Filters the default list of hidden columns.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of columns hidden by default.",
                    "types": [
                        "array"
                    ],
                    "variable": "$hidden"
                },
                {
                    "name": "param",
                    "content": "WP_Screen object of the current screen.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$screen"
                }
            ]
        },
        "file": "wp-admin/includes/screen.php"
    },
    {
        "name": "default_hidden_meta_boxes",
        "line": 178,
        "end_line": 178,
        "type": "filter",
        "doc": {
            "description": "Filters the default list of hidden meta boxes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of meta boxes hidden by default.",
                    "types": [
                        "array"
                    ],
                    "variable": "$hidden"
                },
                {
                    "name": "param",
                    "content": "WP_Screen object of the current screen.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$screen"
                }
            ]
        },
        "file": "wp-admin/includes/screen.php"
    },
    {
        "name": "default_option_{$option}",
        "line": 89,
        "end_line": 89,
        "type": "filter",
        "doc": {
            "description": "Filters the default value for an option.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$option</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "The <code>$passed_default</code> parameter was added to distinguish between a <code>false</code> value and the default parameter value."
                },
                {
                    "name": "param",
                    "content": "The default value to return if the option does not exist                        in the database.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$default"
                },
                {
                    "name": "param",
                    "content": "Option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "Was <code>get_option()</code> passed a default value?",
                    "types": [
                        "bool"
                    ],
                    "variable": "$passed_default"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "default_page_template_title",
        "line": 975,
        "end_line": 975,
        "type": "filter",
        "doc": {
            "description": "Filters the title of the default page template displayed in the drop-down.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "The display value for the default page template title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$label"
                },
                {
                    "name": "param",
                    "content": "Where the option label is displayed. Possible values                        include 'meta-box' or 'quick-edit'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/meta-boxes.php"
    },
    {
        "name": "default_site_option_{$option}",
        "line": 1280,
        "end_line": 1280,
        "type": "filter",
        "doc": {
            "description": "Filters a specific default network option.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$option</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "The <code>$network_id</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The value to return if the site option does not exist                           in the database.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$default"
                },
                {
                    "name": "param",
                    "content": "Option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "ID of the network.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "default_title",
        "line": 723,
        "end_line": 723,
        "type": "filter",
        "doc": {
            "description": "Filters the default post title initially used in the \"Write Post\" form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Default post title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_title"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "delete_site_email_content",
        "line": 81,
        "end_line": 81,
        "type": "filter",
        "doc": {
            "description": "Filters the email content sent when a site in a Multisite network is deleted.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The email content that will be sent to the user who deleted a site in a Multisite network.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-admin/ms-delete-site.php"
    },
    {
        "name": "delete_{$meta_type}_metadata",
        "line": 370,
        "end_line": 370,
        "type": "filter",
        "doc": {
            "description": "Filters whether to delete metadata of a specific type.",
            "long_description": "<p>The dynamic portion of the hook, <code>$meta_type</code>, refers to the meta object type (comment, post, term, or user). Returning a non-null value will effectively short-circuit the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow metadata deletion of the given type.",
                    "types": [
                        "null",
                        "bool"
                    ],
                    "variable": "$delete"
                },
                {
                    "name": "param",
                    "content": "Object ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$object_id"
                },
                {
                    "name": "param",
                    "content": "Meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Meta value. Must be serializable if non-scalar.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$meta_value"
                },
                {
                    "name": "param",
                    "content": "Whether to delete the matching metadata entries                              for all objects, ignoring the specified $object_id.                              Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$delete_all"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "delete_{$meta_type}_metadata_by_mid",
        "line": 813,
        "end_line": 813,
        "type": "filter",
        "doc": {
            "description": "Filters whether to delete metadata of a specific type by meta ID.",
            "long_description": "<p>The dynamic portion of the hook, <code>$meta_type</code>, refers to the meta object type (comment, post, term, or user). Returning a non-null value will effectively short-circuit the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow metadata deletion of the given type.",
                    "types": [
                        "null",
                        "bool"
                    ],
                    "variable": "$delete"
                },
                {
                    "name": "param",
                    "content": "Meta ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$meta_id"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "deprecated_argument_trigger_error",
        "line": 4792,
        "end_line": 4792,
        "type": "filter",
        "doc": {
            "description": "Filters whether to trigger an error for deprecated arguments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to trigger the error for deprecated arguments. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$trigger"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "deprecated_constructor_trigger_error",
        "line": 4637,
        "end_line": 4637,
        "type": "filter",
        "doc": {
            "description": "Filters whether to trigger an error for deprecated functions.",
            "long_description": "<p><code>WP_DEBUG</code> must be true in addition to the filter evaluating to true.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Whether to trigger the error for deprecated functions. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$trigger"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "deprecated_file_trigger_error",
        "line": 4728,
        "end_line": 4728,
        "type": "filter",
        "doc": {
            "description": "Filters whether to trigger an error for deprecated files.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether to trigger the error for deprecated files. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$trigger"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "deprecated_function_trigger_error",
        "line": 4576,
        "end_line": 4576,
        "type": "filter",
        "doc": {
            "description": "Filters whether to trigger an error for deprecated functions.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether to trigger the error for deprecated functions. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$trigger"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "deprecated_hook_trigger_error",
        "line": 4851,
        "end_line": 4851,
        "type": "filter",
        "doc": {
            "description": "Filters whether to trigger deprecated hook errors.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to trigger deprecated hook errors. Requires                      <code>WP_DEBUG</code> to be defined true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$trigger"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "determine_current_user",
        "line": 2758,
        "end_line": 2758,
        "type": "filter",
        "doc": {
            "description": "Filters the current user.",
            "long_description": "<p>The default filters use this to determine the current user from the request's cookies, if available.</p> <p>Returning a value of false will effectively short-circuit setting the current user.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "User ID if one has been determined, false otherwise.",
                    "types": [
                        "int",
                        "bool"
                    ],
                    "variable": "$user_id"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "determine_locale",
        "line": 157,
        "end_line": 157,
        "type": "filter",
        "doc": {
            "description": "Filters the locale for the current request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "The locale.",
                    "types": [
                        "string"
                    ],
                    "variable": "$locale"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "disable_captions",
        "line": 214,
        "end_line": 214,
        "type": "filter",
        "doc": {
            "description": "Filters whether to disable captions.",
            "long_description": "<p>Prevents image captions from being appended to image HTML when inserted into the editor.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to disable appending captions. Returning true to the filter                   will disable captions. Default empty string.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$bool"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "disable_categories_dropdown",
        "line": 447,
        "end_line": 447,
        "type": "filter",
        "doc": {
            "description": "Filters whether to remove the 'Categories' drop-down from the post list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to disable the categories drop-down. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$disable"
                },
                {
                    "name": "param",
                    "content": "Post type slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "disable_formats_dropdown",
        "line": 482,
        "end_line": 482,
        "type": "filter",
        "doc": {
            "description": "Filters whether to remove the 'Formats' drop-down from the post list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether to disable the drop-down. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$disable"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "disable_months_dropdown",
        "line": 554,
        "end_line": 554,
        "type": "filter",
        "doc": {
            "description": "Filters whether to remove the 'Months' drop-down from the post list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether to disable the drop-down. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$disable"
                },
                {
                    "name": "param",
                    "content": "The post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-list-table.php"
    },
    {
        "name": "display_media_states",
        "line": 2238,
        "end_line": 2238,
        "type": "filter",
        "doc": {
            "description": "Filters the default media display states for items in the Media list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "since",
                    "content": "4.8.0",
                    "description": "Added the <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of media states. Default 'Header Image',                               'Background Image', 'Site Icon', 'Logo'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$media_states"
                },
                {
                    "name": "param",
                    "content": "The current attachment object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/template.php"
    },
    {
        "name": "display_post_states",
        "line": 2168,
        "end_line": 2168,
        "type": "filter",
        "doc": {
            "description": "Filters the default post display states used in the posts list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "3.6.0",
                    "description": "Added the <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of post display states.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_states"
                },
                {
                    "name": "param",
                    "content": "The current post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/template.php"
    },
    {
        "name": "display_site_states",
        "line": 636,
        "end_line": 636,
        "type": "filter",
        "doc": {
            "description": "Filter the default site display states for items in the Sites list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of site states. Default 'Main',                           'Archived', 'Mature', 'Spam', 'Deleted'.",
                    "types": [
                        "array"
                    ],
                    "variable": "$site_states"
                },
                {
                    "name": "param",
                    "content": "The current site object.",
                    "types": [
                        "\\WP_Site"
                    ],
                    "variable": "$site"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-sites-list-table.php"
    },
    {
        "name": "do_mu_upgrade",
        "line": 68,
        "end_line": 68,
        "type": "filter",
        "doc": {
            "description": "Filters whether to attempt to perform the multisite DB upgrade routine.",
            "long_description": "<p>In single site, the user would be redirected to wp-admin/upgrade.php. In multisite, the DB upgrade routine is automatically fired, but only when this filter returns true.</p> <p>If the network is 50 sites or less, it will run every time. Otherwise, it will throttle itself to reduce load.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Whether to perform the Multisite upgrade routine. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$do_mu_upgrade"
                }
            ]
        },
        "file": "wp-admin/admin.php"
    },
    {
        "name": "do_parse_request",
        "line": 145,
        "end_line": 145,
        "type": "filter",
        "doc": {
            "description": "Filters whether to parse the request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether or not to parse the request. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$bool"
                },
                {
                    "name": "param",
                    "content": "Current WordPress environment instance.",
                    "types": [
                        "\\WP"
                    ],
                    "variable": "$this"
                },
                {
                    "name": "param",
                    "content": "Extra passed query variables.",
                    "types": [
                        "array",
                        "string"
                    ],
                    "variable": "$extra_query_vars"
                }
            ]
        },
        "file": "wp-includes/class-wp.php"
    },
    {
        "name": "do_shortcode_tag",
        "line": 337,
        "end_line": 337,
        "type": "filter",
        "doc": {
            "description": "Filters the output created by a shortcode callback.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Shortcode output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Shortcode name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$tag"
                },
                {
                    "name": "param",
                    "content": "Shortcode attributes array or empty string.",
                    "types": [
                        "array",
                        "string"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "Regular expression match array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$m"
                }
            ]
        },
        "file": "wp-includes/shortcodes.php"
    },
    {
        "name": "document_title_parts",
        "line": 1135,
        "end_line": 1135,
        "type": "filter",
        "doc": {
            "description": "Filters the parts of the document title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "{     The document title parts.     @type string $title   Title of the viewed page.     @type string $page    Optional. Page number if paginated.     @type string $tagline Optional. Site description when on home page.     @type string $site    Optional. Site title when not on home page. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "document_title_separator",
        "line": 1119,
        "end_line": 1119,
        "type": "filter",
        "doc": {
            "description": "Filters the separator for the document title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Document title separator. Default '-'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sep"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "documentation_ignore_functions",
        "line": 613,
        "end_line": 613,
        "type": "filter",
        "doc": {
            "description": "Filters the list of functions and classes to be ignored from the documentation lookup.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of names of functions and classes to be ignored.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$ignore_functions"
                }
            ]
        },
        "file": "wp-admin/includes/misc.php"
    },
    {
        "name": "doing_it_wrong_trigger_error",
        "line": 4903,
        "end_line": 4903,
        "type": "filter",
        "doc": {
            "description": "Filters whether to trigger an error for _doing_it_wrong() calls.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "Added the $function, $message and $version parameters."
                },
                {
                    "name": "param",
                    "content": "Whether to trigger the error for _doing_it_wrong() calls. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$trigger"
                },
                {
                    "name": "param",
                    "content": "The function that was called.",
                    "types": [
                        "string"
                    ],
                    "variable": "$function"
                },
                {
                    "name": "param",
                    "content": "A message explaining what has been done incorrectly.",
                    "types": [
                        "string"
                    ],
                    "variable": "$message"
                },
                {
                    "name": "param",
                    "content": "The version of WordPress where the message was added.",
                    "types": [
                        "string"
                    ],
                    "variable": "$version"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "domain_exists",
        "line": 1513,
        "end_line": 1513,
        "type": "filter",
        "doc": {
            "description": "Filters whether a site name is taken.",
            "long_description": "<p>The name is the site's subdomain or the site's subdirectory path depending on the network settings.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "The site ID if the site name exists, null otherwise.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Domain to be checked.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "Path to be checked.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Network ID. Relevant only on multi-network installations.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "download_url_error_max_body_size",
        "line": 1043,
        "end_line": 1043,
        "type": "filter",
        "doc": {
            "description": "Filters the maximum error response body size in `download_url()`.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "download_url()"
                },
                {
                    "name": "param",
                    "content": "The maximum error response body size. Default 1 KB.",
                    "types": [
                        "int"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "duplicate_comment_id",
        "line": 691,
        "end_line": 691,
        "type": "filter",
        "doc": {
            "description": "Filters the ID, if any, of the duplicate comment found when creating a new comment.",
            "long_description": "<p>Return an empty value from this filter to allow what WP considers a duplicate comment.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "ID of the comment identified as a duplicate.",
                    "types": [
                        "int"
                    ],
                    "variable": "$dupe_id"
                },
                {
                    "name": "param",
                    "content": "Data for the comment being created.",
                    "types": [
                        "array"
                    ],
                    "variable": "$commentdata"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "dynamic_sidebar_has_widgets",
        "line": 836,
        "end_line": 836,
        "type": "filter",
        "doc": {
            "description": "Filters whether a sidebar has widgets.",
            "long_description": "<p>Note: The filter is also evaluated for empty sidebars, and on both the front end and back end, including the Inactive Widgets sidebar on the Widgets screen.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether at least one widget was rendered in the sidebar.                            Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$did_one"
                },
                {
                    "name": "param",
                    "content": "Index, name, or ID of the dynamic sidebar.",
                    "types": [
                        "int",
                        "string"
                    ],
                    "variable": "$index"
                }
            ]
        },
        "file": "wp-includes/widgets.php"
    },
    {
        "name": "dynamic_sidebar_params",
        "line": 773,
        "end_line": 773,
        "type": "filter",
        "doc": {
            "description": "Filters the parameters passed to a widget's display callback.",
            "long_description": "<p>Note: The filter is evaluated on both the front end and back end, including for the Inactive Widgets sidebar on the Widgets screen.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "register_sidebar()"
                },
                {
                    "name": "param",
                    "content": "{     @type array $args  {         An array of widget display arguments.         @type string $name          Name of the sidebar the widget is assigned to.         @type string $id            ID of the sidebar the widget is assigned to.         @type string $description   The sidebar description.         @type string $class         CSS class applied to the sidebar container.         @type string $before_widget HTML markup to prepend to each widget in the sidebar.         @type string $after_widget  HTML markup to append to each widget in the sidebar.         @type string $before_title  HTML markup to prepend to the widget title when displayed.         @type string $after_title   HTML markup to append to the widget title when displayed.         @type string $widget_id     ID of the widget.         @type string $widget_name   Name of the widget.     }     @type array $widget_args {         An array of multi-widget arguments.         @type int $number Number increment used for multiples of the same widget.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$params"
                }
            ]
        },
        "file": "wp-includes/widgets.php"
    },
    {
        "name": "edit_bookmark_link",
        "line": 1606,
        "end_line": 1606,
        "type": "filter",
        "doc": {
            "description": "Filters the bookmark edit link anchor tag.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Anchor tag for the edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Bookmark ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$link_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "edit_categories_per_page",
        "line": 109,
        "end_line": 109,
        "type": "filter",
        "doc": {
            "description": "Filters the number of terms displayed per page for the Categories list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Number of categories to be displayed. Default 20.",
                    "types": [
                        "int"
                    ],
                    "variable": "$tags_per_page"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-terms-list-table.php"
    },
    {
        "name": "edit_comment_link",
        "line": 1544,
        "end_line": 1544,
        "type": "filter",
        "doc": {
            "description": "Filters the comment edit link anchor tag.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Anchor tag for the edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_id"
                },
                {
                    "name": "param",
                    "content": "Anchor text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "edit_comment_misc_actions",
        "line": 178,
        "end_line": 178,
        "type": "filter",
        "doc": {
            "description": "Filters miscellaneous actions for the edit comment form sidebar.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Output HTML to display miscellaneous action.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "Current comment object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-admin/edit-form-comment.php"
    },
    {
        "name": "edit_post_link",
        "line": 1436,
        "end_line": 1436,
        "type": "filter",
        "doc": {
            "description": "Filters the post edit link anchor tag.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Anchor tag for the edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Anchor text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "edit_post_{$field}",
        "line": 2405,
        "end_line": 2405,
        "type": "filter",
        "doc": {
            "description": "",
            "long_description": "",
            "tags": []
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "edit_posts_per_page",
        "line": 1170,
        "end_line": 1170,
        "type": "filter",
        "doc": {
            "description": "Filters the number of posts displayed per page when specifically listing \"posts\".",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Number of posts to be displayed. Default 20.",
                    "types": [
                        "int"
                    ],
                    "variable": "$posts_per_page"
                },
                {
                    "name": "param",
                    "content": "The post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "edit_profile_url",
        "line": 3745,
        "end_line": 3745,
        "type": "filter",
        "doc": {
            "description": "Filters the URL for a user's profile editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The complete URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The user ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Scheme to give the URL context. Accepts 'http', 'https', 'login',                        'login_post', 'admin', 'relative' or null.",
                    "types": [
                        "string"
                    ],
                    "variable": "$scheme"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "edit_tag_link",
        "line": 977,
        "end_line": 977,
        "type": "filter",
        "doc": {
            "description": "Filters the anchor tag for the edit link for a tag (or term in another taxonomy).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The anchor tag for the edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "edit_tags_per_page",
        "line": 90,
        "end_line": 90,
        "type": "filter",
        "doc": {
            "description": "Filters the number of terms displayed per page for the Tags list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Number of tags to be displayed. Default 20.",
                    "types": [
                        "int"
                    ],
                    "variable": "$tags_per_page"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-terms-list-table.php"
    },
    {
        "name": "edit_term_link",
        "line": 1075,
        "end_line": 1075,
        "type": "filter",
        "doc": {
            "description": "Filters the anchor tag for the edit link of a term.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The anchor tag for the edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "edit_term_{$field}",
        "line": 1552,
        "end_line": 1552,
        "type": "filter",
        "doc": {
            "description": "Filters a term field to edit before it is sanitized.",
            "long_description": "<p>The dynamic portion of the filter name, <code>$field</code>, refers to the term field.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the term field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                },
                {
                    "name": "param",
                    "content": "Taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "edit_user_{$field}",
        "line": 1267,
        "end_line": 1267,
        "type": "filter",
        "doc": {
            "description": "Filters a user field value in the 'edit' context.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field</code>, refers to the prefixed user field being filtered, such as 'user_login', 'user_email', 'first_name', etc.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Value of the prefixed user field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "edit_{$field}",
        "line": 2390,
        "end_line": 2390,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a specific post field to edit.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field</code>, refers to the post field name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the post field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "edit_{$post_type}_per_page",
        "line": 1160,
        "end_line": 1160,
        "type": "filter",
        "doc": {
            "description": "Filters the number of items per page to show for a specific 'per_page' type.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$post_type</code>, refers to the post type.</p> <p>Some examples of filter hooks generated here include: 'edit_attachment_per_page', 'edit_post_per_page', 'edit_page_per_page', etc.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Number of posts to display per page for the given post                            type. Default 20.",
                    "types": [
                        "int"
                    ],
                    "variable": "$posts_per_page"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "edit_{$taxonomy}_{$field}",
        "line": 1565,
        "end_line": 1565,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy field to edit before it is sanitized.",
            "long_description": "<p>The dynamic portions of the filter name, <code>$taxonomy</code> and <code>$field</code>, refer to the taxonomy slug and taxonomy field, respectively.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the taxonomy field to edit.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "editable_extensions",
        "line": 230,
        "end_line": 230,
        "type": "filter",
        "doc": {
            "description": "Filters file type extensions editable in the plugin editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$plugin</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of editable plugin file extensions.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$editable_extensions"
                },
                {
                    "name": "param",
                    "content": "Path to the plugin file relative to the plugins directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plugin"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "editable_roles",
        "line": 273,
        "end_line": 273,
        "type": "filter",
        "doc": {
            "description": "Filters the list of editable roles.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of arrays containing role information.",
                    "types": [
                        "array[]"
                    ],
                    "variable": "$all_roles"
                }
            ]
        },
        "file": "wp-admin/includes/user.php"
    },
    {
        "name": "editable_slug",
        "line": 153,
        "end_line": 153,
        "type": "filter",
        "doc": {
            "description": "Filters the editable slug.",
            "long_description": "<p>Note: This is a multi-use hook in that it is leveraged both for editable post URIs and term slugs.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$tag</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The editable slug. Will be either a term slug or post URI depending                              upon the context in which it is evaluated.",
                    "types": [
                        "string"
                    ],
                    "variable": "$slug"
                },
                {
                    "name": "param",
                    "content": "Term or WP_Post object.",
                    "types": [
                        "\\WP_Term",
                        "\\WP_Post"
                    ],
                    "variable": "$tag"
                }
            ]
        },
        "file": "wp-admin/edit-tag-form.php"
    },
    {
        "name": "editor_max_image_size",
        "line": 133,
        "end_line": 133,
        "type": "filter",
        "doc": {
            "description": "Filters the maximum image size dimensions for the editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "{     An array of width and height values.     @type int $0 The maximum width in pixels.     @type int $1 The maximum height in pixels. }",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$max_image_size"
                },
                {
                    "name": "param",
                    "content": "Size of what the result image should be.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "The context the image is being resized for.                                     Possible values are 'display' (like in a theme)                                     or 'edit' (like inserting into an editor).",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "editor_stylesheets",
        "line": 2028,
        "end_line": 2028,
        "type": "filter",
        "doc": {
            "description": "Filters the array of stylesheets applied to the editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Array of stylesheets to be applied to the editor.",
                    "types": [
                        "array"
                    ],
                    "variable": "$stylesheets"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "email_change_email",
        "line": 2100,
        "end_line": 2100,
        "type": "filter",
        "doc": {
            "description": "Filters the contents of the email sent when the user's email is changed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "{            Used to build wp_mail().            @type string $to      The intended recipients.            @type string $subject The subject of the email.            @type string $message The content of the email.                The following strings have a special meaning and will get replaced dynamically:                - ###USERNAME###    The current user's username.                - ###ADMIN_EMAIL### The admin email in case this was unexpected.                - ###NEW_EMAIL###   The new email address.                - ###EMAIL###       The old email address.                - ###SITENAME###    The name of the site.                - ###SITEURL###     The URL to the site.            @type string $headers Headers.        }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_change_email"
                },
                {
                    "name": "param",
                    "content": "The original user array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "The updated user array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$userdata"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "embed_cache_oembed_types",
        "line": 380,
        "end_line": 380,
        "type": "filter",
        "doc": {
            "description": "Filters the array of post types to cache oEmbed results for.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Array of post type names to cache oEmbed results for. Defaults to post types with <code>show_ui</code> set to true.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_types"
                }
            ]
        },
        "file": "wp-includes/class-wp-embed.php"
    },
    {
        "name": "embed_defaults",
        "line": 83,
        "end_line": 83,
        "type": "filter",
        "doc": {
            "description": "Filters the default array of embed dimensions.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "An array of embed width and height values                     in pixels (in that order).",
                    "types": [
                        "array"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "The URL that should be embedded.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "embed_handler_html",
        "line": 186,
        "end_line": 186,
        "type": "filter",
        "doc": {
            "description": "Filters the returned embed handler.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Embed::shortcode()"
                },
                {
                    "name": "param",
                    "content": "The shortcode callback function to call.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "The attempted embed URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "An array of shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                }
            ]
        },
        "file": "wp-includes/class-wp-embed.php"
    },
    {
        "name": "embed_html",
        "line": 490,
        "end_line": 490,
        "type": "filter",
        "doc": {
            "description": "Filters the embed HTML output for a given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The default iframe tag to display embedded content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Current post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Width of the response.",
                    "types": [
                        "int"
                    ],
                    "variable": "$width"
                },
                {
                    "name": "param",
                    "content": "Height of the response.",
                    "types": [
                        "int"
                    ],
                    "variable": "$height"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "embed_maybe_make_link",
        "line": 455,
        "end_line": 455,
        "type": "filter",
        "doc": {
            "description": "Filters the returned, maybe-linked embed URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The linked or original URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "The original URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-wp-embed.php"
    },
    {
        "name": "embed_oembed_discover",
        "line": 270,
        "end_line": 270,
        "type": "filter",
        "doc": {
            "description": "Filters whether to inspect the given URL for discoverable link tags.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The default value changed to true."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_oEmbed::discover()"
                },
                {
                    "name": "param",
                    "content": "Whether to enable <code>&lt;link&gt;</code> tag discovery. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enable"
                }
            ]
        },
        "file": "wp-includes/class-wp-embed.php"
    },
    {
        "name": "embed_oembed_html",
        "line": 256,
        "end_line": 256,
        "type": "filter",
        "doc": {
            "description": "Filters the cached oEmbed HTML.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Embed::shortcode()"
                },
                {
                    "name": "param",
                    "content": "The cached HTML result, stored in post meta.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$cache"
                },
                {
                    "name": "param",
                    "content": "The attempted embed URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "An array of shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_ID"
                }
            ]
        },
        "file": "wp-includes/class-wp-embed.php"
    },
    {
        "name": "embed_site_title_html",
        "line": 1192,
        "end_line": 1192,
        "type": "filter",
        "doc": {
            "description": "Filters the site title HTML in the embed footer.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The site title HTML.",
                    "types": [
                        "string"
                    ],
                    "variable": "$site_title"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "embed_thumbnail_id",
        "line": 32,
        "end_line": 32,
        "type": "filter",
        "doc": {
            "description": "Filters the thumbnail image ID for use in the embed template.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$thumbnail_id"
                }
            ]
        },
        "file": "wp-includes/theme-compat/embed-content.php"
    },
    {
        "name": "embed_thumbnail_image_shape",
        "line": 75,
        "end_line": 75,
        "type": "filter",
        "doc": {
            "description": "Filters the thumbnail shape for use in the embed template.",
            "long_description": "<p>Rectangular images are shown above the title while square images are shown next to the content.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "Added <code>$thumbnail_id</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Thumbnail image shape. Either 'rectangular' or 'square'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$shape"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$thumbnail_id"
                }
            ]
        },
        "file": "wp-includes/theme-compat/embed-content.php"
    },
    {
        "name": "embed_thumbnail_image_size",
        "line": 59,
        "end_line": 59,
        "type": "filter",
        "doc": {
            "description": "Filters the thumbnail image size for use in the embed template.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "Added <code>$thumbnail_id</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Thumbnail image size.",
                    "types": [
                        "string"
                    ],
                    "variable": "$image_size"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$thumbnail_id"
                }
            ]
        },
        "file": "wp-includes/theme-compat/embed-content.php"
    },
    {
        "name": "emoji_ext",
        "line": 5598,
        "end_line": 5598,
        "type": "filter",
        "doc": {
            "description": "Filters the extension of the emoji png files.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "The emoji extension for png files. Default .png.",
                    "types": [
                        "string"
                    ],
                    "variable": "$extension"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "emoji_svg_ext",
        "line": 5616,
        "end_line": 5616,
        "type": "filter",
        "doc": {
            "description": "Filters the extension of the emoji SVG files.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "The emoji extension for svg files. Default .svg.",
                    "types": [
                        "string"
                    ],
                    "variable": "$extension"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "emoji_svg_url",
        "line": 5607,
        "end_line": 5607,
        "type": "filter",
        "doc": {
            "description": "Filters the URL where emoji SVG images are hosted.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "The emoji base URL for svg images.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "emoji_url",
        "line": 5589,
        "end_line": 5589,
        "type": "filter",
        "doc": {
            "description": "Filters the URL where emoji png images are hosted.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "The emoji base URL for png images.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "enable_edit_any_user_configuration",
        "line": 91,
        "end_line": 91,
        "type": "filter",
        "doc": {
            "description": "Filters whether to allow administrators on Multisite to edit every user.",
            "long_description": "<p>Enabling the user editing form via this filter also hinges on the user holding the 'manage_network_users' cap, and the logged-in user not matching the user profile open for editing.</p> <p>The filter was introduced to replace the EDIT_ANY_USER constant.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow editing of any user. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow"
                }
            ]
        },
        "file": "wp-admin/user-edit.php"
    },
    {
        "name": "enable_live_network_counts",
        "line": 2352,
        "end_line": 2352,
        "type": "filter",
        "doc": {
            "description": "Filters whether to update network site or user counts when a new site is created.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_is_large_network()"
                },
                {
                    "name": "param",
                    "content": "Whether the network is considered small.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$small_network"
                },
                {
                    "name": "param",
                    "content": "Context. Either 'users' or 'sites'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "enable_loading_advanced_cache_dropin",
        "line": 89,
        "end_line": 89,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable loading of the advanced-cache.php drop-in.",
            "long_description": "<p>This filter runs before it can be used by plugins. It is designed for non-web run-times. If false is returned, advanced-cache.php will never be loaded.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to enable loading advanced-cache.php (if present).                                    Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enable_advanced_cache"
                }
            ]
        },
        "file": "wp-settings.php"
    },
    {
        "name": "enable_login_autofocus",
        "line": 1436,
        "end_line": 1436,
        "type": "filter",
        "doc": {
            "description": "Filters whether to print the call to `wp_attempt_focus()` on the login screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether to print the function call. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$print"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "enable_maintenance_mode",
        "line": 213,
        "end_line": 213,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable maintenance mode.",
            "long_description": "<p>This filter runs before it can be used by plugins. It is designed for non-web runtimes. If this filter returns true, maintenance mode will be active and the request will end. If false, the request will be allowed to continue processing even if maintenance mode should be active.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to enable maintenance mode. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enable_checks"
                },
                {
                    "name": "param",
                    "content": "The timestamp set in the .maintenance file.",
                    "types": [
                        "int"
                    ],
                    "variable": "$upgrading"
                }
            ]
        },
        "file": "wp-includes/load.php"
    },
    {
        "name": "enable_post_by_email_configuration",
        "line": 193,
        "end_line": 193,
        "type": "filter",
        "doc": {
            "description": "Filters whether the post-by-email functionality is enabled.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether post-by-email configuration is enabled. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enabled"
                }
            ]
        },
        "file": "wp-admin/options.php"
    },
    {
        "name": "enable_update_services_configuration",
        "line": 199,
        "end_line": 199,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable the Update Services section in the Writing settings screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to enable the Update Services settings area. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enable"
                }
            ]
        },
        "file": "wp-admin/options-writing.php"
    },
    {
        "name": "enable_wp_debug_mode_checks",
        "line": 322,
        "end_line": 322,
        "type": "filter",
        "doc": {
            "description": "Filters whether to allow the debug mode check to occur.",
            "long_description": "<p>This filter runs before it can be used by plugins. It is designed for non-web run-times. Returning false causes the <code>WP_DEBUG</code> and related constants to not be checked and the default php values for errors will be used unless you take care to update them yourself.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to enable debug mode checks to occur. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enable_debug_mode"
                }
            ]
        },
        "file": "wp-includes/load.php"
    },
    {
        "name": "enclosure_links",
        "line": 868,
        "end_line": 868,
        "type": "filter",
        "doc": {
            "description": "Filters the list of enclosure links before querying the database.",
            "long_description": "<p>Allows for the addition and/or removal of potential enclosures to save to postmeta before checking the database for existing enclosures.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of enclosure links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_links"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_ID"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "enter_title_here",
        "line": 513,
        "end_line": 513,
        "type": "filter",
        "doc": {
            "description": "Filters the title field placeholder text.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Placeholder text. Default 'Add title'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/edit-form-advanced.php"
    },
    {
        "name": "esc_html",
        "line": 4456,
        "end_line": 4456,
        "type": "filter",
        "doc": {
            "description": "Filters a string cleaned and escaped for output in HTML.",
            "long_description": "<p>Text passed to esc_html() is stripped of invalid or special characters before output.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The text after it has been escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$safe_text"
                },
                {
                    "name": "param",
                    "content": "The text prior to being escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "esc_textarea",
        "line": 4502,
        "end_line": 4502,
        "type": "filter",
        "doc": {
            "description": "Filters a string cleaned and escaped for output in a textarea element.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The text after it has been escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$safe_text"
                },
                {
                    "name": "param",
                    "content": "The text prior to being escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "excerpt_allowed_blocks",
        "line": 156,
        "end_line": 156,
        "type": "filter",
        "doc": {
            "description": "Filters the list of blocks that can contribute to the excerpt.",
            "long_description": "<p>If a dynamic block is added to this list, it must not generate another excerpt, as this will cause an infinite loop to occur.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "The list of allowed blocks.",
                    "types": [
                        "array"
                    ],
                    "variable": "$allowed_blocks"
                }
            ]
        },
        "file": "wp-includes/blocks.php"
    },
    {
        "name": "excerpt_length",
        "line": 3806,
        "end_line": 3806,
        "type": "filter",
        "doc": {
            "description": "Filters the maximum number of words in a post excerpt.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The maximum number of words. Default 55.",
                    "types": [
                        "int"
                    ],
                    "variable": "$number"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "excerpt_more",
        "line": 3815,
        "end_line": 3815,
        "type": "filter",
        "doc": {
            "description": "Filters the string in the \"more\" link displayed after a trimmed excerpt.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The string shown within the more link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$more_string"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "exit_on_http_head",
        "line": 26,
        "end_line": 26,
        "type": "filter",
        "doc": {
            "description": "Filters whether to allow 'HEAD' requests to generate content.",
            "long_description": "<p>Provides a significant performance bump by exiting before the page content loads for 'HEAD' requests. See #14348.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether to exit without generating any content for 'HEAD' requests. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$exit"
                }
            ]
        },
        "file": "wp-includes/template-loader.php"
    },
    {
        "name": "expiration_of_site_transient_{$transient}",
        "line": 1844,
        "end_line": 1844,
        "type": "filter",
        "doc": {
            "description": "Filters the expiration for a site transient before its value is set.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Time until expiration in seconds. Use 0 for no expiration.",
                    "types": [
                        "int"
                    ],
                    "variable": "$expiration"
                },
                {
                    "name": "param",
                    "content": "New value of site transient.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Transient name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$transient"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "expiration_of_transient_{$transient}",
        "line": 784,
        "end_line": 784,
        "type": "filter",
        "doc": {
            "description": "Filters the expiration for a transient before its value is set.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Time until expiration in seconds. Use 0 for no expiration.",
                    "types": [
                        "int"
                    ],
                    "variable": "$expiration"
                },
                {
                    "name": "param",
                    "content": "New value of transient.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Transient name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$transient"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "export_args",
        "line": 119,
        "end_line": 119,
        "type": "filter",
        "doc": {
            "description": "Filters the export args.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "The arguments to send to the exporter.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/export.php"
    },
    {
        "name": "export_wp_filename",
        "line": 93,
        "end_line": 93,
        "type": "filter",
        "doc": {
            "description": "Filters the export filename.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The name of the file for download.",
                    "types": [
                        "string"
                    ],
                    "variable": "$wp_filename"
                },
                {
                    "name": "param",
                    "content": "The site name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sitename"
                },
                {
                    "name": "param",
                    "content": "Today's date, formatted.",
                    "types": [
                        "string"
                    ],
                    "variable": "$date"
                }
            ]
        },
        "file": "wp-admin/includes/export.php"
    },
    {
        "name": "ext2type",
        "line": 3020,
        "end_line": 3033,
        "type": "filter",
        "doc": {
            "description": "Filters file type based on the extension name.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_ext2type()"
                },
                {
                    "name": "param",
                    "content": "Multi-dimensional array with extensions for a default set                        of file types.",
                    "types": [
                        "array"
                    ],
                    "variable": "$ext2type"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "extra_{$context}_headers",
        "line": 5734,
        "end_line": 5734,
        "type": "filter",
        "doc": {
            "description": "Filters extra file headers by context.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$context</code>, refers to the context where extra headers might be loaded.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Empty array by default.",
                    "types": [
                        "array"
                    ],
                    "variable": "$extra_context_headers"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "fallback_intermediate_image_sizes",
        "line": 526,
        "end_line": 526,
        "type": "filter",
        "doc": {
            "description": "Filters the image sizes generated for non-image mime types.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of image size names.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fallback_sizes"
                },
                {
                    "name": "param",
                    "content": "Current attachment metadata.",
                    "types": [
                        "array"
                    ],
                    "variable": "$metadata"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "feed_content_type",
        "line": 729,
        "end_line": 729,
        "type": "filter",
        "doc": {
            "description": "Filters the content type for a specific feed type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Content type indicating the type of data that a feed contains.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content_type"
                },
                {
                    "name": "param",
                    "content": "Type of feed. Possible values include 'rss', rss2', 'atom', and 'rdf'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "feed_link",
        "line": 654,
        "end_line": 654,
        "type": "filter",
        "doc": {
            "description": "Filters the feed type permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The feed permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "The feed type. Possible values include 'rss2', 'atom',                       or an empty string for the default feed type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "feed_links_show_comments_feed",
        "line": 2955,
        "end_line": 2955,
        "type": "filter",
        "doc": {
            "description": "Filters whether to display the comments feed link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to display the comments feed link. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "feed_links_show_posts_feed",
        "line": 2944,
        "end_line": 2944,
        "type": "filter",
        "doc": {
            "description": "Filters whether to display the posts feed link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to display the posts feed link. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "file_is_displayable_image",
        "line": 865,
        "end_line": 865,
        "type": "filter",
        "doc": {
            "description": "Filters whether the current image is displayable in the browser.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether the image can be displayed. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Path to the image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "file_mod_allowed",
        "line": 1425,
        "end_line": 1425,
        "type": "filter",
        "doc": {
            "description": "Filters whether file modifications are allowed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether file modifications are allowed.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$file_mod_allowed"
                },
                {
                    "name": "param",
                    "content": "The usage context.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/load.php"
    },
    {
        "name": "filesystem_method",
        "line": 1915,
        "end_line": 1915,
        "type": "filter",
        "doc": {
            "description": "Filters the filesystem method to use.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "Filesystem method to return.",
                    "types": [
                        "string"
                    ],
                    "variable": "$method"
                },
                {
                    "name": "param",
                    "content": "An array of connection details for the method.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Full path to the directory that is tested for being writable.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                },
                {
                    "name": "param",
                    "content": "Whether to allow Group/World writable.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow_relaxed_file_ownership"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "filesystem_method_file",
        "line": 1785,
        "end_line": 1785,
        "type": "filter",
        "doc": {
            "description": "Filters the path for a specific filesystem method class file.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_filesystem_method()"
                },
                {
                    "name": "param",
                    "content": "Path to the specific filesystem method class file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "The filesystem method to use.",
                    "types": [
                        "string"
                    ],
                    "variable": "$method"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "filter_block_editor_meta_boxes",
        "line": 2253,
        "end_line": 2253,
        "type": "filter",
        "doc": {
            "description": "Fires right before the meta boxes are rendered.",
            "long_description": "<p>This allows for the filtering of meta box data, that should already be present by this point. Do not use as a means of adding meta box data.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Global meta box state.",
                    "types": [
                        "array"
                    ],
                    "variable": "$wp_meta_boxes"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "flush_rewrite_rules_hard",
        "line": 1816,
        "end_line": 1816,
        "type": "filter",
        "doc": {
            "description": "Filters whether a \"hard\" rewrite rule flush should be performed when requested.",
            "long_description": "<p>A \"hard\" flush updates .htaccess (Apache) or web.config (IIS).</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to flush rewrite rules \"hard\". Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$hard"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "force_filtered_html_on_import",
        "line": 342,
        "end_line": 342,
        "type": "filter",
        "doc": {
            "description": "Whether to filter imported data through kses on import.",
            "long_description": "<p>Multisite uses this hook to filter all data through kses by default, as a super administrator may be assisting an untrusted user.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to force data to be filtered through kses. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$force"
                }
            ]
        },
        "file": "wp-admin/admin.php"
    },
    {
        "name": "format_for_editor",
        "line": 4208,
        "end_line": 4208,
        "type": "filter",
        "doc": {
            "description": "Filters the text after it is formatted for the editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "The formatted text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "The default editor for the current user.                               It is usually either 'html' or 'tinymce'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$default_editor"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "format_to_edit",
        "line": 2630,
        "end_line": 2630,
        "type": "filter",
        "doc": {
            "description": "Filters the text to be formatted for editing.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "param",
                    "content": "The text, prior to formatting for editing.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "found_comments_query",
        "line": 949,
        "end_line": 949,
        "type": "filter",
        "doc": {
            "description": "Filters the query used to retrieve found comment count.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "SQL query. Default 'SELECT FOUND_ROWS()'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$found_comments_query"
                },
                {
                    "name": "param",
                    "content": "The <code>WP_Comment_Query</code> instance.",
                    "types": [
                        "\\WP_Comment_Query"
                    ],
                    "variable": "$comment_query"
                }
            ]
        },
        "file": "wp-includes/class-wp-comment-query.php"
    },
    {
        "name": "found_networks_query",
        "line": 497,
        "end_line": 497,
        "type": "filter",
        "doc": {
            "description": "Filters the query used to retrieve found network count.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "SQL query. Default 'SELECT FOUND_ROWS()'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$found_networks_query"
                },
                {
                    "name": "param",
                    "content": "The <code>WP_Network_Query</code> instance.",
                    "types": [
                        "\\WP_Network_Query"
                    ],
                    "variable": "$network_query"
                }
            ]
        },
        "file": "wp-includes/class-wp-network-query.php"
    },
    {
        "name": "found_posts",
        "line": 3234,
        "end_line": 3234,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the number of found posts for the query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The number of posts found.",
                    "types": [
                        "int"
                    ],
                    "variable": "$found_posts"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "found_posts_query",
        "line": 3213,
        "end_line": 3213,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the query to run for retrieving the found posts.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The query to run to find the found posts.",
                    "types": [
                        "string"
                    ],
                    "variable": "$found_posts"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "found_sites_query",
        "line": 688,
        "end_line": 688,
        "type": "filter",
        "doc": {
            "description": "Filters the query used to retrieve found site count.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "SQL query. Default 'SELECT FOUND_ROWS()'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$found_sites_query"
                },
                {
                    "name": "param",
                    "content": "The <code>WP_Site_Query</code> instance.",
                    "types": [
                        "\\WP_Site_Query"
                    ],
                    "variable": "$site_query"
                }
            ]
        },
        "file": "wp-includes/class-wp-site-query.php"
    },
    {
        "name": "found_users_query",
        "line": 635,
        "end_line": 635,
        "type": "filter",
        "doc": {
            "description": "Filters SELECT FOUND_ROWS() query for the current WP_User_Query instance.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "Added the <code>$this</code> parameter."
                },
                {
                    "name": "global",
                    "content": "wpdb $wpdb WordPress database abstraction object."
                },
                {
                    "name": "param",
                    "content": "The SELECT FOUND_ROWS() query for the current WP_User_Query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sql"
                },
                {
                    "name": "param",
                    "content": "The current WP_User_Query instance.",
                    "types": [
                        "\\WP_User_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-user-query.php"
    },
    {
        "name": "fs_ftp_connection_types",
        "line": 2092,
        "end_line": 2092,
        "type": "filter",
        "doc": {
            "description": "Filters the connection types to output to the filesystem credentials form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "The <code>$context</code> parameter default changed from <code>false</code> to an empty string."
                },
                {
                    "name": "param",
                    "content": "Types of connections.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$types"
                },
                {
                    "name": "param",
                    "content": "Credentials to connect with.",
                    "types": [
                        "array"
                    ],
                    "variable": "$credentials"
                },
                {
                    "name": "param",
                    "content": "Chosen filesystem method.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "Error object or status.",
                    "types": [
                        "\\WP_Error",
                        "bool"
                    ],
                    "variable": "$error"
                },
                {
                    "name": "param",
                    "content": "Full path to the directory that is tested for being writable.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "gallery_style",
        "line": 2013,
        "end_line": 2013,
        "type": "filter",
        "doc": {
            "description": "Filters the default gallery shortcode CSS styles.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Default CSS styles and opening HTML div container                              for the gallery shortcode output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$gallery_style"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "get_ancestors",
        "line": 4537,
        "end_line": 4537,
        "type": "filter",
        "doc": {
            "description": "Filters a given object's ancestors.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "since",
                    "content": "4.1.1",
                    "description": "Introduced the <code>$resource_type</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of object ancestors.",
                    "types": [
                        "array"
                    ],
                    "variable": "$ancestors"
                },
                {
                    "name": "param",
                    "content": "Object ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$object_id"
                },
                {
                    "name": "param",
                    "content": "Type of object.",
                    "types": [
                        "string"
                    ],
                    "variable": "$object_type"
                },
                {
                    "name": "param",
                    "content": "Type of resource $object_type is.",
                    "types": [
                        "string"
                    ],
                    "variable": "$resource_type"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "get_archives_link",
        "line": 1768,
        "end_line": 1768,
        "type": "filter",
        "doc": {
            "description": "Filters the archive link content.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "Added the <code>$url</code>, <code>$text</code>, <code>$format</code>, <code>$before</code>, and <code>$after</code> parameters."
                },
                {
                    "name": "since",
                    "content": "5.2.0",
                    "description": "Added the <code>$selected</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The archive HTML link content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link_html"
                },
                {
                    "name": "param",
                    "content": "URL to archive.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Archive text description.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "Link format. Can be 'link', 'option', 'html', or custom.",
                    "types": [
                        "string"
                    ],
                    "variable": "$format"
                },
                {
                    "name": "param",
                    "content": "Content to prepend to the description.",
                    "types": [
                        "string"
                    ],
                    "variable": "$before"
                },
                {
                    "name": "param",
                    "content": "Content to append to the description.",
                    "types": [
                        "string"
                    ],
                    "variable": "$after"
                },
                {
                    "name": "param",
                    "content": "True if the current page is the selected archive.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$selected"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_attached_file",
        "line": 518,
        "end_line": 518,
        "type": "filter",
        "doc": {
            "description": "Filters the attached file based on the given ID.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Path to attached file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "get_attached_media",
        "line": 4067,
        "end_line": 4067,
        "type": "filter",
        "doc": {
            "description": "Filters the list of media attached to the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Array of media attached to the given post.",
                    "types": [
                        "\\WP_Post[]"
                    ],
                    "variable": "$children"
                },
                {
                    "name": "param",
                    "content": "Mime type of the media desired.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "get_attached_media_args",
        "line": 4054,
        "end_line": 4054,
        "type": "filter",
        "doc": {
            "description": "Filters arguments used to retrieve media attached to the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Post query arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Mime type of the desired media.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "get_available_languages",
        "line": 1324,
        "end_line": 1324,
        "type": "filter",
        "doc": {
            "description": "Filters the list of available language codes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of available language codes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$languages"
                },
                {
                    "name": "param",
                    "content": "The directory where the language files were found.",
                    "types": [
                        "string"
                    ],
                    "variable": "$dir"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "get_avatar",
        "line": 2690,
        "end_line": 2690,
        "type": "filter",
        "doc": {
            "description": "Filters the avatar to retrieve.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "4.2.0",
                    "description": "The <code>$args</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "&lt;img&gt; tag for the user's avatar.",
                    "types": [
                        "string"
                    ],
                    "variable": "$avatar"
                },
                {
                    "name": "param",
                    "content": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,                            user email, WP_User object, WP_Post object, or WP_Comment object.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$id_or_email"
                },
                {
                    "name": "param",
                    "content": "Square avatar width and height in pixels to retrieve.",
                    "types": [
                        "int"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "URL for the default image or a default type. Accepts '404', 'retro', 'monsterid',                            'wavatar', 'indenticon','mystery' (or 'mm', or 'mysteryman'), 'blank', or 'gravatar_default'.                            Default is the value of the 'avatar_default' option, with a fallback of 'mystery'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$default"
                },
                {
                    "name": "param",
                    "content": "Alternative text to use in the avatar image tag. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$alt"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to get_avatar_data(), after processing.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "get_avatar_comment_types",
        "line": 4035,
        "end_line": 4035,
        "type": "filter",
        "doc": {
            "description": "Filters the list of allowed comment types for retrieving avatars.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "An array of content types. Default only contains 'comment'.",
                    "types": [
                        "array"
                    ],
                    "variable": "$types"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_avatar_data",
        "line": 4257,
        "end_line": 4257,
        "type": "filter",
        "doc": {
            "description": "Filters the avatar data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to get_avatar_data(), after processing.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The Gravatar to retrieve. Accepts a user ID, Gravatar MD5 hash,                           user email, WP_User object, WP_Post object, or WP_Comment object.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$id_or_email"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_avatar_url",
        "line": 4246,
        "end_line": 4246,
        "type": "filter",
        "doc": {
            "description": "Filters the avatar URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "The URL of the avatar.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The Gravatar to retrieve. Accepts a user ID, Gravatar MD5 hash,                            user email, WP_User object, WP_Post object, or WP_Comment object.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$id_or_email"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to get_avatar_data(), after processing.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_bloginfo_rss",
        "line": 39,
        "end_line": 39,
        "type": "filter",
        "doc": {
            "description": "Filters the bloginfo for use in RSS feeds.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "convert_chars()"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_bloginfo()"
                },
                {
                    "name": "param",
                    "content": "Converted string value of the blog information.",
                    "types": [
                        "string"
                    ],
                    "variable": "$info"
                },
                {
                    "name": "param",
                    "content": "The type of blog information to retrieve.",
                    "types": [
                        "string"
                    ],
                    "variable": "$show"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "get_blogs_of_user",
        "line": 712,
        "end_line": 712,
        "type": "filter",
        "doc": {
            "description": "Filters the list of sites a user belongs to.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "An array of site objects belonging to the user.",
                    "types": [
                        "array"
                    ],
                    "variable": "$sites"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Whether the returned sites array should contain all sites, including                       those marked 'deleted', 'archived', or 'spam'. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$all"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "get_bookmarks",
        "line": 173,
        "end_line": 173,
        "type": "filter",
        "doc": {
            "description": "Filters the returned list of bookmarks.",
            "long_description": "<p>The first time the hook is evaluated in this file, it returns the cached bookmarks list. The second evaluation returns a cached bookmarks list if the link category is passed but does not exist. The third evaluation returns the full cached results.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_bookmarks()"
                },
                {
                    "name": "param",
                    "content": "List of the cached bookmarks.",
                    "types": [
                        "array"
                    ],
                    "variable": "$bookmarks"
                },
                {
                    "name": "param",
                    "content": "An array of bookmark query arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                }
            ]
        },
        "file": "wp-includes/bookmark.php"
    },
    {
        "name": "get_calendar",
        "line": 2274,
        "end_line": 2274,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML calendar output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "HTML output of the calendar.",
                    "types": [
                        "string"
                    ],
                    "variable": "$calendar_output"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_canonical_url",
        "line": 3798,
        "end_line": 3798,
        "type": "filter",
        "doc": {
            "description": "Filters the canonical URL for a post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "The post's canonical URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$canonical_url"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_categories_taxonomy",
        "line": 38,
        "end_line": 38,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy used to retrieve terms when calling get_categories().",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Taxonomy to retrieve terms from.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "An array of arguments. See get_terms().",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/category.php"
    },
    {
        "name": "get_comment",
        "line": 218,
        "end_line": 218,
        "type": "filter",
        "doc": {
            "description": "Fires after a comment is retrieved.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Comment data.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$_comment"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "get_comment_ID",
        "line": 670,
        "end_line": 670,
        "type": "filter",
        "doc": {
            "description": "Filters the returned comment ID.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The current comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_author",
        "line": 48,
        "end_line": 48,
        "type": "filter",
        "doc": {
            "description": "Filters the returned comment author name.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> and <code>$comment</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "The comment author's username.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_author_IP",
        "line": 280,
        "end_line": 280,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's returned IP address.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> and <code>$comment</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "The comment author's IP address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_author_IP"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_author_email",
        "line": 99,
        "end_line": 99,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's returned email address.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> and <code>$comment</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "The comment author's email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_author_email"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_author_link",
        "line": 241,
        "end_line": 241,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's link for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$author</code> and <code>$comment_ID</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "The HTML-formatted comment author link.                           Empty for an invalid URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "The comment author's username.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_author_url",
        "line": 326,
        "end_line": 326,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> and <code>$comment</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "The comment author's URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_author_url_link",
        "line": 396,
        "end_line": 396,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's returned URL link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The HTML-formatted comment author URL link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$return"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_date",
        "line": 566,
        "end_line": 566,
        "type": "filter",
        "doc": {
            "description": "Filters the returned comment date.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Formatted date string or Unix timestamp.",
                    "types": [
                        "string",
                        "int"
                    ],
                    "variable": "$date"
                },
                {
                    "name": "param",
                    "content": "The format of the date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_excerpt",
        "line": 623,
        "end_line": 623,
        "type": "filter",
        "doc": {
            "description": "Filters the retrieved comment excerpt.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> and <code>$comment</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "The comment excerpt text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$excerpt"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_link",
        "line": 794,
        "end_line": 794,
        "type": "filter",
        "doc": {
            "description": "Filters the returned single comment permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$cpage</code> parameter."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_page_of_comment()"
                },
                {
                    "name": "param",
                    "content": "The comment permalink with '#comment-$id' appended.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "The current comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                },
                {
                    "name": "param",
                    "content": "An array of arguments to override the defaults.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The calculated 'cpage' value.",
                    "types": [
                        "int"
                    ],
                    "variable": "$cpage"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_text",
        "line": 973,
        "end_line": 973,
        "type": "filter",
        "doc": {
            "description": "Filters the text of a comment.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "Walker_Comment::comment()"
                },
                {
                    "name": "param",
                    "content": "Text of the comment.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_content"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_time",
        "line": 1038,
        "end_line": 1038,
        "type": "filter",
        "doc": {
            "description": "Filters the returned comment time.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The comment time, formatted as a date string or Unix timestamp.",
                    "types": [
                        "string",
                        "int"
                    ],
                    "variable": "$date"
                },
                {
                    "name": "param",
                    "content": "Date format.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "Whether the GMT date is in use.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$gmt"
                },
                {
                    "name": "param",
                    "content": "Whether the time is translated.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$translate"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comment_type",
        "line": 1078,
        "end_line": 1078,
        "type": "filter",
        "doc": {
            "description": "Filters the returned comment type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$comment_ID</code> and <code>$comment</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "The type of comment, such as 'comment', 'pingback', or 'trackback'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_type"
                },
                {
                    "name": "param",
                    "content": "The comment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                },
                {
                    "name": "param",
                    "content": "The comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comments_link",
        "line": 817,
        "end_line": 817,
        "type": "filter",
        "doc": {
            "description": "Filters the returned post comments permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Post comments permalink with '#comments' appended.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comments_link"
                },
                {
                    "name": "param",
                    "content": "Post ID or WP_Post object.",
                    "types": [
                        "int",
                        "\\WP_Post"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comments_number",
        "line": 865,
        "end_line": 865,
        "type": "filter",
        "doc": {
            "description": "Filters the returned comment count for a post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "A string representing the number of comments a post has, otherwise 0.",
                    "types": [
                        "string",
                        "int"
                    ],
                    "variable": "$count"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "get_comments_pagenum_link",
        "line": 2846,
        "end_line": 2846,
        "type": "filter",
        "doc": {
            "description": "Filters the comments page number link for the current request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The comments page number link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$result"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_custom_logo",
        "line": 1004,
        "end_line": 1004,
        "type": "filter",
        "doc": {
            "description": "Filters the custom logo output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "Added the <code>$blog_id</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Custom logo HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "ID of the blog to get the custom logo for.",
                    "types": [
                        "int"
                    ],
                    "variable": "$blog_id"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_date_sql",
        "line": 560,
        "end_line": 560,
        "type": "filter",
        "doc": {
            "description": "Filters the date query WHERE clause.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "WHERE clause of the date query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$where"
                },
                {
                    "name": "param",
                    "content": "The WP_Date_Query instance.",
                    "types": [
                        "\\WP_Date_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-date-query.php"
    },
    {
        "name": "get_default_comment_status",
        "line": 308,
        "end_line": 308,
        "type": "filter",
        "doc": {
            "description": "Filters the default comment status for the given post type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Default status for the given post type,                             either 'open' or 'closed'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$status"
                },
                {
                    "name": "param",
                    "content": "Post type. Default is <code>post</code>.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                },
                {
                    "name": "param",
                    "content": "Type of comment. Default is <code>comment</code>.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_type"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "get_delete_post_link",
        "line": 1483,
        "end_line": 1483,
        "type": "filter",
        "doc": {
            "description": "Filters the post delete link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The delete link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Whether to bypass the trash and force deletion. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$force_delete"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_edit_bookmark_link",
        "line": 1572,
        "end_line": 1572,
        "type": "filter",
        "doc": {
            "description": "Filters the bookmark edit link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                },
                {
                    "name": "param",
                    "content": "Bookmark ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$link_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_edit_comment_link",
        "line": 1510,
        "end_line": 1510,
        "type": "filter",
        "doc": {
            "description": "Filters the comment edit link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_edit_post_link",
        "line": 1395,
        "end_line": 1395,
        "type": "filter",
        "doc": {
            "description": "Filters the post edit link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "The link context. If set to 'display' then ampersands                        are encoded.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_edit_tag_link",
        "line": 953,
        "end_line": 953,
        "type": "filter",
        "doc": {
            "description": "Filters the edit link for a tag (or term in another taxonomy).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The term edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_edit_term_link",
        "line": 1032,
        "end_line": 1032,
        "type": "filter",
        "doc": {
            "description": "Filters the edit link for a term.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                },
                {
                    "name": "param",
                    "content": "Taxonomy name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "The object type (eg. the post type).",
                    "types": [
                        "string"
                    ],
                    "variable": "$object_type"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_edit_user_link",
        "line": 1646,
        "end_line": 1646,
        "type": "filter",
        "doc": {
            "description": "Filters the user edit link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "The edit link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_enclosed",
        "line": 4736,
        "end_line": 4736,
        "type": "filter",
        "doc": {
            "description": "Filters the list of enclosures already enclosed for the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of enclosures for the given post.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$pung"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "get_feed_build_date",
        "line": 696,
        "end_line": 696,
        "type": "filter",
        "doc": {
            "description": "Filters the date the last post or comment in the query was modified.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Date the last post or comment was modified in the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$max_modified_time"
                },
                {
                    "name": "param",
                    "content": "The date format requested in get_feed_build_date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$format"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "get_header_image_tag",
        "line": 1154,
        "end_line": 1154,
        "type": "filter",
        "doc": {
            "description": "Filters the markup of header images.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The HTML image tag markup being filtered.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "The custom header object returned by 'get_custom_header()'.",
                    "types": [
                        "object"
                    ],
                    "variable": "$header"
                },
                {
                    "name": "param",
                    "content": "Array of the attributes for the image tag.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "get_header_video_url",
        "line": 1442,
        "end_line": 1442,
        "type": "filter",
        "doc": {
            "description": "Filters the header video URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.3"
                },
                {
                    "name": "param",
                    "content": "Header video URL, if available.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "get_image_tag",
        "line": 411,
        "end_line": 411,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML content for the image tag.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "HTML content for the image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                },
                {
                    "name": "param",
                    "content": "Alternate text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$alt"
                },
                {
                    "name": "param",
                    "content": "Attachment title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "Part of the class name for aligning the image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$align"
                },
                {
                    "name": "param",
                    "content": "Size of image. Image size or array of width and height values (in that order).                            Default 'medium'.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "get_image_tag_class",
        "line": 394,
        "end_line": 394,
        "type": "filter",
        "doc": {
            "description": "Filters the value of the attachment's image tag class attribute.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "CSS class name or space-separated list of classes.",
                    "types": [
                        "string"
                    ],
                    "variable": "$class"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                },
                {
                    "name": "param",
                    "content": "Part of the class name for aligning the image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$align"
                },
                {
                    "name": "param",
                    "content": "Size of image. Image size or array of width and height values (in that order).                            Default 'medium'.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "get_lastpostdate",
        "line": 6399,
        "end_line": 6399,
        "type": "filter",
        "doc": {
            "description": "Filters the most recent time that a post on the site was published.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Date the last post was published.",
                    "types": [
                        "string"
                    ],
                    "variable": "$date"
                },
                {
                    "name": "param",
                    "content": "Location to use for getting the post published date.                         See get_lastpostdate() for accepted <code>$timezone</code> values.",
                    "types": [
                        "string"
                    ],
                    "variable": "$timezone"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "get_lastpostmodified",
        "line": 6451,
        "end_line": 6451,
        "type": "filter",
        "doc": {
            "description": "Filters the most recent time that a post was modified.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The most recent time that a post was modified, in 'Y-m-d H:i:s' format.",
                    "types": [
                        "string"
                    ],
                    "variable": "$lastpostmodified"
                },
                {
                    "name": "param",
                    "content": "Location to use for getting the post modified date.                                 See get_lastpostdate() for accepted <code>$timezone</code> values.",
                    "types": [
                        "string"
                    ],
                    "variable": "$timezone"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "get_main_network_id",
        "line": 5286,
        "end_line": 5286,
        "type": "filter",
        "doc": {
            "description": "Filters the main network ID.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "The ID of the main network.",
                    "types": [
                        "int"
                    ],
                    "variable": "$main_network_id"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "get_media_item_args",
        "line": 1573,
        "end_line": 1573,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments used to retrieve an image for the edit image form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_media_item"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "get_meta_sql",
        "line": 357,
        "end_line": 357,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the meta query's generated SQL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Array containing the query's JOIN and WHERE clauses.",
                    "types": [
                        "array"
                    ],
                    "variable": "$sql"
                },
                {
                    "name": "param",
                    "content": "Array of meta queries.",
                    "types": [
                        "array"
                    ],
                    "variable": "$queries"
                },
                {
                    "name": "param",
                    "content": "Type of meta.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "Primary table.",
                    "types": [
                        "string"
                    ],
                    "variable": "$primary_table"
                },
                {
                    "name": "param",
                    "content": "Primary column ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$primary_id_column"
                },
                {
                    "name": "param",
                    "content": "The main query object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/class-wp-meta-query.php"
    },
    {
        "name": "get_network",
        "line": 48,
        "end_line": 48,
        "type": "filter",
        "doc": {
            "description": "Fires after a network is retrieved.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Network data.",
                    "types": [
                        "\\WP_Network"
                    ],
                    "variable": "$_network"
                }
            ]
        },
        "file": "wp-includes/ms-network.php"
    },
    {
        "name": "get_object_subtype_{$object_type}",
        "line": 1458,
        "end_line": 1458,
        "type": "filter",
        "doc": {
            "description": "Filters the object subtype identifier for a non standard object type.",
            "long_description": "<p>The dynamic portion of the hook, <code>$object_type</code>, refers to the object type (post, comment, term, or user).</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.8"
                },
                {
                    "name": "param",
                    "content": "Empty string to override.",
                    "types": [
                        "string"
                    ],
                    "variable": "$object_subtype"
                },
                {
                    "name": "param",
                    "content": "ID of the object to get the subtype for.",
                    "types": [
                        "int"
                    ],
                    "variable": "$object_id"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "get_object_terms",
        "line": 2049,
        "end_line": 2049,
        "type": "filter",
        "doc": {
            "description": "Filters the terms for a given object or objects.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "Array of terms for the given object or objects.",
                    "types": [
                        "array"
                    ],
                    "variable": "$terms"
                },
                {
                    "name": "param",
                    "content": "Array of object IDs for which terms were retrieved.",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$object_ids"
                },
                {
                    "name": "param",
                    "content": "Array of taxonomy names from which terms were retrieved.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                },
                {
                    "name": "param",
                    "content": "Array of arguments for retrieving terms for the given                             object(s). See wp_get_object_terms() for details.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "get_page_of_comment",
        "line": 1156,
        "end_line": 1156,
        "type": "filter",
        "doc": {
            "description": "Filters the calculated page on which a comment appears.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "Introduced the <code>$comment_ID</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Comment page.",
                    "types": [
                        "int"
                    ],
                    "variable": "$page"
                },
                {
                    "name": "param",
                    "content": "{     Arguments used to calculate pagination. These include arguments auto-detected by the function,     based on query vars, system settings, etc. For pristine arguments passed to the function,     see <code>$original_args</code>.     @type string $type      Type of comments to count.     @type int    $page      Calculated current page.     @type int    $per_page  Calculated number of comments per page.     @type int    $max_depth Maximum comment threading depth allowed. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "{     Array of arguments passed to the function. Some or all of these may not be set.     @type string $type      Type of comments to count.     @type int    $page      Current comment page.     @type int    $per_page  Number of comments per page.     @type int    $max_depth Maximum comment threading depth allowed. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$original_args"
                },
                {
                    "name": "param",
                    "content": "ID of the comment.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "get_page_uri",
        "line": 5148,
        "end_line": 5148,
        "type": "filter",
        "doc": {
            "description": "Filters the URI for a page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Page URI.",
                    "types": [
                        "string"
                    ],
                    "variable": "$uri"
                },
                {
                    "name": "param",
                    "content": "Page object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$page"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "get_pagenum_link",
        "line": 2286,
        "end_line": 2286,
        "type": "filter",
        "doc": {
            "description": "Filters the page number link for the current request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "5.2.0",
                    "description": "Added the <code>$pagenum</code> argument."
                },
                {
                    "name": "param",
                    "content": "The page number link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "The page number.",
                    "types": [
                        "int"
                    ],
                    "variable": "$pagenum"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_pages",
        "line": 5466,
        "end_line": 5466,
        "type": "filter",
        "doc": {
            "description": "Filters the retrieved list of pages.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of page objects.",
                    "types": [
                        "\\WP_Post[]"
                    ],
                    "variable": "$pages"
                },
                {
                    "name": "param",
                    "content": "Array of get_pages() arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "get_post_galleries",
        "line": 4178,
        "end_line": 4178,
        "type": "filter",
        "doc": {
            "description": "Filters the list of all found galleries in the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of all found post galleries.",
                    "types": [
                        "array"
                    ],
                    "variable": "$galleries"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "get_post_gallery",
        "line": 4203,
        "end_line": 4203,
        "type": "filter",
        "doc": {
            "description": "Filters the first-found post gallery.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The first-found post gallery.",
                    "types": [
                        "array"
                    ],
                    "variable": "$gallery"
                },
                {
                    "name": "param",
                    "content": "Post ID or object.",
                    "types": [
                        "int",
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Associative array of all found post galleries.",
                    "types": [
                        "array"
                    ],
                    "variable": "$galleries"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "get_post_modified_time",
        "line": 2790,
        "end_line": 2790,
        "type": "filter",
        "doc": {
            "description": "Filters the localized time a post was last modified.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The formatted time.",
                    "types": [
                        "string"
                    ],
                    "variable": "$time"
                },
                {
                    "name": "param",
                    "content": "Format to use for retrieving the time the post was modified.                     Accepts 'G', 'U', or php date format. Default 'U'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "Whether to retrieve the GMT time. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$gmt"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_post_status",
        "line": 922,
        "end_line": 922,
        "type": "filter",
        "doc": {
            "description": "Filters the post status.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The post status.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_status"
                },
                {
                    "name": "param",
                    "content": "The post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "get_post_time",
        "line": 2602,
        "end_line": 2602,
        "type": "filter",
        "doc": {
            "description": "Filters the localized time a post was written.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "The formatted time.",
                    "types": [
                        "string"
                    ],
                    "variable": "$time"
                },
                {
                    "name": "param",
                    "content": "Format to use for retrieving the time the post was written.                     Accepts 'G', 'U', or php date format. Default 'U'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "Whether to retrieve the GMT time. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$gmt"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_pung",
        "line": 4765,
        "end_line": 4765,
        "type": "filter",
        "doc": {
            "description": "Filters the list of already-pinged URLs for the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of URLs already pinged for the given post.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$pung"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "get_role_list",
        "line": 639,
        "end_line": 639,
        "type": "filter",
        "doc": {
            "description": "Filters the returned array of roles for a user.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of user roles.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$role_list"
                },
                {
                    "name": "param",
                    "content": "A WP_User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user_object"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-users-list-table.php"
    },
    {
        "name": "get_sample_permalink",
        "line": 1402,
        "end_line": 1402,
        "type": "filter",
        "doc": {
            "description": "Filters the sample permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "{     Array containing the sample permalink with placeholder for the post name, and the post name.     @type string $0 The permalink with placeholder for the post name.     @type string $1 The post name. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$permalink"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Post title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "Post name (slug).",
                    "types": [
                        "string"
                    ],
                    "variable": "$name"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "get_sample_permalink_html",
        "line": 1484,
        "end_line": 1484,
        "type": "filter",
        "doc": {
            "description": "Filters the sample permalink HTML markup.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Sample permalink HTML markup.",
                    "types": [
                        "string"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "New sample permalink title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$new_title"
                },
                {
                    "name": "param",
                    "content": "New sample permalink slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$new_slug"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "get_schedule",
        "line": 866,
        "end_line": 866,
        "type": "filter",
        "doc": {
            "description": "Filter the schedule for a hook.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Schedule for the hook. False if not found.",
                    "types": [
                        "string",
                        "bool"
                    ],
                    "variable": "$schedule"
                },
                {
                    "name": "param",
                    "content": "Action hook to execute when cron is run.",
                    "types": [
                        "string"
                    ],
                    "variable": "$hook"
                },
                {
                    "name": "param",
                    "content": "Optional. Arguments to pass to the hook's callback function.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "get_search_form",
        "line": 297,
        "end_line": 297,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output of the search form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The search form HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$form"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_search_query",
        "line": 3913,
        "end_line": 3913,
        "type": "filter",
        "doc": {
            "description": "Filters the contents of the search query variable.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Contents of the search query variable.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$search"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_shortlink",
        "line": 3899,
        "end_line": 3899,
        "type": "filter",
        "doc": {
            "description": "Filters the shortlink for a post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Shortlink URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$shortlink"
                },
                {
                    "name": "param",
                    "content": "Post ID, or 0 for the current post.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                },
                {
                    "name": "param",
                    "content": "The context for the link. One of 'post' or 'query',",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                },
                {
                    "name": "param",
                    "content": "Whether to allow post slugs in the shortlink. Not used by default.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow_slugs"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_site",
        "line": 325,
        "end_line": 325,
        "type": "filter",
        "doc": {
            "description": "Fires after a site is retrieved.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Site data.",
                    "types": [
                        "\\WP_Site"
                    ],
                    "variable": "$_site"
                }
            ]
        },
        "file": "wp-includes/ms-site.php"
    },
    {
        "name": "get_site_icon_url",
        "line": 887,
        "end_line": 887,
        "type": "filter",
        "doc": {
            "description": "Filters the site icon URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Site icon URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Size of the site icon.",
                    "types": [
                        "int"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "ID of the blog to get the site icon for.",
                    "types": [
                        "int"
                    ],
                    "variable": "$blog_id"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_space_allowed",
        "line": 2475,
        "end_line": 2475,
        "type": "filter",
        "doc": {
            "description": "Filters the upload quota for the current site.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Upload quota in megabytes for the current blog.",
                    "types": [
                        "int"
                    ],
                    "variable": "$space_allowed"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "get_tags",
        "line": 297,
        "end_line": 297,
        "type": "filter",
        "doc": {
            "description": "Filters the array of term objects returned for the 'post_tag' taxonomy.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Array of 'post_tag' term objects, or a count thereof.",
                    "types": [
                        "\\WP_Term[]",
                        "int"
                    ],
                    "variable": "$tags"
                },
                {
                    "name": "param",
                    "content": "An array of arguments. @see get_terms()",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/category.php"
    },
    {
        "name": "get_term",
        "line": 856,
        "end_line": 856,
        "type": "filter",
        "doc": {
            "description": "Filters a taxonomy term object.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "<code>$_term</code> is now a <code>WP_Term</code> object."
                },
                {
                    "name": "param",
                    "content": "Term object.",
                    "types": [
                        "\\WP_Term"
                    ],
                    "variable": "$_term"
                },
                {
                    "name": "param",
                    "content": "The taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "get_terms",
        "line": 1201,
        "end_line": 1201,
        "type": "filter",
        "doc": {
            "description": "Filters the found terms.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "Added the <code>$term_query</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Array of found terms.",
                    "types": [
                        "array"
                    ],
                    "variable": "$terms"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomies.",
                    "types": [
                        "array"
                    ],
                    "variable": "$taxonomies"
                },
                {
                    "name": "param",
                    "content": "An array of get_terms() arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The WP_Term_Query object.",
                    "types": [
                        "\\WP_Term_Query"
                    ],
                    "variable": "$term_query"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "get_terms_args",
        "line": 360,
        "end_line": 360,
        "type": "filter",
        "doc": {
            "description": "Filters the terms query arguments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of get_terms() arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomy names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                }
            ]
        },
        "file": "wp-includes/class-wp-term-query.php"
    },
    {
        "name": "get_terms_defaults",
        "line": 244,
        "end_line": 244,
        "type": "filter",
        "doc": {
            "description": "Filters the terms query default arguments.",
            "long_description": "<p>Use {@see 'get_terms_args'} to filter the passed arguments.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of default get_terms() arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$defaults"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomy names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                }
            ]
        },
        "file": "wp-includes/class-wp-term-query.php"
    },
    {
        "name": "get_terms_fields",
        "line": 638,
        "end_line": 638,
        "type": "filter",
        "doc": {
            "description": "Filters the fields to select in the terms query.",
            "long_description": "<p>Field lists modified using this filter will only modify the term fields returned by the function when the <code>$fields</code> parameter set to 'count' or 'all'. In all other cases, the term fields in the results array will be determined by the <code>$fields</code> parameter alone.</p> <p>Use of this filter can result in unpredictable behavior, and is not recommended.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of fields to select for the terms query.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$selects"
                },
                {
                    "name": "param",
                    "content": "An array of term query arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomy names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                }
            ]
        },
        "file": "wp-includes/class-wp-term-query.php"
    },
    {
        "name": "get_terms_orderby",
        "line": 891,
        "end_line": 891,
        "type": "filter",
        "doc": {
            "description": "Filters the ORDERBY clause of the terms query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "<code>ORDERBY</code> clause of the terms query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$orderby"
                },
                {
                    "name": "param",
                    "content": "An array of term query arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomy names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                }
            ]
        },
        "file": "wp-includes/class-wp-term-query.php"
    },
    {
        "name": "get_the_archive_description",
        "line": 1665,
        "end_line": 1665,
        "type": "filter",
        "doc": {
            "description": "Filters the archive description.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "Archive description to be displayed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$description"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_the_archive_title",
        "line": 1618,
        "end_line": 1618,
        "type": "filter",
        "doc": {
            "description": "Filters the archive title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "Archive title to be displayed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_the_author_{$field}",
        "line": 188,
        "end_line": 188,
        "type": "filter",
        "doc": {
            "description": "Filters the value of the requested user metadata.",
            "long_description": "<p>The filter name is dynamic and depends on the $field parameter of the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.3.0",
                    "description": "The <code>$original_user_id</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The value of the metadata.",
                    "types": [
                        "string"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "The user ID for the value.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "The original user ID, as passed to the function.",
                    "types": [
                        "int",
                        "false"
                    ],
                    "variable": "$original_user_id"
                }
            ]
        },
        "file": "wp-includes/author-template.php"
    },
    {
        "name": "get_the_categories",
        "line": 97,
        "end_line": 97,
        "type": "filter",
        "doc": {
            "description": "Filters the array of categories to return for a post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added <code>$id</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of categories to return for the post.",
                    "types": [
                        "\\WP_Term[]"
                    ],
                    "variable": "$categories"
                },
                {
                    "name": "param",
                    "content": "ID of the post.",
                    "types": [
                        "int",
                        "false"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "get_the_date",
        "line": 2417,
        "end_line": 2417,
        "type": "filter",
        "doc": {
            "description": "Filters the date a post was published.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The formatted date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$the_date"
                },
                {
                    "name": "param",
                    "content": "PHP date format. Defaults to 'date_format' option                              if not specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "The post object or ID.",
                    "types": [
                        "int",
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_the_excerpt",
        "line": 425,
        "end_line": 425,
        "type": "filter",
        "doc": {
            "description": "Filters the retrieved post excerpt.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "Introduced the <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The post excerpt.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_excerpt"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "get_the_generator_{$type}",
        "line": 4631,
        "end_line": 4631,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML for the retrieved generator type.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$type</code>, refers to the generator type.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The HTML markup output to wp_head().",
                    "types": [
                        "string"
                    ],
                    "variable": "$gen"
                },
                {
                    "name": "param",
                    "content": "The type of generator. Accepts 'html', 'xhtml', 'atom',                     'rss2', 'rdf', 'comment', 'export'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_the_guid",
        "line": 232,
        "end_line": 232,
        "type": "filter",
        "doc": {
            "description": "Filters the Global Unique Identifier (guid) of the post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Global Unique Identifier (guid) of the post.",
                    "types": [
                        "string"
                    ],
                    "variable": "$guid"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "get_the_modified_date",
        "line": 2488,
        "end_line": 2488,
        "type": "filter",
        "doc": {
            "description": "Filters the date a post was last modified.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "Added the <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The formatted date or false if no post is found.",
                    "types": [
                        "string",
                        "bool"
                    ],
                    "variable": "$the_time"
                },
                {
                    "name": "param",
                    "content": "PHP date format. Defaults to value specified in                               'date_format' option.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "WP_Post object or null if no post is found.",
                    "types": [
                        "\\WP_Post",
                        "null"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_the_modified_time",
        "line": 2734,
        "end_line": 2734,
        "type": "filter",
        "doc": {
            "description": "Filters the localized time a post was last modified.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "Added the <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The formatted time or false if no post is found.",
                    "types": [
                        "string",
                        "bool"
                    ],
                    "variable": "$the_time"
                },
                {
                    "name": "param",
                    "content": "Format to use for retrieving the time the post was                               written. Accepts 'G', 'U', or php date format. Defaults                               to value specified in 'time_format' option.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "WP_Post object or null if no post is found.",
                    "types": [
                        "\\WP_Post",
                        "null"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_the_post_type_description",
        "line": 1699,
        "end_line": 1699,
        "type": "filter",
        "doc": {
            "description": "Filters the description for a post type archive.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "The post type description.",
                    "types": [
                        "string"
                    ],
                    "variable": "$description"
                },
                {
                    "name": "param",
                    "content": "The post type object.",
                    "types": [
                        "\\WP_Post_Type"
                    ],
                    "variable": "$post_type_obj"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_the_tags",
        "line": 1136,
        "end_line": 1136,
        "type": "filter",
        "doc": {
            "description": "Filters the array of tags for the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_the_terms()"
                },
                {
                    "name": "param",
                    "content": "An array of tags for the given post.",
                    "types": [
                        "\\WP_Term[]"
                    ],
                    "variable": "$terms"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "get_the_terms",
        "line": 1254,
        "end_line": 1254,
        "type": "filter",
        "doc": {
            "description": "Filters the list of terms attached to the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of attached terms, or WP_Error on failure.",
                    "types": [
                        "\\WP_Term[]",
                        "\\WP_Error"
                    ],
                    "variable": "$terms"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Name of the taxonomy.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "get_the_time",
        "line": 2546,
        "end_line": 2546,
        "type": "filter",
        "doc": {
            "description": "Filters the time a post was written.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The formatted time.",
                    "types": [
                        "string"
                    ],
                    "variable": "$the_time"
                },
                {
                    "name": "param",
                    "content": "Format to use for retrieving the time the post was written.                              Accepts 'G', 'U', or php date format value specified                              in 'time_format' option. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "WP_Post object or ID.",
                    "types": [
                        "int",
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "get_theme_starter_content",
        "line": 2344,
        "end_line": 2344,
        "type": "filter",
        "doc": {
            "description": "Filters the expanded array of starter content.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of starter content.",
                    "types": [
                        "array"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Array of theme-specific starter content configuration.",
                    "types": [
                        "array"
                    ],
                    "variable": "$config"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "get_to_ping",
        "line": 4794,
        "end_line": 4794,
        "type": "filter",
        "doc": {
            "description": "Filters the list of URLs yet to ping for the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "List of URLs yet to ping.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$to_ping"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "get_user_option_{$option}",
        "line": 502,
        "end_line": 502,
        "type": "filter",
        "doc": {
            "description": "Filters a specific user option value.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the user option name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Value for the user's option.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Name of the option being retrieved.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "WP_User object of the user whose option is being retrieved.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "get_usernumposts",
        "line": 388,
        "end_line": 388,
        "type": "filter",
        "doc": {
            "description": "Filters the number of posts a user has written.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "Added <code>$post_type</code> argument."
                },
                {
                    "name": "since",
                    "content": "4.3.1",
                    "description": "Added <code>$public_only</code> argument."
                },
                {
                    "name": "param",
                    "content": "The user's post count.",
                    "types": [
                        "int"
                    ],
                    "variable": "$count"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$userid"
                },
                {
                    "name": "param",
                    "content": "Single post type or array of post types to count the number of posts for.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$post_type"
                },
                {
                    "name": "param",
                    "content": "Whether to limit counted posts to public posts.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$public_only"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "get_users_drafts",
        "line": 317,
        "end_line": 317,
        "type": "filter",
        "doc": {
            "description": "Filters the user's drafts query string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "The user's drafts query string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$query"
                }
            ]
        },
        "file": "wp-admin/includes/user.php"
    },
    {
        "name": "get_wp_title_rss",
        "line": 115,
        "end_line": 115,
        "type": "filter",
        "doc": {
            "description": "Filters the blog title for use as the feed title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$sep</code> parameter was deprecated and renamed to <code>$deprecated</code>."
                },
                {
                    "name": "param",
                    "content": "The current blog title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "Unused.",
                    "types": [
                        "string"
                    ],
                    "variable": "$deprecated"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "get_{$adjacent}_post_excluded_terms",
        "line": 1741,
        "end_line": 1741,
        "type": "filter",
        "doc": {
            "description": "Filters the IDs of terms excluded from adjacent post queries.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$adjacent</code>, refers to the type of adjacency, 'next' or 'previous'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Array of excluded term IDs.",
                    "types": [
                        "array"
                    ],
                    "variable": "$excluded_terms"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_{$adjacent}_post_join",
        "line": 1817,
        "end_line": 1817,
        "type": "filter",
        "doc": {
            "description": "Filters the JOIN clause in the SQL for an adjacent post query.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$adjacent</code>, refers to the type of adjacency, 'next' or 'previous'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$taxonomy</code> and <code>$post</code> parameters."
                },
                {
                    "name": "param",
                    "content": "The JOIN clause in the SQL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$join"
                },
                {
                    "name": "param",
                    "content": "Whether post should be in a same taxonomy term.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$in_same_term"
                },
                {
                    "name": "param",
                    "content": "Array of excluded term IDs.",
                    "types": [
                        "array"
                    ],
                    "variable": "$excluded_terms"
                },
                {
                    "name": "param",
                    "content": "Taxonomy. Used to identify the term used when <code>$in_same_term</code> is true.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "WP_Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_{$adjacent}_post_sort",
        "line": 1850,
        "end_line": 1850,
        "type": "filter",
        "doc": {
            "description": "Filters the ORDER BY clause in the SQL for an adjacent post query.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$adjacent</code>, refers to the type of adjacency, 'next' or 'previous'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$post</code> parameter."
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$order</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The <code>ORDER BY</code> clause in the SQL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$order_by"
                },
                {
                    "name": "param",
                    "content": "WP_Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Sort order. 'DESC' for previous post, 'ASC' for next.",
                    "types": [
                        "string"
                    ],
                    "variable": "$order"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_{$adjacent}_post_where",
        "line": 1834,
        "end_line": 1834,
        "type": "filter",
        "doc": {
            "description": "Filters the WHERE clause in the SQL for an adjacent post query.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$adjacent</code>, refers to the type of adjacency, 'next' or 'previous'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$taxonomy</code> and <code>$post</code> parameters."
                },
                {
                    "name": "param",
                    "content": "The <code>WHERE</code> clause in the SQL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$where"
                },
                {
                    "name": "param",
                    "content": "Whether post should be in a same taxonomy term.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$in_same_term"
                },
                {
                    "name": "param",
                    "content": "Array of excluded term IDs.",
                    "types": [
                        "array"
                    ],
                    "variable": "$excluded_terms"
                },
                {
                    "name": "param",
                    "content": "Taxonomy. Used to identify the term used when <code>$in_same_term</code> is true.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "WP_Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "get_{$meta_type}_metadata",
        "line": 513,
        "end_line": 513,
        "type": "filter",
        "doc": {
            "description": "Filters whether to retrieve metadata of a specific type.",
            "long_description": "<p>The dynamic portion of the hook, <code>$meta_type</code>, refers to the meta object type (comment, post, term, or user). Returning a non-null value will effectively short-circuit the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The value get_metadata() should return - a single metadata value,                                     or an array of values.",
                    "types": [
                        "null",
                        "array",
                        "string"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Object ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$object_id"
                },
                {
                    "name": "param",
                    "content": "Meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Whether to return only the first value of the specified $meta_key.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$single"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "get_{$meta_type}_metadata_by_mid",
        "line": 634,
        "end_line": 634,
        "type": "filter",
        "doc": {
            "description": "Filters whether to retrieve metadata of a specific type by meta ID.",
            "long_description": "<p>The dynamic portion of the hook, <code>$meta_type</code>, refers to the meta object type (comment, post, term, or user). Returning a non-null value will effectively short-circuit the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "The value get_metadata_by_mid() should return.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Meta ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$meta_id"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "get_{$taxonomy}",
        "line": 870,
        "end_line": 870,
        "type": "filter",
        "doc": {
            "description": "Filters a taxonomy term object.",
            "long_description": "<p>The dynamic portion of the filter name, <code>$taxonomy</code>, refers to the slug of the term's taxonomy.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "<code>$_term</code> is now a <code>WP_Term</code> object."
                },
                {
                    "name": "param",
                    "content": "Term object.",
                    "types": [
                        "\\WP_Term"
                    ],
                    "variable": "$_term"
                },
                {
                    "name": "param",
                    "content": "The taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "getarchives_join",
        "line": 1875,
        "end_line": 1875,
        "type": "filter",
        "doc": {
            "description": "Filters the SQL JOIN clause for retrieving archives.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "Portion of SQL query containing JOIN clause.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sql_join"
                },
                {
                    "name": "param",
                    "content": "An array of default arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "getarchives_where",
        "line": 1865,
        "end_line": 1865,
        "type": "filter",
        "doc": {
            "description": "Filters the SQL WHERE clause for retrieving archives.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "Portion of SQL query containing the WHERE clause.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sql_where"
                },
                {
                    "name": "param",
                    "content": "An array of default arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "getimagesize_mimes_to_exts",
        "line": 2697,
        "end_line": 2706,
        "type": "filter",
        "doc": {
            "description": "Filters the list mapping image mime types to their respective extensions.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of image mime types and their matching extensions.",
                    "types": [
                        "array"
                    ],
                    "variable": "$mime_to_ext"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "gettext",
        "line": 187,
        "end_line": 187,
        "type": "filter",
        "doc": {
            "description": "Filters text with its translation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.11"
                },
                {
                    "name": "param",
                    "content": "Translated text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$translation"
                },
                {
                    "name": "param",
                    "content": "Text to translate.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "Text domain. Unique identifier for retrieving translated strings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "gettext_with_context",
        "line": 238,
        "end_line": 238,
        "type": "filter",
        "doc": {
            "description": "Filters text with its translation based on context information.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Translated text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$translation"
                },
                {
                    "name": "param",
                    "content": "Text to translate.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "Context information for the translators.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                },
                {
                    "name": "param",
                    "content": "Text domain. Unique identifier for retrieving translated strings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "global_terms_enabled",
        "line": 5316,
        "end_line": 5316,
        "type": "filter",
        "doc": {
            "description": "Filters whether global terms are enabled.",
            "long_description": "<p>Passing a non-null value to the filter will effectively short-circuit the function, returning the value of the 'global_terms_enabled' site option instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether global terms are enabled.",
                    "types": [
                        "null"
                    ],
                    "variable": "$enabled"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "got_rewrite",
        "line": 31,
        "end_line": 31,
        "type": "filter",
        "doc": {
            "description": "Filters whether Apache and mod_rewrite are present.",
            "long_description": "<p>This filter was previously used to force URL rewriting for other servers, like nginx. Use the {@see 'got_url_rewrite'} filter in got_url_rewrite() instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "got_url_rewrite()"
                },
                {
                    "name": "param",
                    "content": "Whether Apache and mod_rewrite are present.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$got_rewrite"
                }
            ]
        },
        "file": "wp-admin/includes/misc.php"
    },
    {
        "name": "got_url_rewrite",
        "line": 55,
        "end_line": 55,
        "type": "filter",
        "doc": {
            "description": "Filters whether URL rewriting is available.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether URL rewriting is available.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$got_url_rewrite"
                }
            ]
        },
        "file": "wp-admin/includes/misc.php"
    },
    {
        "name": "handle_bulk_actions-{$screen}",
        "line": 109,
        "end_line": 109,
        "type": "filter",
        "doc": {
            "description": "Fires when a custom bulk action should be handled.",
            "long_description": "<p>The redirect link should be modified with success or failure feedback from the action to be used to display feedback to the user.</p> <p>The dynamic portion of the hook name, <code>$screen</code>, refers to the current screen ID.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The redirect URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$redirect_url"
                },
                {
                    "name": "param",
                    "content": "The action being taken.",
                    "types": [
                        "string"
                    ],
                    "variable": "$doaction"
                },
                {
                    "name": "param",
                    "content": "The items to take the action on.",
                    "types": [
                        "array"
                    ],
                    "variable": "$items"
                }
            ]
        },
        "file": "wp-admin/edit-comments.php"
    },
    {
        "name": "handle_network_bulk_actions-{$screen}",
        "line": 139,
        "end_line": 139,
        "type": "filter",
        "doc": {
            "description": "Fires when a custom bulk action should be handled.",
            "long_description": "<p>The redirect link should be modified with success or failure feedback from the action to be used to display feedback to the user.</p> <p>The dynamic portion of the hook name, <code>$screen</code>, refers to the current screen ID.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The redirect URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$redirect_url"
                },
                {
                    "name": "param",
                    "content": "The action being taken.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action"
                },
                {
                    "name": "param",
                    "content": "The items to take the action on.",
                    "types": [
                        "array"
                    ],
                    "variable": "$items"
                },
                {
                    "name": "param",
                    "content": "The site ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$site_id"
                }
            ]
        },
        "file": "wp-admin/network/site-themes.php"
    },
    {
        "name": "has_nav_menu",
        "line": 194,
        "end_line": 194,
        "type": "filter",
        "doc": {
            "description": "Filters whether a nav menu is assigned to the specified location.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Whether there is a menu assigned to a location.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$has_nav_menu"
                },
                {
                    "name": "param",
                    "content": "Menu location.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                }
            ]
        },
        "file": "wp-includes/nav-menu.php"
    },
    {
        "name": "has_post_thumbnail",
        "line": 38,
        "end_line": 38,
        "type": "filter",
        "doc": {
            "description": "Filters whether a post has a post thumbnail.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "true if the post has a post thumbnail, otherwise false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$has_thumbnail"
                },
                {
                    "name": "param",
                    "content": "Post ID or WP_Post object. Default is global <code>$post</code>.",
                    "types": [
                        "int",
                        "\\WP_Post",
                        "null"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Post thumbnail ID or empty string.",
                    "types": [
                        "int",
                        "string"
                    ],
                    "variable": "$thumbnail_id"
                }
            ]
        },
        "file": "wp-includes/post-thumbnail-template.php"
    },
    {
        "name": "header_video_settings",
        "line": 1504,
        "end_line": 1504,
        "type": "filter",
        "doc": {
            "description": "Filters header video settings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of header video settings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$settings"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "heartbeat_nopriv_received",
        "line": 44,
        "end_line": 44,
        "type": "filter",
        "doc": {
            "description": "Filters Heartbeat Ajax response in no-privilege environments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The no-priv Heartbeat response.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The $_POST data sent.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "The screen id.",
                    "types": [
                        "string"
                    ],
                    "variable": "$screen_id"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "heartbeat_nopriv_send",
        "line": 55,
        "end_line": 55,
        "type": "filter",
        "doc": {
            "description": "Filters Heartbeat Ajax response in no-privilege environments when no data is passed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The no-priv Heartbeat response.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The screen id.",
                    "types": [
                        "string"
                    ],
                    "variable": "$screen_id"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "heartbeat_received",
        "line": 3370,
        "end_line": 3370,
        "type": "filter",
        "doc": {
            "description": "Filters the Heartbeat response received.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The Heartbeat response.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The $_POST data sent.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "The screen id.",
                    "types": [
                        "string"
                    ],
                    "variable": "$screen_id"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "heartbeat_send",
        "line": 3381,
        "end_line": 3381,
        "type": "filter",
        "doc": {
            "description": "Filters the Heartbeat response sent.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The Heartbeat response.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The screen id.",
                    "types": [
                        "string"
                    ],
                    "variable": "$screen_id"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "heartbeat_settings",
        "line": 1086,
        "end_line": 1086,
        "type": "filter",
        "doc": {
            "description": "Filters the Heartbeat settings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Heartbeat settings array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$settings"
                }
            ]
        },
        "file": "wp-includes/script-loader.php"
    },
    {
        "name": "hidden_columns",
        "line": 86,
        "end_line": 86,
        "type": "filter",
        "doc": {
            "description": "Filters the list of hidden columns.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "since",
                    "content": "4.4.1",
                    "description": "Added the <code>use_defaults</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of hidden columns.",
                    "types": [
                        "array"
                    ],
                    "variable": "$hidden"
                },
                {
                    "name": "param",
                    "content": "WP_Screen object of the current screen.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$screen"
                },
                {
                    "name": "param",
                    "content": "Whether to show the default columns.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$use_defaults"
                }
            ]
        },
        "file": "wp-admin/includes/screen.php"
    },
    {
        "name": "hidden_meta_boxes",
        "line": 191,
        "end_line": 191,
        "type": "filter",
        "doc": {
            "description": "Filters the list of hidden meta boxes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of hidden meta boxes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$hidden"
                },
                {
                    "name": "param",
                    "content": "WP_Screen object of the current screen.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$screen"
                },
                {
                    "name": "param",
                    "content": "Whether to show the default meta boxes.                                Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$use_defaults"
                }
            ]
        },
        "file": "wp-admin/includes/screen.php"
    },
    {
        "name": "home_url",
        "line": 3202,
        "end_line": 3202,
        "type": "filter",
        "doc": {
            "description": "Filters the home URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The complete home URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the home URL. Blank string if no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Scheme to give the home URL context. Accepts 'http', 'https',                                 'relative', 'rest', or null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$orig_scheme"
                },
                {
                    "name": "param",
                    "content": "Site ID, or null for the current site.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$blog_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "http_api_transports",
        "line": 529,
        "end_line": 529,
        "type": "filter",
        "doc": {
            "description": "Filters which HTTP transports are available and in what order.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of HTTP transports to check. Default array contains                             'curl' and 'streams', in that order.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$transports"
                },
                {
                    "name": "param",
                    "content": "HTTP request arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The URL to request.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "http_headers_useragent",
        "line": 191,
        "end_line": 191,
        "type": "filter",
        "doc": {
            "description": "Filters the user agent value sent with an HTTP request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "The <code>$url</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "WordPress user agent string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_agent"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "http_origin",
        "line": 406,
        "end_line": 406,
        "type": "filter",
        "doc": {
            "description": "Change the origin of an HTTP request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "The original origin for the request.",
                    "types": [
                        "string"
                    ],
                    "variable": "$origin"
                }
            ]
        },
        "file": "wp-includes/http.php"
    },
    {
        "name": "http_request_args",
        "line": 232,
        "end_line": 232,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments used in an HTTP request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of HTTP request arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "http_request_host_is_external",
        "line": 574,
        "end_line": 574,
        "type": "filter",
        "doc": {
            "description": "Check if HTTP request is external or not.",
            "long_description": "<p>Allows to change and allow external requests for the HTTP request.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether HTTP request is external or not.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$external"
                },
                {
                    "name": "param",
                    "content": "Host name of the requested URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$host"
                },
                {
                    "name": "param",
                    "content": "Requested URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/http.php"
    },
    {
        "name": "http_request_redirection_count",
        "line": 171,
        "end_line": 171,
        "type": "filter",
        "doc": {
            "description": "Filters the number of redirects allowed during an HTTP request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "The <code>$url</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Number of redirects allowed. Default 5.",
                    "types": [
                        "int"
                    ],
                    "variable": "$redirect_count"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "http_request_reject_unsafe_urls",
        "line": 201,
        "end_line": 201,
        "type": "filter",
        "doc": {
            "description": "Filters whether to pass URLs through wp_http_validate_url() in an HTTP request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "The <code>$url</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Whether to pass URLs through wp_http_validate_url(). Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$pass_url"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "http_request_timeout",
        "line": 161,
        "end_line": 161,
        "type": "filter",
        "doc": {
            "description": "Filters the timeout value for an HTTP request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "The <code>$url</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Time in seconds until a request times out. Default 5.",
                    "types": [
                        "int"
                    ],
                    "variable": "$timeout_value"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "http_request_version",
        "line": 181,
        "end_line": 181,
        "type": "filter",
        "doc": {
            "description": "Filters the version of the HTTP protocol used in a request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "The <code>$url</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Version of HTTP used. Accepts '1.0' and '1.1'. Default '1.0'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$version"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "http_response",
        "line": 445,
        "end_line": 445,
        "type": "filter",
        "doc": {
            "description": "Filters the HTTP API response immediately before the response is returned.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "HTTP response.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "HTTP request arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "https_local_ssl_verify",
        "line": 105,
        "end_line": 105,
        "type": "filter",
        "doc": {
            "description": "Filters whether SSL should be verified for local requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "The <code>$url</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Whether to verify the SSL connection. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$ssl_verify"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-wp-http-streams.php"
    },
    {
        "name": "https_ssl_verify",
        "line": 375,
        "end_line": 375,
        "type": "filter",
        "doc": {
            "description": "Filters whether SSL should be verified for non-local requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "The <code>$url</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Whether to verify the SSL connection. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$ssl_verify"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "human_time_diff",
        "line": 3765,
        "end_line": 3765,
        "type": "filter",
        "doc": {
            "description": "Filters the human readable difference between two timestamps.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "The difference in human readable text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$since"
                },
                {
                    "name": "param",
                    "content": "The difference in seconds.",
                    "types": [
                        "int"
                    ],
                    "variable": "$diff"
                },
                {
                    "name": "param",
                    "content": "Unix timestamp from which the difference begins.",
                    "types": [
                        "int"
                    ],
                    "variable": "$from"
                },
                {
                    "name": "param",
                    "content": "Unix timestamp to end the time difference.",
                    "types": [
                        "int"
                    ],
                    "variable": "$to"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "icon_dir",
        "line": 6097,
        "end_line": 6097,
        "type": "filter",
        "doc": {
            "description": "Filters the icon directory path.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Icon directory absolute path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "icon_dir_uri",
        "line": 6106,
        "end_line": 6106,
        "type": "filter",
        "doc": {
            "description": "Filters the icon directory URI.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Icon directory URI.",
                    "types": [
                        "string"
                    ],
                    "variable": "$uri"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "icon_dirs",
        "line": 6115,
        "end_line": 6115,
        "type": "filter",
        "doc": {
            "description": "Filters the array of icon directory URIs.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of icon directory URIs keyed by directory absolute path.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$uris"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "iis7_supports_permalinks",
        "line": 5013,
        "end_line": 5013,
        "type": "filter",
        "doc": {
            "description": "Filters whether IIS 7+ supports pretty permalinks.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether IIS7 supports permalinks. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$supports_permalinks"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "iis7_url_rewrite_rules",
        "line": 1615,
        "end_line": 1615,
        "type": "filter",
        "doc": {
            "description": "Filters the list of rewrite rules formatted for output to a web.config.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Rewrite rules formatted for IIS web.config.",
                    "types": [
                        "string"
                    ],
                    "variable": "$rules"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "illegal_user_logins",
        "line": 1580,
        "end_line": 1580,
        "type": "filter",
        "doc": {
            "description": "Filters the list of blacklisted usernames.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Array of blacklisted usernames.",
                    "types": [
                        "array"
                    ],
                    "variable": "$usernames"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "image_add_caption_shortcode",
        "line": 247,
        "end_line": 247,
        "type": "filter",
        "doc": {
            "description": "Filters the image HTML markup including the caption shortcode.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "The image HTML markup with caption shortcode.",
                    "types": [
                        "string"
                    ],
                    "variable": "$shcode"
                },
                {
                    "name": "param",
                    "content": "The image HTML markup.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "image_add_caption_text",
        "line": 202,
        "end_line": 202,
        "type": "filter",
        "doc": {
            "description": "Filters the caption text.",
            "long_description": "<p>Note: If the caption text is empty, the caption shortcode will not be appended to the image HTML when inserted into the editor.</p> <p>Passing an empty value also prevents the {@see 'image_add_caption_shortcode'} Filters from being evaluated at the end of image_add_caption().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "The original caption text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$caption"
                },
                {
                    "name": "param",
                    "content": "The attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "image_downsize",
        "line": 207,
        "end_line": 207,
        "type": "filter",
        "doc": {
            "description": "Filters whether to preempt the output of image_downsize().",
            "long_description": "<p>Passing a truthy value to the filter will effectively short-circuit down-sizing the image, returning that value as output instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether to short-circuit the image downsize. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$downsize"
                },
                {
                    "name": "param",
                    "content": "Attachment ID for image.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                },
                {
                    "name": "param",
                    "content": "Size of image. Image size or array of width and height values (in that order).                               Default 'medium'.",
                    "types": [
                        "array",
                        "string"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "image_edit_before_change",
        "line": 573,
        "end_line": 573,
        "type": "filter",
        "doc": {
            "description": "Filters the GD image resource before applying changes to the image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.5.0",
                    "description": "Use wp_image_editor_before_change instead."
                },
                {
                    "name": "param",
                    "content": "GD image resource.",
                    "types": [
                        "resource"
                    ],
                    "variable": "$image"
                },
                {
                    "name": "param",
                    "content": "Array of change operations.",
                    "types": [
                        "array"
                    ],
                    "variable": "$changes"
                }
            ]
        },
        "file": "wp-admin/includes/image-edit.php"
    },
    {
        "name": "image_editor_default_mime_type",
        "line": 326,
        "end_line": 326,
        "type": "filter",
        "doc": {
            "description": "Filters default mime type prior to getting the file extension.",
            "long_description": "",
            "tags": [
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_get_mime_types()"
                },
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Mime type string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mime_type"
                }
            ]
        },
        "file": "wp-includes/class-wp-image-editor.php"
    },
    {
        "name": "image_editor_save_pre",
        "line": 275,
        "end_line": 275,
        "type": "filter",
        "doc": {
            "description": "Filters the WP_Image_Editor instance for the image to be streamed to the browser.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "The image editor instance.",
                    "types": [
                        "\\WP_Image_Editor"
                    ],
                    "variable": "$image"
                },
                {
                    "name": "param",
                    "content": "The attachment post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-admin/includes/image-edit.php"
    },
    {
        "name": "image_get_intermediate_size",
        "line": 844,
        "end_line": 844,
        "type": "filter",
        "doc": {
            "description": "Filters the output of image_get_intermediate_size()",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "image_get_intermediate_size()"
                },
                {
                    "name": "param",
                    "content": "Array of file relative path, width, and height on success. May also include                              file absolute path and URL.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "The post_id of the image attachment",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Registered image size or flat array of initially-requested height and width                              dimensions (in that order).",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "image_make_intermediate_size",
        "line": 464,
        "end_line": 464,
        "type": "filter",
        "doc": {
            "description": "Filters the name of the saved image file.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "Name of the file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filename"
                }
            ]
        },
        "file": "wp-includes/class-wp-image-editor-gd.php"
    },
    {
        "name": "image_memory_limit",
        "line": 6577,
        "end_line": 6577,
        "type": "filter",
        "doc": {
            "description": "Filters the memory limit allocated for image manipulation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "The default now takes the original <code>memory_limit</code> into account."
                },
                {
                    "name": "param",
                    "content": "Maximum memory limit to allocate for images.                                   Default <code>WP_MAX_MEMORY_LIMIT</code> or the original                                   php.ini <code>memory_limit</code>, whichever is higher.                                   Accepts an integer (bytes), or a shorthand string                                   notation, such as '256M'.",
                    "types": [
                        "int",
                        "string"
                    ],
                    "variable": "$filtered_limit"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "image_resize_dimensions",
        "line": 552,
        "end_line": 552,
        "type": "filter",
        "doc": {
            "description": "Filters whether to preempt calculating the image resize dimensions.",
            "long_description": "<p>Passing a non-null value to the filter will effectively short-circuit image_resize_dimensions(), returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to preempt output of the resize dimensions.",
                    "types": [
                        "null",
                        "mixed"
                    ],
                    "variable": "$null"
                },
                {
                    "name": "param",
                    "content": "Original width in pixels.",
                    "types": [
                        "int"
                    ],
                    "variable": "$orig_w"
                },
                {
                    "name": "param",
                    "content": "Original height in pixels.",
                    "types": [
                        "int"
                    ],
                    "variable": "$orig_h"
                },
                {
                    "name": "param",
                    "content": "New width in pixels.",
                    "types": [
                        "int"
                    ],
                    "variable": "$dest_w"
                },
                {
                    "name": "param",
                    "content": "New height in pixels.",
                    "types": [
                        "int"
                    ],
                    "variable": "$dest_h"
                },
                {
                    "name": "param",
                    "content": "Whether to crop image to specified width and height or resize.                           An array can specify positioning of the crop area. Default false.",
                    "types": [
                        "bool",
                        "array"
                    ],
                    "variable": "$crop"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "image_save_pre",
        "line": 295,
        "end_line": 295,
        "type": "filter",
        "doc": {
            "description": "Filters the GD image resource to be streamed to the browser.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.5.0",
                    "description": "Use image_editor_save_pre instead."
                },
                {
                    "name": "param",
                    "content": "Image resource to be streamed.",
                    "types": [
                        "resource"
                    ],
                    "variable": "$image"
                },
                {
                    "name": "param",
                    "content": "The attachment post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-admin/includes/image-edit.php"
    },
    {
        "name": "image_send_to_editor",
        "line": 166,
        "end_line": 166,
        "type": "filter",
        "doc": {
            "description": "Filters the image HTML markup to send to the editor when inserting an image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The image HTML markup to send.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "The attachment id.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                },
                {
                    "name": "param",
                    "content": "The image caption.",
                    "types": [
                        "string"
                    ],
                    "variable": "$caption"
                },
                {
                    "name": "param",
                    "content": "The image title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "The image alignment.",
                    "types": [
                        "string"
                    ],
                    "variable": "$align"
                },
                {
                    "name": "param",
                    "content": "The image source URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Size of image. Image size or array of width and height values                              (in that order). Default 'medium'.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "The image alternative, or alt, text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$alt"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "image_send_to_editor_url",
        "line": 926,
        "end_line": 926,
        "type": "filter",
        "doc": {
            "description": "Filters the image URL sent to the editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "HTML markup sent to the editor for an image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "Image source URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$src"
                },
                {
                    "name": "param",
                    "content": "Image alternate, or alt, text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$alt"
                },
                {
                    "name": "param",
                    "content": "The image alignment. Default 'alignnone'. Possible values include                      'alignleft', 'aligncenter', 'alignright', 'alignnone'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$align"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "image_size_names_choose",
        "line": 1134,
        "end_line": 1142,
        "type": "filter",
        "doc": {
            "description": "Filters the names and labels of the default image sizes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "Array of image size labels keyed by their name. Default values                             include 'Thumbnail', 'Medium', 'Large', and 'Full Size'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$size_names"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "image_strip_meta",
        "line": 328,
        "end_line": 328,
        "type": "filter",
        "doc": {
            "description": "Filters whether to strip metadata from images when they're resized.",
            "long_description": "<p>This filter only applies when resizing using the Imagick editor since GD always strips profiles by default.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether to strip image metadata during resizing. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$strip_meta"
                }
            ]
        },
        "file": "wp-includes/class-wp-image-editor-imagick.php"
    },
    {
        "name": "img_caption_shortcode",
        "line": 1696,
        "end_line": 1696,
        "type": "filter",
        "doc": {
            "description": "Filters the default caption shortcode output.",
            "long_description": "<p>If the filtered output isn't empty, it will be used instead of generating the default caption template.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "img_caption_shortcode()"
                },
                {
                    "name": "param",
                    "content": "The caption output. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Attributes of the caption shortcode.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "The image element, possibly wrapped in a hyperlink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "img_caption_shortcode_width",
        "line": 1762,
        "end_line": 1762,
        "type": "filter",
        "doc": {
            "description": "Filters the width of an image's caption.",
            "long_description": "<p>By default, the caption is 10 pixels greater than the width of the image, to prevent post content from running up against a floated image.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "img_caption_shortcode()"
                },
                {
                    "name": "param",
                    "content": "Width of the caption in pixels. To remove this inline style,                         return zero.",
                    "types": [
                        "int"
                    ],
                    "variable": "$width"
                },
                {
                    "name": "param",
                    "content": "Attributes of the caption shortcode.",
                    "types": [
                        "array"
                    ],
                    "variable": "$atts"
                },
                {
                    "name": "param",
                    "content": "The image element, possibly wrapped in a hyperlink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "import_upload_size_limit",
        "line": 957,
        "end_line": 957,
        "type": "filter",
        "doc": {
            "description": "Filters the maximum allowed upload size for import files.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_max_upload_size()"
                },
                {
                    "name": "param",
                    "content": "Allowed upload size. Default 1 MB.",
                    "types": [
                        "int"
                    ],
                    "variable": "$max_upload_size"
                }
            ]
        },
        "file": "wp-admin/includes/template.php"
    },
    {
        "name": "includes_url",
        "line": 3340,
        "end_line": 3340,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to the includes directory.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The complete URL to the includes directory including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the URL to the wp-includes directory. Blank string                     if no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "incompatible_sql_modes",
        "line": 872,
        "end_line": 872,
        "type": "filter",
        "doc": {
            "description": "Filters the list of incompatible SQL modes to exclude.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "An array of incompatible modes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$incompatible_modes"
                }
            ]
        },
        "file": "wp-includes/wp-db.php"
    },
    {
        "name": "insert_user_meta",
        "line": 1836,
        "end_line": 1836,
        "type": "filter",
        "doc": {
            "description": "Filters a user's meta values and keys immediately after the user is created or updated and before any user meta is inserted or updated.",
            "long_description": "<p>Does not include contact methods. These are added using <code>wp_get_user_contact_methods( $user )</code>.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "{     Default meta values and keys for the user.     @type string   $nickname             The user's nickname. Default is the user's username.     @type string   $first_name           The user's first name.     @type string   $last_name            The user's last name.     @type string   $description          The user's description.     @type bool     $rich_editing         Whether to enable the rich-editor for the user. False if not empty.     @type bool     $syntax_highlighting  Whether to enable the rich code editor for the user. False if not empty.     @type bool     $comment_shortcuts    Whether to enable keyboard shortcuts for the user. Default false.     @type string   $admin_color          The color scheme for a user's admin screen. Default 'fresh'.     @type int|bool $use_ssl              Whether to force SSL on the user's admin area. 0|false if SSL is                                          not forced.     @type bool     $show_admin_bar_front Whether to show the admin bar on the front end for the user.                                          Default true.     @type string   $locale               User's locale. Default empty. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                },
                {
                    "name": "param",
                    "content": "User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "Whether the user is being updated rather than created.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$update"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "insert_with_markers_inline_instructions",
        "line": 150,
        "end_line": 150,
        "type": "filter",
        "doc": {
            "description": "Filters the inline instructions inserted before the dynamically generated content.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "Array of lines with inline instructions.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$instructions"
                },
                {
                    "name": "param",
                    "content": "The marker being inserted.",
                    "types": [
                        "string"
                    ],
                    "variable": "$marker"
                }
            ]
        },
        "file": "wp-admin/includes/misc.php"
    },
    {
        "name": "install_plugin_complete_actions",
        "line": 135,
        "end_line": 135,
        "type": "filter",
        "doc": {
            "description": "Filters the list of action links available following a single plugin installation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of plugin action links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$install_actions"
                },
                {
                    "name": "param",
                    "content": "Object containing WordPress.org API plugin data. Empty                                  for non-API installs, such as when a plugin is installed                                  via upload.",
                    "types": [
                        "object"
                    ],
                    "variable": "$api"
                },
                {
                    "name": "param",
                    "content": "Path to the plugin file relative to the plugins directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plugin_file"
                }
            ]
        },
        "file": "wp-admin/includes/class-plugin-installer-skin.php"
    },
    {
        "name": "install_plugins_nonmenu_tabs",
        "line": 136,
        "end_line": 136,
        "type": "filter",
        "doc": {
            "description": "Filters tabs not associated with a menu item on the Plugin Install screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The tabs that don't have a menu item on the Plugin Install screen.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$nonmenu_tabs"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugin-install-list-table.php"
    },
    {
        "name": "install_plugins_table_api_args_{$tab}",
        "line": 219,
        "end_line": 219,
        "type": "filter",
        "doc": {
            "description": "Filters API request arguments for each Plugin Install screen tab.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$tab</code>, refers to the plugin install tabs. Default tabs include 'featured', 'popular', 'recommended', 'favorites', and 'upload'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Plugin Install API arguments.",
                    "types": [
                        "array",
                        "bool"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugin-install-list-table.php"
    },
    {
        "name": "install_plugins_tabs",
        "line": 127,
        "end_line": 127,
        "type": "filter",
        "doc": {
            "description": "Filters the tabs shown on the Plugin Install screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The tabs shown on the Plugin Install screen. Defaults include 'featured', 'popular',                      'recommended', 'favorites', and 'upload'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$tabs"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugin-install-list-table.php"
    },
    {
        "name": "install_theme_complete_actions",
        "line": 145,
        "end_line": 145,
        "type": "filter",
        "doc": {
            "description": "Filters the list of action links available following a single theme installation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of theme action links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$install_actions"
                },
                {
                    "name": "param",
                    "content": "Object containing WordPress.org API theme data.",
                    "types": [
                        "object"
                    ],
                    "variable": "$api"
                },
                {
                    "name": "param",
                    "content": "Theme directory name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet"
                },
                {
                    "name": "param",
                    "content": "Theme object.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$theme_info"
                }
            ]
        },
        "file": "wp-admin/includes/class-theme-installer-skin.php"
    },
    {
        "name": "install_themes_nonmenu_tabs",
        "line": 82,
        "end_line": 82,
        "type": "filter",
        "doc": {
            "description": "Filters tabs not associated with a menu item on the Install Themes screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The tabs that don't have a menu item on                               the Install Themes screen.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$nonmenu_tabs"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-theme-install-list-table.php"
    },
    {
        "name": "install_themes_table_api_args_{$tab}",
        "line": 142,
        "end_line": 142,
        "type": "filter",
        "doc": {
            "description": "Filters API request arguments for each Install Themes screen tab.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$tab</code>, refers to the theme install tabs. Default tabs are 'dashboard', 'search', 'upload', 'featured', 'new', and 'updated'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of themes API arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-theme-install-list-table.php"
    },
    {
        "name": "install_themes_tabs",
        "line": 151,
        "end_line": 151,
        "type": "filter",
        "doc": {
            "description": "Filters the tabs shown on the Add Themes screen.",
            "long_description": "<p>This filter is for backward compatibility only, for the suppression of the upload tab.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of the tabs shown on the Add Themes screen. Default is 'upload'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$tabs"
                }
            ]
        },
        "file": "wp-admin/theme-install.php"
    },
    {
        "name": "intermediate_image_sizes",
        "line": 870,
        "end_line": 870,
        "type": "filter",
        "doc": {
            "description": "Filters the list of intermediate image sizes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of intermediate image sizes. Defaults                             are 'thumbnail', 'medium', 'medium_large', 'large'.",
                    "types": [
                        "array"
                    ],
                    "variable": "$default_sizes"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "intermediate_image_sizes_advanced",
        "line": 330,
        "end_line": 330,
        "type": "filter",
        "doc": {
            "description": "Filters the image sizes automatically generated when uploading an image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$image_meta</code> argument."
                },
                {
                    "name": "since",
                    "content": "5.3.0",
                    "description": "Added the <code>$attachment_id</code> argument."
                },
                {
                    "name": "param",
                    "content": "Associative array of image sizes to be created.",
                    "types": [
                        "array"
                    ],
                    "variable": "$new_sizes"
                },
                {
                    "name": "param",
                    "content": "The image meta data: width, height, file, sizes, etc.",
                    "types": [
                        "array"
                    ],
                    "variable": "$image_meta"
                },
                {
                    "name": "param",
                    "content": "The attachment post ID for the image.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "is_active_sidebar",
        "line": 946,
        "end_line": 946,
        "type": "filter",
        "doc": {
            "description": "Filters whether a dynamic sidebar is considered \"active\".",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether or not the sidebar should be considered \"active\".                                      In other words, whether the sidebar contains any widgets.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_active_sidebar"
                },
                {
                    "name": "param",
                    "content": "Index, name, or ID of the dynamic sidebar.",
                    "types": [
                        "int",
                        "string"
                    ],
                    "variable": "$index"
                }
            ]
        },
        "file": "wp-includes/widgets.php"
    },
    {
        "name": "is_email",
        "line": 3396,
        "end_line": 3396,
        "type": "filter",
        "doc": {
            "description": "Filters whether an email address is valid.",
            "long_description": "<p>This filter is evaluated under several different contexts, such as 'email_too_short', 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits', 'domain_no_periods', 'sub_hyphen_limits', 'sub_invalid_chars', or no specific context.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The email address if successfully passed the is_email() checks, false otherwise.",
                    "types": [
                        "string",
                        "false"
                    ],
                    "variable": "$is_email"
                },
                {
                    "name": "param",
                    "content": "The email address being checked.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email"
                },
                {
                    "name": "param",
                    "content": "Context under which the email was tested.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "is_email_address_unsafe",
        "line": 425,
        "end_line": 425,
        "type": "filter",
        "doc": {
            "description": "Filters whether an email address is unsafe.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether the email address is \"unsafe\". Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_email_address_unsafe"
                },
                {
                    "name": "param",
                    "content": "User email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "is_header_video_active",
        "line": 1551,
        "end_line": 1551,
        "type": "filter",
        "doc": {
            "description": "Modify whether the custom header video is eligible to show on the current page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the custom header video should be shown. Returns the value                         of the theme setting for the <code>custom-header</code>'s <code>video-active-callback</code>.                         If no callback is set, the default value is that of <code>is_front_page()</code>.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show_video"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "is_multi_author",
        "line": 559,
        "end_line": 559,
        "type": "filter",
        "doc": {
            "description": "Filters whether the site has more than one author with published posts.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether $is_multi_author should evaluate as true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_multi_author"
                }
            ]
        },
        "file": "wp-includes/author-template.php"
    },
    {
        "name": "is_protected_endpoint",
        "line": 848,
        "end_line": 848,
        "type": "filter",
        "doc": {
            "description": "Filters whether the current request is against a protected endpoint.",
            "long_description": "<p>This filter is only fired when an endpoint is requested which is not already protected by WordPress core. As such, it exclusively allows providing further protected endpoints in addition to the admin backend, login pages and protected AJAX actions.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether the currently requested endpoint is protected. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_protected_endpoint"
                }
            ]
        },
        "file": "wp-includes/load.php"
    },
    {
        "name": "is_protected_meta",
        "line": 1051,
        "end_line": 1051,
        "type": "filter",
        "doc": {
            "description": "Filters whether a meta key is considered protected.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether the key is considered protected.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$protected"
                },
                {
                    "name": "param",
                    "content": "Meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Type of object metadata is for (e.g., comment, post, term, or user).",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$meta_type"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "is_sticky",
        "line": 2285,
        "end_line": 2285,
        "type": "filter",
        "doc": {
            "description": "Filters whether a post is sticky.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "Whether a post is sticky.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_sticky"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "is_wide_widget_in_customizer",
        "line": 591,
        "end_line": 591,
        "type": "filter",
        "doc": {
            "description": "Filters whether the given widget is considered \"wide\".",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether the widget is wide, Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_wide"
                },
                {
                    "name": "param",
                    "content": "Widget ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$widget_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-widgets.php"
    },
    {
        "name": "jpeg_quality",
        "line": 255,
        "end_line": 255,
        "type": "filter",
        "doc": {
            "description": "Filters the JPEG compression quality for backward-compatibility.",
            "long_description": "<p>Applies only during initial editor instantiation, or when set_quality() is run manually without the <code>$quality</code> argument.</p> <p>set_quality() has priority over the filter.</p> <p>The filter is evaluated under two contexts: 'image_resize', and 'edit_image', (when a JPEG image is saved to file).</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Quality level between 0 (low) and 100 (high) of the JPEG.",
                    "types": [
                        "int"
                    ],
                    "variable": "$quality"
                },
                {
                    "name": "param",
                    "content": "Context of the filter.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/class-wp-image-editor.php"
    },
    {
        "name": "js_escape",
        "line": 4431,
        "end_line": 4431,
        "type": "filter",
        "doc": {
            "description": "Filters a string cleaned and escaped for output in JavaScript.",
            "long_description": "<p>Text passed to esc_js() is stripped of invalid or special characters, and properly slashed for output.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.6"
                },
                {
                    "name": "param",
                    "content": "The text after it has been escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$safe_text"
                },
                {
                    "name": "param",
                    "content": "The text prior to being escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "kses_allowed_protocols",
        "line": 5997,
        "end_line": 5997,
        "type": "filter",
        "doc": {
            "description": "Filters the list of protocols allowed in HTML attributes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of allowed protocols e.g. 'http', 'ftp', 'tel', and more.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$protocols"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "lang_codes",
        "line": 534,
        "end_line": 534,
        "type": "filter",
        "doc": {
            "description": "Filters the language codes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Array of key/value pairs of language codes where key is the short version.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$lang_codes"
                },
                {
                    "name": "param",
                    "content": "A two-letter designation of the language.",
                    "types": [
                        "string"
                    ],
                    "variable": "$code"
                }
            ]
        },
        "file": "wp-admin/includes/ms.php"
    },
    {
        "name": "language_attributes",
        "line": 3979,
        "end_line": 3979,
        "type": "filter",
        "doc": {
            "description": "Filters the language attributes for display in the html tag.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "4.3.0",
                    "description": "Added the <code>$doctype</code> parameter."
                },
                {
                    "name": "param",
                    "content": "A space-separated list of language attributes.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "The type of html document (xhtml|html).",
                    "types": [
                        "string"
                    ],
                    "variable": "$doctype"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "link_category",
        "line": 276,
        "end_line": 276,
        "type": "filter",
        "doc": {
            "description": "Filters the category name.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The category name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cat_name"
                }
            ]
        },
        "file": "wp-includes/bookmark-template.php"
    },
    {
        "name": "link_title",
        "line": 81,
        "end_line": 81,
        "type": "filter",
        "doc": {
            "description": "Filters the OPML outline link title text.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The OPML outline title text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-links-opml.php"
    },
    {
        "name": "list_cats",
        "line": 416,
        "end_line": 416,
        "type": "filter",
        "doc": {
            "description": "Filters a taxonomy drop-down display element.",
            "long_description": "<p>A variety of taxonomy drop-down display elements can be modified just prior to display via this filter. Filterable arguments include 'show_option_none', 'show_option_all', and various forms of the term name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_dropdown_categories()"
                },
                {
                    "name": "param",
                    "content": "Category name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$element"
                },
                {
                    "name": "param",
                    "content": "The category object, or null if there's no corresponding category.",
                    "types": [
                        "\\WP_Term",
                        "null"
                    ],
                    "variable": "$category"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "list_pages",
        "line": 86,
        "end_line": 86,
        "type": "filter",
        "doc": {
            "description": "Filters the page title when creating an HTML drop-down list of pages.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Page title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "Page data object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$page"
                }
            ]
        },
        "file": "wp-includes/class-walker-page-dropdown.php"
    },
    {
        "name": "list_table_primary_column",
        "line": 1018,
        "end_line": 1018,
        "type": "filter",
        "doc": {
            "description": "Filters the name of the primary column for the current list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Column name default for the specific list table, e.g. 'name'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$default"
                },
                {
                    "name": "param",
                    "content": "Screen ID for specific list table, e.g. 'plugins'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-list-table.php"
    },
    {
        "name": "list_terms_exclusions",
        "line": 474,
        "end_line": 474,
        "type": "filter",
        "doc": {
            "description": "Filters the terms to exclude from the terms query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "<code>NOT IN</code> clause of the terms query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$exclusions"
                },
                {
                    "name": "param",
                    "content": "An array of terms query arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomy names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                }
            ]
        },
        "file": "wp-includes/class-wp-term-query.php"
    },
    {
        "name": "load_default_embeds",
        "line": 188,
        "end_line": 188,
        "type": "filter",
        "doc": {
            "description": "Filters whether to load the default embed handlers.",
            "long_description": "<p>Returning a falsey value will prevent loading the default embed handlers.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether to load the embeds library. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$maybe_load_embeds"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "load_default_widgets",
        "line": 4447,
        "end_line": 4447,
        "type": "filter",
        "doc": {
            "description": "Filters whether to load the Widgets library.",
            "long_description": "<p>Passing a falsey value to the filter will effectively short-circuit the Widgets library from loading.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether to load the Widgets library.                                    Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$wp_maybe_load_widgets"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "load_image_to_edit",
        "line": 908,
        "end_line": 908,
        "type": "filter",
        "doc": {
            "description": "Filters the current image being loaded for editing.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Current image.",
                    "types": [
                        "resource"
                    ],
                    "variable": "$image"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attachment_id"
                },
                {
                    "name": "param",
                    "content": "Image size.",
                    "types": [
                        "string"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "load_image_to_edit_attachmenturl",
        "line": 966,
        "end_line": 966,
        "type": "filter",
        "doc": {
            "description": "Filters the image URL if not in the local filesystem.",
            "long_description": "<p>The filter is only evaluated if fopen is enabled on the server.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Current image URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$image_url"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attachment_id"
                },
                {
                    "name": "param",
                    "content": "Size of the image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "load_image_to_edit_filesystempath",
        "line": 951,
        "end_line": 951,
        "type": "filter",
        "doc": {
            "description": "Filters the path to the current image.",
            "long_description": "<p>The filter is evaluated for all image sizes except 'full'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Path to the current image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attachment_id"
                },
                {
                    "name": "param",
                    "content": "Size of the image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "load_image_to_edit_path",
        "line": 978,
        "end_line": 978,
        "type": "filter",
        "doc": {
            "description": "Filters the returned path or URL of the current image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "File path or URL to current image, or false.",
                    "types": [
                        "string",
                        "bool"
                    ],
                    "variable": "$filepath"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attachment_id"
                },
                {
                    "name": "param",
                    "content": "Size of the image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "load_script_textdomain_relative_path",
        "line": 1022,
        "end_line": 1022,
        "type": "filter",
        "doc": {
            "description": "Filters the relative path of scripts used for finding translation files.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.2"
                },
                {
                    "name": "param",
                    "content": "The relative path of the script. False if it could not be determined.",
                    "types": [
                        "string"
                    ],
                    "variable": "$relative"
                },
                {
                    "name": "param",
                    "content": "The full source url of the script.",
                    "types": [
                        "string"
                    ],
                    "variable": "$src"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "load_script_translation_file",
        "line": 1091,
        "end_line": 1091,
        "type": "filter",
        "doc": {
            "description": "Filters the file path for loading script translations for the given script handle and text domain.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.2"
                },
                {
                    "name": "param",
                    "content": "Path to the translation file to load. False if there isn't one.",
                    "types": [
                        "string",
                        "false"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "Name of the script to register a translation domain to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$handle"
                },
                {
                    "name": "param",
                    "content": "The text domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "load_script_translations",
        "line": 1109,
        "end_line": 1109,
        "type": "filter",
        "doc": {
            "description": "Filters script translations for the given file, script handle and text domain.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.2"
                },
                {
                    "name": "param",
                    "content": "JSON-encoded translation data.",
                    "types": [
                        "string"
                    ],
                    "variable": "$translations"
                },
                {
                    "name": "param",
                    "content": "Path to the translation file that was loaded.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "Name of the script to register a translation domain to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$handle"
                },
                {
                    "name": "param",
                    "content": "The text domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "load_textdomain_mofile",
        "line": 667,
        "end_line": 667,
        "type": "filter",
        "doc": {
            "description": "Filters MO file path for loading translations for a specific text domain.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Path to the MO file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mofile"
                },
                {
                    "name": "param",
                    "content": "Text domain. Unique identifier for retrieving translated strings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "locale",
        "line": 41,
        "end_line": 41,
        "type": "filter",
        "doc": {
            "description": "Filters the locale ID of the WordPress installation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The locale ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$locale"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "locale_stylesheet_uri",
        "line": 293,
        "end_line": 293,
        "type": "filter",
        "doc": {
            "description": "Filters the localized stylesheet URI.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Localized stylesheet URI.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet_uri"
                },
                {
                    "name": "param",
                    "content": "Stylesheet directory URI.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet_dir_uri"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "log_query_custom_data",
        "line": 2075,
        "end_line": 2075,
        "type": "filter",
        "doc": {
            "description": "Filters the custom query data being logged.",
            "long_description": "<p>Caution should be used when modifying any of this data, it is recommended that any additional information you need to store about a query be added as a new associative entry to the fourth element $query_data.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "Custom query data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_data"
                },
                {
                    "name": "param",
                    "content": "The query's SQL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$query"
                },
                {
                    "name": "param",
                    "content": "Total time spent on the query, in seconds.",
                    "types": [
                        "float"
                    ],
                    "variable": "$query_time"
                },
                {
                    "name": "param",
                    "content": "Comma separated list of the calling functions.",
                    "types": [
                        "string"
                    ],
                    "variable": "$query_callstack"
                },
                {
                    "name": "param",
                    "content": "Unix timestamp of the time at the start of the query.",
                    "types": [
                        "float"
                    ],
                    "variable": "$query_start"
                }
            ]
        },
        "file": "wp-includes/wp-db.php"
    },
    {
        "name": "login_body_class",
        "line": 189,
        "end_line": 189,
        "type": "filter",
        "doc": {
            "description": "Filters the login page body classes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of body classes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$classes"
                },
                {
                    "name": "param",
                    "content": "The action that brought the visitor to the login page.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "login_errors",
        "line": 251,
        "end_line": 251,
        "type": "filter",
        "doc": {
            "description": "Filters the error messages displayed above the login form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Login error message.",
                    "types": [
                        "string"
                    ],
                    "variable": "$errors"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "login_form_bottom",
        "line": 523,
        "end_line": 523,
        "type": "filter",
        "doc": {
            "description": "Filters content to display at the bottom of the login form.",
            "long_description": "<p>The filter evaluates just preceding the closing form tag element.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Content to display. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Array of login form arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "login_form_defaults",
        "line": 486,
        "end_line": 486,
        "type": "filter",
        "doc": {
            "description": "Filters the default login form output arguments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_login_form()"
                },
                {
                    "name": "param",
                    "content": "An array of default login form arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$defaults"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "login_form_middle",
        "line": 511,
        "end_line": 511,
        "type": "filter",
        "doc": {
            "description": "Filters content to display in the middle of the login form.",
            "long_description": "<p>The filter evaluates just following the location where the 'login-password' field is displayed.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Content to display. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Array of login form arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "login_form_top",
        "line": 498,
        "end_line": 498,
        "type": "filter",
        "doc": {
            "description": "Filters content to display at the top of the login form.",
            "long_description": "<p>The filter evaluates just following the opening form tag element.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Content to display. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Array of login form arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "login_headertext",
        "line": 159,
        "end_line": 159,
        "type": "filter",
        "doc": {
            "description": "Filters the link text of the header logo above the login form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "The login header logo link text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$login_header_text"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "login_headerurl",
        "line": 130,
        "end_line": 130,
        "type": "filter",
        "doc": {
            "description": "Filters link URL of the header logo above login form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Login header logo URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$login_header_url"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "login_link_separator",
        "line": 546,
        "end_line": 546,
        "type": "filter",
        "doc": {
            "description": "Filters the separator used between login form navigation links.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "The separator used between login form navigation links.",
                    "types": [
                        "string"
                    ],
                    "variable": "$login_link_separator"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "login_message",
        "line": 216,
        "end_line": 216,
        "type": "filter",
        "doc": {
            "description": "Filters the message to display above the login form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Login message text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$message"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "login_messages",
        "line": 262,
        "end_line": 262,
        "type": "filter",
        "doc": {
            "description": "Filters instructional messages displayed above the login form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Login messages.",
                    "types": [
                        "string"
                    ],
                    "variable": "$messages"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "login_redirect",
        "line": 1207,
        "end_line": 1207,
        "type": "filter",
        "doc": {
            "description": "Filters the login redirect URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The redirect destination URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$redirect_to"
                },
                {
                    "name": "param",
                    "content": "The requested redirect destination URL passed as a parameter.",
                    "types": [
                        "string"
                    ],
                    "variable": "$requested_redirect_to"
                },
                {
                    "name": "param",
                    "content": "WP_User object if login was successful, WP_Error object otherwise.",
                    "types": [
                        "\\WP_User",
                        "\\WP_Error"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "login_title",
        "line": 80,
        "end_line": 80,
        "type": "filter",
        "doc": {
            "description": "Filters the title tag content for login page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "The page title, with extra context added.",
                    "types": [
                        "string"
                    ],
                    "variable": "$login_title"
                },
                {
                    "name": "param",
                    "content": "The original page title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "login_url",
        "line": 405,
        "end_line": 405,
        "type": "filter",
        "doc": {
            "description": "Filters the login URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.2.0",
                    "description": "The <code>$force_reauth</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The login URL. Not HTML-encoded.",
                    "types": [
                        "string"
                    ],
                    "variable": "$login_url"
                },
                {
                    "name": "param",
                    "content": "The path to redirect to on login, if supplied.",
                    "types": [
                        "string"
                    ],
                    "variable": "$redirect"
                },
                {
                    "name": "param",
                    "content": "Whether to force reauthorization, even if a cookie is present.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$force_reauth"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "loginout",
        "line": 337,
        "end_line": 337,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output for the Log In/Log Out link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The HTML link content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "logout_redirect",
        "line": 771,
        "end_line": 771,
        "type": "filter",
        "doc": {
            "description": "Filters the log out redirect URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "The redirect destination URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$redirect_to"
                },
                {
                    "name": "param",
                    "content": "The requested redirect destination URL passed as a parameter.",
                    "types": [
                        "string"
                    ],
                    "variable": "$requested_redirect_to"
                },
                {
                    "name": "param",
                    "content": "The WP_User object for the user that's logging out.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "logout_url",
        "line": 371,
        "end_line": 371,
        "type": "filter",
        "doc": {
            "description": "Filters the logout URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The HTML-encoded logout URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$logout_url"
                },
                {
                    "name": "param",
                    "content": "Path to redirect to on logout.",
                    "types": [
                        "string"
                    ],
                    "variable": "$redirect"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "lostpassword_redirect",
        "line": 804,
        "end_line": 804,
        "type": "filter",
        "doc": {
            "description": "Filters the URL redirected to after submitting the lostpassword/retrievepassword form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The redirect destination URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$lostpassword_redirect"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "lostpassword_url",
        "line": 576,
        "end_line": 576,
        "type": "filter",
        "doc": {
            "description": "Filters the Lost Password URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The lost password page URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$lostpassword_url"
                },
                {
                    "name": "param",
                    "content": "The path to redirect to on login.",
                    "types": [
                        "string"
                    ],
                    "variable": "$redirect"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "make_clickable_rel",
        "line": 2854,
        "end_line": 2854,
        "type": "filter",
        "doc": {
            "description": "Filters the rel value that is added to URL matches converted to links.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "The rel value.",
                    "types": [
                        "string"
                    ],
                    "variable": "$rel"
                },
                {
                    "name": "param",
                    "content": "The matched URL being converted to a link tag.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "manage_media_columns",
        "line": 332,
        "end_line": 332,
        "type": "filter",
        "doc": {
            "description": "Filters the Media list table columns.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of columns displayed in the Media list table.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$posts_columns"
                },
                {
                    "name": "param",
                    "content": "Whether the list table contains media not attached                                to any posts. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$detached"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-media-list-table.php"
    },
    {
        "name": "manage_pages_columns",
        "line": 662,
        "end_line": 662,
        "type": "filter",
        "doc": {
            "description": "Filters the columns displayed in the Pages list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An associative array of column headings.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_columns"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "manage_posts_columns",
        "line": 673,
        "end_line": 673,
        "type": "filter",
        "doc": {
            "description": "Filters the columns displayed in the Posts list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "An associative array of column headings.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_columns"
                },
                {
                    "name": "param",
                    "content": "The post type slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "manage_sites_action_links",
        "line": 735,
        "end_line": 735,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed for each site in the Sites list table.",
            "long_description": "<p>The 'Edit', 'Dashboard', 'Delete', and 'Visit' links are displayed by default for each site. The site's status determines whether to show the 'Activate' or 'Deactivate' link, 'Unarchive' or 'Archive' links, and 'Not Spam' or 'Spam' link for each site.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of action links to be displayed.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "The site ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$blog_id"
                },
                {
                    "name": "param",
                    "content": "Site path, formatted depending on whether it is a sub-domain                           or subdirectory multisite installation.",
                    "types": [
                        "string"
                    ],
                    "variable": "$blogname"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-sites-list-table.php"
    },
    {
        "name": "manage_taxonomies_for_attachment_columns",
        "line": 300,
        "end_line": 300,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy columns for attachments in the Media list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of registered taxonomy names to show for attachments.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                },
                {
                    "name": "param",
                    "content": "The post type. Default 'attachment'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-media-list-table.php"
    },
    {
        "name": "manage_taxonomies_for_{$post_type}_columns",
        "line": 631,
        "end_line": 631,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy columns in the Posts list table.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$post_type</code>, refers to the post type slug.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of taxonomy names to show columns for.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                },
                {
                    "name": "param",
                    "content": "The post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "manage_users_custom_column",
        "line": 583,
        "end_line": 583,
        "type": "filter",
        "doc": {
            "description": "Filters the display output of custom columns in the Users list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Custom column output. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Column name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$column_name"
                },
                {
                    "name": "param",
                    "content": "ID of the currently-listed user.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-users-list-table.php"
    },
    {
        "name": "manage_{$post_type}_posts_columns",
        "line": 685,
        "end_line": 685,
        "type": "filter",
        "doc": {
            "description": "Filters the columns displayed in the Posts list table for a specific post type.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$post_type</code>, refers to the post type slug.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "An associative array of column headings.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_columns"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "manage_{$screen->id}_columns",
        "line": 39,
        "end_line": 39,
        "type": "filter",
        "doc": {
            "description": "Filters the column headers for a list table on a specific screen.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$screen-&gt;id</code>, refers to the ID of a specific screen. For example, the screen ID for the Posts list table is edit-post, so the filter for that screen would be manage_edit-post_columns.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The column header labels keyed by column ID.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$columns"
                }
            ]
        },
        "file": "wp-admin/includes/screen.php"
    },
    {
        "name": "manage_{$this->screen->id}_sortable_columns",
        "line": 1061,
        "end_line": 1061,
        "type": "filter",
        "doc": {
            "description": "Filters the list table sortable columns for a specific screen.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;screen-&gt;id</code>, refers to the ID of the current screen, usually a string.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of sortable columns.",
                    "types": [
                        "array"
                    ],
                    "variable": "$sortable_columns"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-list-table.php"
    },
    {
        "name": "manage_{$this->screen->taxonomy}_custom_column",
        "line": 614,
        "end_line": 614,
        "type": "filter",
        "doc": {
            "description": "Filters the displayed columns in the terms list table.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;screen-&gt;taxonomy</code>, refers to the slug of the current taxonomy.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Blank string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$string"
                },
                {
                    "name": "param",
                    "content": "Name of the column.",
                    "types": [
                        "string"
                    ],
                    "variable": "$column_name"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-terms-list-table.php"
    },
    {
        "name": "map_meta_cap",
        "line": 618,
        "end_line": 618,
        "type": "filter",
        "doc": {
            "description": "Filters a user's capabilities depending on specific context and/or privilege.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of the user's capabilities.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$caps"
                },
                {
                    "name": "param",
                    "content": "Capability name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cap"
                },
                {
                    "name": "param",
                    "content": "The user ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Adds the context to the cap. Typically the object ID.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/capabilities.php"
    },
    {
        "name": "max_srcset_image_width",
        "line": 1267,
        "end_line": 1267,
        "type": "filter",
        "doc": {
            "description": "Filters the maximum image width to be included in a 'srcset' attribute.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The maximum image width to be included in the 'srcset'. Default '2048'.",
                    "types": [
                        "int"
                    ],
                    "variable": "$max_width"
                },
                {
                    "name": "param",
                    "content": "{     An array of requested width and height values.     @type int $0 The width in pixels.     @type int $1 The height in pixels. }",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$size_array"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "mce_buttons",
        "line": 616,
        "end_line": 616,
        "type": "filter",
        "doc": {
            "description": "Filters the first-row list of TinyMCE buttons (Visual tab).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "First-row list of buttons.",
                    "types": [
                        "array"
                    ],
                    "variable": "$buttons"
                },
                {
                    "name": "param",
                    "content": "Unique editor identifier, e.g. 'content'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "mce_buttons_2",
        "line": 632,
        "end_line": 632,
        "type": "filter",
        "doc": {
            "description": "Filters the second-row list of TinyMCE buttons (Visual tab).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Second-row list of buttons.",
                    "types": [
                        "array"
                    ],
                    "variable": "$buttons"
                },
                {
                    "name": "param",
                    "content": "Unique editor identifier, e.g. 'content'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "mce_buttons_3",
        "line": 642,
        "end_line": 642,
        "type": "filter",
        "doc": {
            "description": "Filters the third-row list of TinyMCE buttons (Visual tab).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Third-row list of buttons.",
                    "types": [
                        "array"
                    ],
                    "variable": "$buttons"
                },
                {
                    "name": "param",
                    "content": "Unique editor identifier, e.g. 'content'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "mce_buttons_4",
        "line": 652,
        "end_line": 652,
        "type": "filter",
        "doc": {
            "description": "Filters the fourth-row list of TinyMCE buttons (Visual tab).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Fourth-row list of buttons.",
                    "types": [
                        "array"
                    ],
                    "variable": "$buttons"
                },
                {
                    "name": "param",
                    "content": "Unique editor identifier, e.g. 'content'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "mce_css",
        "line": 568,
        "end_line": 568,
        "type": "filter",
        "doc": {
            "description": "Filters the comma-delimited list of stylesheets to load in TinyMCE.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Comma-delimited list of stylesheets.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheets"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "mce_external_languages",
        "line": 463,
        "end_line": 463,
        "type": "filter",
        "doc": {
            "description": "Filters the translations loaded for external TinyMCE 3.x plugins.",
            "long_description": "<p>The filter takes an associative array ('plugin_name' =&gt; 'path') where 'path' is the include path to the file.</p> <p>The language file should follow the same format as wp_mce_translation(), and should define a variable ($strings) that holds all translated strings.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Translations for external TinyMCE plugins.",
                    "types": [
                        "array"
                    ],
                    "variable": "$translations"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "mce_external_plugins",
        "line": 402,
        "end_line": 402,
        "type": "filter",
        "doc": {
            "description": "Filters the list of TinyMCE external plugins.",
            "long_description": "<p>The filter takes an associative array of external plugins for TinyMCE in the form 'plugin_name' =&gt; 'url'.</p> <p>The url should be absolute, and should include the js filename to be loaded. For example: 'myplugin' =&gt; '<a href=\"http://mysite.com/wp-content/plugins/myfolder/mce_plugin.js\">http://mysite.com/wp-content/plugins/myfolder/mce_plugin.js</a>'.</p> <p>If the external plugin adds a button, it should be added with one of the 'mce_buttons' filters.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of external TinyMCE plugins.",
                    "types": [
                        "array"
                    ],
                    "variable": "$external_plugins"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "media_buttons_context",
        "line": 657,
        "end_line": 657,
        "type": "filter",
        "doc": {
            "description": "Filters the legacy (pre-3.5.0) media buttons.",
            "long_description": "<p>Use {@see 'media_buttons'} action instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.5.0",
                    "description": "Use {@see 'media_buttons'} action instead."
                },
                {
                    "name": "param",
                    "content": "Media buttons context. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$string"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "media_embedded_in_content_allowed_types",
        "line": 4090,
        "end_line": 4090,
        "type": "filter",
        "doc": {
            "description": "Filters the embedded media types that are allowed to be returned from the content blob.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "An array of allowed media types. Default media types are                                      'audio', 'video', 'object', 'embed', and 'iframe'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$allowed_media_types"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "media_library_months_with_files",
        "line": 3761,
        "end_line": 3761,
        "type": "filter",
        "doc": {
            "description": "Allows overriding the list of months displayed in the media library.",
            "long_description": "<p>By default (if this filter does not return an array), a query will be run to determine the months that have media items.  This query can be expensive for large media libraries, so it may be desirable for sites to override this behavior.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.4"
                },
                {
                    "name": "link",
                    "content": "<a href=\"https://core.trac.wordpress.org/ticket/31071\">https://core.trac.wordpress.org/ticket/31071</a>",
                    "link": "https://core.trac.wordpress.org/ticket/31071"
                },
                {
                    "name": "param",
                    "content": "An array of objects with <code>month</code> and <code>year</code>                           properties, or <code>null</code> (or any other non-array value)                           for default behavior.",
                    "types": [
                        "array",
                        "null"
                    ],
                    "variable": "$months"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "media_library_show_audio_playlist",
        "line": 3702,
        "end_line": 3702,
        "type": "filter",
        "doc": {
            "description": "Allows showing or hiding the \"Create Audio Playlist\" button in the media library.",
            "long_description": "<p>By default, the \"Create Audio Playlist\" button will always be shown in the media library.  If this filter returns <code>null</code>, a query will be run to determine whether the media library contains any audio items.  This was the default behavior prior to version 4.8.0, but this query is expensive for large media libraries.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.4"
                },
                {
                    "name": "since",
                    "content": "4.8.0",
                    "description": "The filter's default value is <code>true</code> rather than <code>null</code>."
                },
                {
                    "name": "link",
                    "content": "<a href=\"https://core.trac.wordpress.org/ticket/31071\">https://core.trac.wordpress.org/ticket/31071</a>",
                    "link": "https://core.trac.wordpress.org/ticket/31071"
                },
                {
                    "name": "param",
                    "content": "Whether to show the button, or <code>null</code> to decide based                        on whether any audio files exist in the media library.",
                    "types": [
                        "bool",
                        "null"
                    ],
                    "variable": "$show"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "media_library_show_video_playlist",
        "line": 3732,
        "end_line": 3732,
        "type": "filter",
        "doc": {
            "description": "Allows showing or hiding the \"Create Video Playlist\" button in the media library.",
            "long_description": "<p>By default, the \"Create Video Playlist\" button will always be shown in the media library.  If this filter returns <code>null</code>, a query will be run to determine whether the media library contains any video items.  This was the default behavior prior to version 4.8.0, but this query is expensive for large media libraries.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.4"
                },
                {
                    "name": "since",
                    "content": "4.8.0",
                    "description": "The filter's default value is <code>true</code> rather than <code>null</code>."
                },
                {
                    "name": "link",
                    "content": "<a href=\"https://core.trac.wordpress.org/ticket/31071\">https://core.trac.wordpress.org/ticket/31071</a>",
                    "link": "https://core.trac.wordpress.org/ticket/31071"
                },
                {
                    "name": "param",
                    "content": "Whether to show the button, or <code>null</code> to decide based                        on whether any video files exist in the media library.",
                    "types": [
                        "bool",
                        "null"
                    ],
                    "variable": "$show"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "media_meta",
        "line": 1633,
        "end_line": 1633,
        "type": "filter",
        "doc": {
            "description": "Filters the media metadata.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The HTML markup containing the media dimensions.",
                    "types": [
                        "string"
                    ],
                    "variable": "$media_dims"
                },
                {
                    "name": "param",
                    "content": "The WP_Post attachment object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "media_row_actions",
        "line": 773,
        "end_line": 773,
        "type": "filter",
        "doc": {
            "description": "Filters the action links for each attachment in the Media list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of action links for each attachment.                           Default 'Edit', 'Delete Permanently', 'View'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "WP_Post object for the current attachment.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Whether the list table contains media not attached                           to any posts. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$detached"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-media-list-table.php"
    },
    {
        "name": "media_send_to_editor",
        "line": 831,
        "end_line": 831,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML markup for a media item sent to the editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_get_attachment_metadata()"
                },
                {
                    "name": "param",
                    "content": "HTML markup for a media item sent to the editor.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "The first key from the $_POST['send'] data.",
                    "types": [
                        "int"
                    ],
                    "variable": "$send_id"
                },
                {
                    "name": "param",
                    "content": "Array of attachment metadata.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attachment"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "media_submitbox_misc_sections",
        "line": 3313,
        "end_line": 3313,
        "type": "filter",
        "doc": {
            "description": "Filters the audio and video metadata fields to be shown in the publish meta box.",
            "long_description": "<p>The key for each item in the array should correspond to an attachment metadata key, and the value should be the desired label.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of the attachment metadata keys and labels.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "WP_Post object for the current attachment.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "media_upload_default_tab",
        "line": 78,
        "end_line": 78,
        "type": "filter",
        "doc": {
            "description": "Filters the default tab in the legacy (pre-3.5.0) media popup.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The default media popup tab. Default 'type' (From Computer).",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-admin/media-upload.php"
    },
    {
        "name": "media_upload_default_type",
        "line": 64,
        "end_line": 64,
        "type": "filter",
        "doc": {
            "description": "Filters the default media upload type in the legacy (pre-3.5.0) media popup.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The default media upload type. Possible values include                     'image', 'audio', 'video', 'file', etc. Default 'file'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-admin/media-upload.php"
    },
    {
        "name": "media_upload_form_url",
        "line": 2275,
        "end_line": 2275,
        "type": "filter",
        "doc": {
            "description": "Filters the media upload form action URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "The media upload form action URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$form_action_url"
                },
                {
                    "name": "param",
                    "content": "The type of media. Default 'file'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "media_upload_mime_type_links",
        "line": 2751,
        "end_line": 2751,
        "type": "filter",
        "doc": {
            "description": "Filters the media upload mime type list items.",
            "long_description": "<p>Returned values should begin with an <code>&lt;li&gt;</code> tag.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of list items containing mime type link HTML.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$type_links"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "media_upload_tabs",
        "line": 31,
        "end_line": 31,
        "type": "filter",
        "doc": {
            "description": "Filters the available tabs in the legacy (pre-3.5.0) media popup.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of media tabs.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$_default_tabs"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "media_view_settings",
        "line": 3979,
        "end_line": 3979,
        "type": "filter",
        "doc": {
            "description": "Filters the media view settings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "List of media view settings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$settings"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "media_view_strings",
        "line": 3989,
        "end_line": 3989,
        "type": "filter",
        "doc": {
            "description": "Filters the media view strings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of media view strings keyed by the name they'll be referenced by in JavaScript.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$strings"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "mejs_settings",
        "line": 1419,
        "end_line": 1419,
        "type": "filter",
        "doc": {
            "description": "Filters the MediaElement configuration settings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "MediaElement settings array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$mejs_settings"
                }
            ]
        },
        "file": "wp-includes/script-loader.php"
    },
    {
        "name": "menu_order",
        "line": 279,
        "end_line": 279,
        "type": "filter",
        "doc": {
            "description": "Filters the order of administration menu items.",
            "long_description": "<p>A truthy value must first be passed to the {@see 'custom_menu_order'} filter for this filter to work. Use the following to enable custom menu ordering:</p> <pre><code>add_filter( 'custom_menu_order', '__return_true' );</code></pre>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An ordered array of menu items.",
                    "types": [
                        "array"
                    ],
                    "variable": "$menu_order"
                }
            ]
        },
        "file": "wp-admin/includes/menu.php"
    },
    {
        "name": "meta_query_find_compatible_table_alias",
        "line": 830,
        "end_line": 830,
        "type": "filter",
        "doc": {
            "description": "Filters the table alias identified as compatible with the current clause.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "Table alias, or false if none was found.",
                    "types": [
                        "string",
                        "bool"
                    ],
                    "variable": "$alias"
                },
                {
                    "name": "param",
                    "content": "First-order query clause.",
                    "types": [
                        "array"
                    ],
                    "variable": "$clause"
                },
                {
                    "name": "param",
                    "content": "Parent of $clause.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parent_query"
                },
                {
                    "name": "param",
                    "content": "WP_Meta_Query object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-meta-query.php"
    },
    {
        "name": "mime_types",
        "line": 2893,
        "end_line": 2998,
        "type": "filter",
        "doc": {
            "description": "Filters the list of mime types and file extensions.",
            "long_description": "<p>This filter should be used to add, not remove, mime types. To remove mime types, use the {@see 'upload_mimes'} filter.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Mime types keyed by the file extension regex                                 corresponding to those types.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$wp_get_mime_types"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "minimum_site_name_length",
        "line": 639,
        "end_line": 639,
        "type": "filter",
        "doc": {
            "description": "Filters the minimum site name length required when validating a site signup.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "The minimum site name length. Default 4.",
                    "types": [
                        "int"
                    ],
                    "variable": "$length"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "mod_rewrite_rules",
        "line": 1553,
        "end_line": 1553,
        "type": "filter",
        "doc": {
            "description": "Filters the list of rewrite rules formatted for output to an .htaccess file.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "mod_rewrite Rewrite rules formatted for .htaccess.",
                    "types": [
                        "string"
                    ],
                    "variable": "$rules"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "month_link",
        "line": 531,
        "end_line": 531,
        "type": "filter",
        "doc": {
            "description": "Filters the month archive permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Permalink for the month archive.",
                    "types": [
                        "string"
                    ],
                    "variable": "$monthlink"
                },
                {
                    "name": "param",
                    "content": "Year for the archive.",
                    "types": [
                        "int"
                    ],
                    "variable": "$year"
                },
                {
                    "name": "param",
                    "content": "The month for the archive.",
                    "types": [
                        "int"
                    ],
                    "variable": "$month"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "months_dropdown_results",
        "line": 586,
        "end_line": 586,
        "type": "filter",
        "doc": {
            "description": "Filters the 'Months' drop-down results.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "The months drop-down query results.",
                    "types": [
                        "object"
                    ],
                    "variable": "$months"
                },
                {
                    "name": "param",
                    "content": "The post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-list-table.php"
    },
    {
        "name": "ms_site_check",
        "line": 83,
        "end_line": 83,
        "type": "filter",
        "doc": {
            "description": "Filters checking the status of the current blog.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to skip the blog status check. Default null.",
                    "types": [
                        "bool",
                        "null"
                    ],
                    "variable": "$check"
                }
            ]
        },
        "file": "wp-includes/ms-load.php"
    },
    {
        "name": "ms_sites_list_table_query_args",
        "line": 176,
        "end_line": 176,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the site query in the sites list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "An array of get_sites() arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-sites-list-table.php"
    },
    {
        "name": "ms_user_list_site_actions",
        "line": 423,
        "end_line": 423,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed next the sites a user belongs to in the Network Admin Users list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of action links to be displayed. Default 'Edit', 'View'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "The site ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$userblog_id"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-users-list-table.php"
    },
    {
        "name": "ms_user_list_site_class",
        "line": 386,
        "end_line": 386,
        "type": "filter",
        "doc": {
            "description": "Filters the span class for a site listing on the mulisite user list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Array of class names used within the span tag. Default \"site-#\" with the site's network ID.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$site_classes"
                },
                {
                    "name": "param",
                    "content": "Site ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$site_id"
                },
                {
                    "name": "param",
                    "content": "Network ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                },
                {
                    "name": "param",
                    "content": "WP_User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-users-list-table.php"
    },
    {
        "name": "ms_user_row_actions",
        "line": 519,
        "end_line": 519,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed under each user in the Network Admin Users list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "An array of action links to be displayed. Default 'Edit', 'Delete'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "WP_User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-users-list-table.php"
    },
    {
        "name": "mu_dropdown_languages",
        "line": 677,
        "end_line": 677,
        "type": "filter",
        "doc": {
            "description": "Filters the languages available in the dropdown.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Array of HTML output for the dropdown.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Array of available language files.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$lang_files"
                },
                {
                    "name": "param",
                    "content": "The current language code.",
                    "types": [
                        "string"
                    ],
                    "variable": "$current"
                }
            ]
        },
        "file": "wp-admin/includes/ms.php"
    },
    {
        "name": "mu_menu_items",
        "line": 463,
        "end_line": 463,
        "type": "filter",
        "doc": {
            "description": "Filters available network-wide administration menu options.",
            "long_description": "<p>Options returned to this filter are output as individual checkboxes that, when selected, enable site administrator access to the specified administration menu in certain contexts.</p> <p>Adding options for specific menus here hinges on the appropriate checks and capabilities being in place in the site dashboard on the other side. For instance, when the single default option, 'plugins' is enabled, site administrators are granted access to the Plugins screen in their individual sites' dashboards.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Associative array of the menu items available.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$admin_menus"
                }
            ]
        },
        "file": "wp-admin/network/settings.php"
    },
    {
        "name": "myblogs_blog_actions",
        "line": 136,
        "end_line": 136,
        "type": "filter",
        "doc": {
            "description": "Filters the row links displayed for each site on the My Sites screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "The HTML site link markup.",
                    "types": [
                        "string"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "An object containing the site data.",
                    "types": [
                        "object"
                    ],
                    "variable": "$user_blog"
                }
            ]
        },
        "file": "wp-admin/my-sites.php"
    },
    {
        "name": "myblogs_options",
        "line": 109,
        "end_line": 109,
        "type": "filter",
        "doc": {
            "description": "Enable the Global Settings section on the My Sites screen.",
            "long_description": "<p>By default, the Global Settings section is hidden. Passing a non-empty string to this filter will enable the section, and allow new settings to be added, either globally or for specific sites.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "The settings HTML markup. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$settings_html"
                },
                {
                    "name": "param",
                    "content": "Context of the setting (global or site-specific). Default 'global'.",
                    "types": [
                        "object"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/my-sites.php"
    },
    {
        "name": "nav_menu_attr_title",
        "line": 905,
        "end_line": 905,
        "type": "filter",
        "doc": {
            "description": "Filters a navigation menu item's title attribute.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The menu item title attribute.",
                    "types": [
                        "string"
                    ],
                    "variable": "$item_title"
                }
            ]
        },
        "file": "wp-includes/nav-menu.php"
    },
    {
        "name": "nav_menu_css_class",
        "line": 153,
        "end_line": 153,
        "type": "filter",
        "doc": {
            "description": "Filters the CSS classes applied to a menu item's list item element.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$depth</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Array of the CSS classes that are applied to the menu item's <code>&lt;li&gt;</code> element.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$classes"
                },
                {
                    "name": "param",
                    "content": "The current menu item.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$item"
                },
                {
                    "name": "param",
                    "content": "An object of wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Depth of menu item. Used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                }
            ]
        },
        "file": "wp-includes/class-walker-nav-menu.php"
    },
    {
        "name": "nav_menu_description",
        "line": 915,
        "end_line": 915,
        "type": "filter",
        "doc": {
            "description": "Filters a navigation menu item's description.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The menu item description.",
                    "types": [
                        "string"
                    ],
                    "variable": "$description"
                }
            ]
        },
        "file": "wp-includes/nav-menu.php"
    },
    {
        "name": "nav_menu_item_args",
        "line": 140,
        "end_line": 140,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for a single nav menu item.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "An object of wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Menu item data object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$item"
                },
                {
                    "name": "param",
                    "content": "Depth of menu item. Used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                }
            ]
        },
        "file": "wp-includes/class-walker-nav-menu.php"
    },
    {
        "name": "nav_menu_item_id",
        "line": 167,
        "end_line": 167,
        "type": "filter",
        "doc": {
            "description": "Filters the ID applied to a menu item's list item element.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.1"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$depth</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The ID that is applied to the menu item's <code>&lt;li&gt;</code> element.",
                    "types": [
                        "string"
                    ],
                    "variable": "$menu_id"
                },
                {
                    "name": "param",
                    "content": "The current menu item.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$item"
                },
                {
                    "name": "param",
                    "content": "An object of wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Depth of menu item. Used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                }
            ]
        },
        "file": "wp-includes/class-walker-nav-menu.php"
    },
    {
        "name": "nav_menu_item_title",
        "line": 225,
        "end_line": 225,
        "type": "filter",
        "doc": {
            "description": "Filters a menu item's title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The menu item's title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "The current menu item.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$item"
                },
                {
                    "name": "param",
                    "content": "An object of wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Depth of menu item. Used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                }
            ]
        },
        "file": "wp-includes/class-walker-nav-menu.php"
    },
    {
        "name": "nav_menu_items_{$post_type_name}",
        "line": 638,
        "end_line": 638,
        "type": "filter",
        "doc": {
            "description": "Filters the posts displayed in the 'View All' tab of the current post type's menu items meta box.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$post_type_name</code>, refers to the slug of the current post type.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "Converted the <code>$post_type</code> parameter to accept a WP_Post_Type object."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Query::query()"
                },
                {
                    "name": "param",
                    "content": "The posts for the current post type. Mostly <code>WP_Post</code> objects, but                                can also contain \"fake\" post objects to represent other menu items.",
                    "types": [
                        "object[]"
                    ],
                    "variable": "$posts"
                },
                {
                    "name": "param",
                    "content": "An array of <code>WP_Query</code> arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The current post type object for this menu item meta box.",
                    "types": [
                        "\\WP_Post_Type"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/nav-menu.php"
    },
    {
        "name": "nav_menu_items_{$post_type_name}_recent",
        "line": 546,
        "end_line": 546,
        "type": "filter",
        "doc": {
            "description": "Filters the posts displayed in the 'Most Recent' tab of the current post type's menu items meta box.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$post_type_name</code>, refers to the post type name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$recent_args</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of post objects being listed.",
                    "types": [
                        "\\WP_Post[]"
                    ],
                    "variable": "$most_recent"
                },
                {
                    "name": "param",
                    "content": "An array of <code>WP_Query</code> arguments for the meta box.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to <code>wp_nav_menu_item_post_type_meta_box()</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$box"
                },
                {
                    "name": "param",
                    "content": "An array of <code>WP_Query</code> arguments for 'Most Recent' tab.",
                    "types": [
                        "array"
                    ],
                    "variable": "$recent_args"
                }
            ]
        },
        "file": "wp-admin/includes/nav-menu.php"
    },
    {
        "name": "nav_menu_link_attributes",
        "line": 202,
        "end_line": 202,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML attributes applied to a menu item's anchor element.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "The <code>$depth</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "{     The HTML attributes applied to the menu item's <code>&lt;a&gt;</code> element, empty strings are ignored.     @type string $title        Title attribute.     @type string $target       Target attribute.     @type string $rel          The rel attribute.     @type string $href         The href attribute.     @type string $aria_current The aria-current attribute. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$atts"
                },
                {
                    "name": "param",
                    "content": "The current menu item.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$item"
                },
                {
                    "name": "param",
                    "content": "An object of wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Depth of menu item. Used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                }
            ]
        },
        "file": "wp-includes/class-walker-nav-menu.php"
    },
    {
        "name": "nav_menu_meta_box_object",
        "line": 225,
        "end_line": 225,
        "type": "filter",
        "doc": {
            "description": "Filters whether a menu items meta box will be added for the current object type.",
            "long_description": "<p>If a falsey value is returned instead of an object, the menu items meta box for the current meta box object will not be added.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The current object to add a menu items                                meta box for.",
                    "types": [
                        "object"
                    ],
                    "variable": "$meta_box_object"
                }
            ]
        },
        "file": "wp-admin/includes/nav-menu.php"
    },
    {
        "name": "nav_menu_submenu_css_class",
        "line": 75,
        "end_line": 75,
        "type": "filter",
        "doc": {
            "description": "Filters the CSS class(es) applied to a menu list element.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of the CSS classes that are applied to the menu <code>&lt;ul&gt;</code> element.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$classes"
                },
                {
                    "name": "param",
                    "content": "An object of <code>wp_nav_menu()</code> arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Depth of menu item. Used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                }
            ]
        },
        "file": "wp-includes/class-walker-nav-menu.php"
    },
    {
        "name": "navigation_markup_template",
        "line": 2798,
        "end_line": 2798,
        "type": "filter",
        "doc": {
            "description": "Filters the navigation markup template.",
            "long_description": "<p>Note: The filtered template HTML must contain specifiers for the navigation class (%1$s), the screen-reader-text value (%2$s), placement of the navigation links (%3$s), and ARIA label text if screen-reader-text does not fit that (%4$s):</p> <pre><code>&lt;nav class=\"navigation %1$s\" role=\"navigation\" aria-label=\"%4$s\"&gt;\n    &lt;h2 class=\"screen-reader-text\"&gt;%2$s&lt;/h2&gt;\n    &lt;div class=\"nav-links\"&gt;%3$s&lt;/div&gt;\n&lt;/nav&gt;</code></pre>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The default template.",
                    "types": [
                        "string"
                    ],
                    "variable": "$template"
                },
                {
                    "name": "param",
                    "content": "The class passed by the calling function.",
                    "types": [
                        "string"
                    ],
                    "variable": "$class"
                },
                {
                    "name": "return",
                    "content": "Navigation template.",
                    "types": [
                        "string"
                    ]
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "network_admin_email_change_email",
        "line": 2777,
        "end_line": 2777,
        "type": "filter",
        "doc": {
            "description": "Filters the contents of the email notification sent when the network admin email address is changed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "{            Used to build wp_mail().            @type string $to      The intended recipient.            @type string $subject The subject of the email.            @type string $message The content of the email.                The following strings have a special meaning and will get replaced dynamically:                - ###OLD_EMAIL### The old network admin email address.                - ###NEW_EMAIL### The new network admin email address.                - ###SITENAME###  The name of the network.                - ###SITEURL###   The URL to the site.            @type string $headers Headers.        }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_change_email"
                },
                {
                    "name": "param",
                    "content": "The old network admin email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$old_email"
                },
                {
                    "name": "param",
                    "content": "The new network admin email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$new_email"
                },
                {
                    "name": "param",
                    "content": "ID of the network.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "network_admin_plugin_action_links",
        "line": 773,
        "end_line": 773,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed for each plugin in the Network Admin Plugins list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of plugin action links. By default this can include 'activate',                              'deactivate', and 'delete'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "Path to the plugin file relative to the plugins directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plugin_file"
                },
                {
                    "name": "param",
                    "content": "An array of plugin data. See <code>get_plugin_data()</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plugin_data"
                },
                {
                    "name": "param",
                    "content": "The plugin context. By default this can include 'all', 'active', 'inactive',                              'recently_activated', 'upgrade', 'mustuse', 'dropins', and 'search'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugins-list-table.php"
    },
    {
        "name": "network_admin_plugin_action_links_{$plugin_file}",
        "line": 790,
        "end_line": 790,
        "type": "filter",
        "doc": {
            "description": "Filters the list of action links displayed for a specific plugin in the Network Admin Plugins list table.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$plugin_file</code>, refers to the path to the plugin file, relative to the plugins directory.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of plugin action links. By default this can include 'activate',                              'deactivate', and 'delete'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "Path to the plugin file relative to the plugins directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plugin_file"
                },
                {
                    "name": "param",
                    "content": "An array of plugin data. See <code>get_plugin_data()</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plugin_data"
                },
                {
                    "name": "param",
                    "content": "The plugin context. By default this can include 'all', 'active', 'inactive',                              'recently_activated', 'upgrade', 'mustuse', 'dropins', and 'search'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugins-list-table.php"
    },
    {
        "name": "network_admin_url",
        "line": 3550,
        "end_line": 3550,
        "type": "filter",
        "doc": {
            "description": "Filters the network admin URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The complete network admin URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the network admin URL. Blank string if                     no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "network_allowed_themes",
        "line": 1450,
        "end_line": 1450,
        "type": "filter",
        "doc": {
            "description": "Filters the array of themes allowed on the network.",
            "long_description": "<p>Site is provided as context so that a list of network allowed themes can be filtered further.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of theme stylesheet names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$allowed_themes"
                },
                {
                    "name": "param",
                    "content": "ID of the site.",
                    "types": [
                        "int"
                    ],
                    "variable": "$blog_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-theme.php"
    },
    {
        "name": "network_by_path_segments_count",
        "line": 384,
        "end_line": 384,
        "type": "filter",
        "doc": {
            "description": "Filters the number of path segments to consider when searching for a site.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "The number of path segments to consider. WordPress by default looks at                           one path segment. The function default of null only makes sense when you                           know the requested path should match a network.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$segments"
                },
                {
                    "name": "param",
                    "content": "The requested domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "The requested path, in full.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                }
            ]
        },
        "file": "wp-includes/class-wp-network.php"
    },
    {
        "name": "network_edit_site_nav_links",
        "line": 1044,
        "end_line": 1068,
        "type": "filter",
        "doc": {
            "description": "Filters the links that appear on site-editing network pages.",
            "long_description": "<p>Default links: 'site-info', 'site-users', 'site-themes', and 'site-settings'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "{     An array of link data representing individual network admin pages.     @type array $link_slug {         An array of information about the individual link to a page.         $type string $label Label to use for the link.         $type string $url   URL, relative to <code>network_admin_url()</code> to use for the link.         $type string $cap   Capability required to see the link.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$links"
                }
            ]
        },
        "file": "wp-admin/includes/ms.php"
    },
    {
        "name": "network_home_url",
        "line": 3517,
        "end_line": 3517,
        "type": "filter",
        "doc": {
            "description": "Filters the network home URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The complete network home URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the network home URL. Blank string                                 if no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Scheme to give the URL context. Accepts 'http', 'https',                                 'relative' or null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$orig_scheme"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "network_site_url",
        "line": 3467,
        "end_line": 3467,
        "type": "filter",
        "doc": {
            "description": "Filters the network site URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The complete network site URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the network site URL. Blank string if                            no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Scheme to give the URL context. Accepts 'http', 'https',                            'relative' or null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$scheme"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "network_sites_updated_message_{$action}",
        "line": 346,
        "end_line": 346,
        "type": "filter",
        "doc": {
            "description": "Filters a specific, non-default, site-updated message in the Network admin.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the non-default site update action.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The update message. Default 'Settings saved'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$msg"
                }
            ]
        },
        "file": "wp-admin/network/sites.php"
    },
    {
        "name": "networks_clauses",
        "line": 434,
        "end_line": 434,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the network query clauses.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "An associative array of network query clauses.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$pieces"
                },
                {
                    "name": "param",
                    "content": "Current instance of WP_Network_Query (passed by reference).",
                    "types": [
                        "\\WP_Network_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-network-query.php"
    },
    {
        "name": "networks_pre_query",
        "line": 219,
        "end_line": 219,
        "type": "filter_reference",
        "doc": {
            "description": "Filter the network data before the query takes place.",
            "long_description": "<p>Return a non-null value to bypass WordPress's default network queries.</p> <p>The expected return type from this filter depends on the value passed in the request query_vars. When <code>$this-&gt;query_vars['count']</code> is set, the filter should return the network count as an int. When <code>'ids' === $this-&gt;query_vars['fields']</code>, the filter should return an array of network ids. Otherwise the filter should return an array of WP_Network objects.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Return an array of network data to short-circuit WP's network query,                                       the network count as an integer if <code>$this-&gt;query_vars['count']</code> is set,                                       or null to allow WP to run its normal queries.",
                    "types": [
                        "array",
                        "null"
                    ],
                    "variable": "$network_data"
                },
                {
                    "name": "param",
                    "content": "The WP_Network_Query instance, passed by reference.",
                    "types": [
                        "\\WP_Network_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-network-query.php"
    },
    {
        "name": "new_admin_email_content",
        "line": 1339,
        "end_line": 1339,
        "type": "filter",
        "doc": {
            "description": "Filters the text of the email sent when a change of site admin email address is attempted.",
            "long_description": "<p>The following strings have a special meaning and will get replaced dynamically:</p> <h3>USERNAME###  The current user's username.</h3> <h3>ADMIN_URL### The link to click on to confirm the email change.</h3> <h3>EMAIL###     The proposed new site admin email address.</h3> <h3>SITENAME###  The name of the site.</h3> <h3>SITEURL###   The URL to the site.</h3>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "This filter is no longer Multisite specific."
                },
                {
                    "name": "param",
                    "content": "Text in the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email_text"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the new site admin email address.     @type string $hash     The secure hash used in the confirmation link URL.     @type string $newemail The proposed new site admin email address. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$new_admin_email"
                }
            ]
        },
        "file": "wp-admin/includes/misc.php"
    },
    {
        "name": "new_network_admin_email_content",
        "line": 2672,
        "end_line": 2672,
        "type": "filter",
        "doc": {
            "description": "Filters the text of the email sent when a change of network admin email address is attempted.",
            "long_description": "<p>The following strings have a special meaning and will get replaced dynamically:</p> <h3>USERNAME###  The current user's username.</h3> <h3>ADMIN_URL### The link to click on to confirm the email change.</h3> <h3>EMAIL###     The proposed new network admin email address.</h3> <h3>SITENAME###  The name of the network.</h3> <h3>SITEURL###   The URL to the network.</h3>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Text in the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email_text"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the new network admin email address.     @type string $hash     The secure hash used in the confirmation link URL.     @type string $newemail The proposed new network admin email address. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$new_admin_email"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "new_user_email_content",
        "line": 2864,
        "end_line": 2864,
        "type": "filter",
        "doc": {
            "description": "Filters the text of the email sent when a change of user email address is attempted.",
            "long_description": "<p>The following strings have a special meaning and will get replaced dynamically:</p> <h3>USERNAME###  The current user's username.</h3> <h3>ADMIN_URL### The link to click on to confirm the email change.</h3> <h3>EMAIL###     The new email.</h3> <h3>SITENAME###  The name of the site.</h3> <h3>SITEURL###   The URL to the site.</h3>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "This filter is no longer Multisite specific."
                },
                {
                    "name": "param",
                    "content": "Text in the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email_text"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the new user email address.     @type string $hash     The secure hash used in the confirmation link URL.     @type string $newemail The proposed new email address. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$new_user_email"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "newblog_notify_siteadmin",
        "line": 1407,
        "end_line": 1407,
        "type": "filter",
        "doc": {
            "description": "Filters the message body of the new site activation email sent to the network administrator.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Email body.",
                    "types": [
                        "string"
                    ],
                    "variable": "$msg"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "newblogname",
        "line": 666,
        "end_line": 666,
        "type": "filter",
        "doc": {
            "description": "Filters the new site name during registration.",
            "long_description": "<p>The name is the site's subdomain or the site's subdirectory path depending on the network settings.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Site name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$blogname"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "newuser_notify_siteadmin",
        "line": 1463,
        "end_line": 1463,
        "type": "filter",
        "doc": {
            "description": "Filters the message body of the new user activation email sent to the network administrator.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Email body.",
                    "types": [
                        "string"
                    ],
                    "variable": "$msg"
                },
                {
                    "name": "param",
                    "content": "WP_User instance of the new user.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "next_comments_link_attributes",
        "line": 2898,
        "end_line": 2898,
        "type": "filter",
        "doc": {
            "description": "Filters the anchor tag attributes for the next comments page link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Attributes for the anchor tag.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attributes"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "next_posts_link_attributes",
        "line": 2377,
        "end_line": 2377,
        "type": "filter",
        "doc": {
            "description": "Filters the anchor tag attributes for the next posts page link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Attributes for the anchor tag.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attributes"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "ngettext",
        "line": 445,
        "end_line": 445,
        "type": "filter",
        "doc": {
            "description": "Filters the singular or plural form of a string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "Translated text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$translation"
                },
                {
                    "name": "param",
                    "content": "The text to be used if the number is singular.",
                    "types": [
                        "string"
                    ],
                    "variable": "$single"
                },
                {
                    "name": "param",
                    "content": "The text to be used if the number is plural.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plural"
                },
                {
                    "name": "param",
                    "content": "The number to compare against to use either the singular or plural form.",
                    "types": [
                        "string"
                    ],
                    "variable": "$number"
                },
                {
                    "name": "param",
                    "content": "Text domain. Unique identifier for retrieving translated strings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "ngettext_with_context",
        "line": 487,
        "end_line": 487,
        "type": "filter",
        "doc": {
            "description": "Filters the singular or plural form of a string with gettext context.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Translated text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$translation"
                },
                {
                    "name": "param",
                    "content": "The text to be used if the number is singular.",
                    "types": [
                        "string"
                    ],
                    "variable": "$single"
                },
                {
                    "name": "param",
                    "content": "The text to be used if the number is plural.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plural"
                },
                {
                    "name": "param",
                    "content": "The number to compare against to use either the singular or plural form.",
                    "types": [
                        "string"
                    ],
                    "variable": "$number"
                },
                {
                    "name": "param",
                    "content": "Context information for the translators.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                },
                {
                    "name": "param",
                    "content": "Text domain. Unique identifier for retrieving translated strings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "no_texturize_shortcodes",
        "line": 243,
        "end_line": 243,
        "type": "filter",
        "doc": {
            "description": "Filters the list of shortcodes not to texturize.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of shortcode names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$default_no_texturize_shortcodes"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "no_texturize_tags",
        "line": 235,
        "end_line": 235,
        "type": "filter",
        "doc": {
            "description": "Filters the list of HTML elements not to texturize.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of HTML element names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$default_no_texturize_tags"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "nocache_headers",
        "line": 1424,
        "end_line": 1424,
        "type": "filter",
        "doc": {
            "description": "Filters the cache-controlling headers.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_get_nocache_headers()"
                },
                {
                    "name": "param",
                    "content": "{     Header names and field values.     @type string $Expires       Expires header.     @type string $Cache-Control Cache-Control header. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$headers"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "nonce_life",
        "line": 2072,
        "end_line": 2072,
        "type": "filter",
        "doc": {
            "description": "Filters the lifespan of nonces in seconds.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Lifespan of nonces in seconds. Default 86,400 seconds, or one day.",
                    "types": [
                        "int"
                    ],
                    "variable": "$lifespan"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "nonce_user_logged_out",
        "line": 2104,
        "end_line": 2104,
        "type": "filter",
        "doc": {
            "description": "Filters whether the user who generated the nonce is logged out.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "ID of the nonce-owning user.",
                    "types": [
                        "int"
                    ],
                    "variable": "$uid"
                },
                {
                    "name": "param",
                    "content": "The nonce action.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "notify_moderator",
        "line": 1713,
        "end_line": 1713,
        "type": "filter",
        "doc": {
            "description": "Filters whether to send the site moderator email notifications, overriding the site setting.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to notify blog moderator.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$maybe_notify"
                },
                {
                    "name": "param",
                    "content": "The id of the comment for the notification.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "notify_post_author",
        "line": 2213,
        "end_line": 2213,
        "type": "filter",
        "doc": {
            "description": "Filters whether to send the post author new comment notification emails, overriding the site setting.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to notify the post author about the new comment.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$maybe_notify"
                },
                {
                    "name": "param",
                    "content": "The ID of the comment for the notification.",
                    "types": [
                        "int"
                    ],
                    "variable": "$comment_ID"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "number_format_i18n",
        "line": 407,
        "end_line": 407,
        "type": "filter",
        "doc": {
            "description": "Filters the number formatted based on the locale.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "The <code>$number</code> and <code>$decimals</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "Converted number in string format.",
                    "types": [
                        "string"
                    ],
                    "variable": "$formatted"
                },
                {
                    "name": "param",
                    "content": "The number to convert based on locale.",
                    "types": [
                        "float"
                    ],
                    "variable": "$number"
                },
                {
                    "name": "param",
                    "content": "Precision of the number of decimal places.",
                    "types": [
                        "int"
                    ],
                    "variable": "$decimals"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "oembed_dataparse",
        "line": 708,
        "end_line": 708,
        "type": "filter",
        "doc": {
            "description": "Filters the returned oEmbed HTML.",
            "long_description": "<p>Use this filter to add support for custom data types, or to filter the result.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The returned oEmbed HTML.",
                    "types": [
                        "string"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "A data object result from an oEmbed provider.",
                    "types": [
                        "object"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "The URL of the content to be embedded.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed.php"
    },
    {
        "name": "oembed_default_width",
        "line": 32,
        "end_line": 32,
        "type": "filter",
        "doc": {
            "description": "Filters the maxwidth oEmbed parameter.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Maximum allowed width. Default 600.",
                    "types": [
                        "int"
                    ],
                    "variable": "$maxwidth"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed-controller.php"
    },
    {
        "name": "oembed_discovery_links",
        "line": 340,
        "end_line": 340,
        "type": "filter",
        "doc": {
            "description": "Filters the oEmbed discovery links HTML.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "HTML of the discovery links.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "oembed_endpoint_url",
        "line": 418,
        "end_line": 418,
        "type": "filter",
        "doc": {
            "description": "Filters the oEmbed endpoint URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The URL to the oEmbed endpoint.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The permalink used for the <code>url</code> query arg.",
                    "types": [
                        "string"
                    ],
                    "variable": "$permalink"
                },
                {
                    "name": "param",
                    "content": "The requested response format.",
                    "types": [
                        "string"
                    ],
                    "variable": "$format"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "oembed_fetch_url",
        "line": 533,
        "end_line": 533,
        "type": "filter",
        "doc": {
            "description": "Filters the oEmbed URL to be fetched.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "The <code>dnt</code> (Do Not Track) query parameter was added to all oEmbed provider URLs."
                },
                {
                    "name": "param",
                    "content": "URL of the oEmbed provider.",
                    "types": [
                        "string"
                    ],
                    "variable": "$provider"
                },
                {
                    "name": "param",
                    "content": "URL of the content to be embedded.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Optional arguments, usually passed from a shortcode.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed.php"
    },
    {
        "name": "oembed_iframe_title_attribute",
        "line": 818,
        "end_line": 818,
        "type": "filter",
        "doc": {
            "description": "Filters the title attribute of the given oEmbed HTML iframe.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "The title attribute.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "The oEmbed HTML result.",
                    "types": [
                        "string"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "A data object result from an oEmbed provider.",
                    "types": [
                        "object"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "The URL of the content to be embedded.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "oembed_linktypes",
        "line": 455,
        "end_line": 462,
        "type": "filter",
        "doc": {
            "description": "Filters the link types that contain oEmbed provider URLs.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Array of oEmbed link types. Accepts 'application/json+oembed',                         'text/xml+oembed', and 'application/xml+oembed' (incorrect,                         used by at least Vimeo).",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$format"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed.php"
    },
    {
        "name": "oembed_min_max_width",
        "line": 526,
        "end_line": 532,
        "type": "filter",
        "doc": {
            "description": "Filters the allowed minimum and maximum widths for the oEmbed response.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "{     Minimum and maximum widths for the oEmbed response.     @type int $min Minimum width. Default 200.     @type int $max Maximum width. Default 600. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$min_max_width"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "oembed_providers",
        "line": 221,
        "end_line": 221,
        "type": "filter",
        "doc": {
            "description": "Filters the list of whitelisted oEmbed providers.",
            "long_description": "<p>Since WordPress 4.4, oEmbed discovery is enabled for all users and allows embedding of sanitized iframes. The providers in this list are whitelisted, meaning they are trusted and allowed to embed any content, such as iframes, videos, JavaScript, and arbitrary HTML.</p> <p>Supported providers:</p> <table> <thead> <tr> <th>Provider</th> <th>Flavor</th> <th>Since</th> </tr> </thead> <tbody> <tr> <td>Dailymotion</td> <td>dailymotion.com</td> <td>2.9.0</td> </tr> <tr> <td>Flickr</td> <td>flickr.com</td> <td>2.9.0</td> </tr> <tr> <td>Hulu</td> <td>hulu.com</td> <td>2.9.0</td> </tr> <tr> <td>Scribd</td> <td>scribd.com</td> <td>2.9.0</td> </tr> <tr> <td>Vimeo</td> <td>vimeo.com</td> <td>2.9.0</td> </tr> <tr> <td>WordPress.tv</td> <td>wordpress.tv</td> <td>2.9.0</td> </tr> <tr> <td>YouTube</td> <td>youtube.com/watch</td> <td>2.9.0</td> </tr> <tr> <td>Crowdsignal</td> <td>polldaddy.com</td> <td>3.0.0</td> </tr> <tr> <td>SmugMug</td> <td>smugmug.com</td> <td>3.0.0</td> </tr> <tr> <td>YouTube</td> <td>youtu.be</td> <td>3.0.0</td> </tr> <tr> <td>Twitter</td> <td>twitter.com</td> <td>3.4.0</td> </tr> <tr> <td>Instagram</td> <td>instagram.com</td> <td>3.5.0</td> </tr> <tr> <td>Instagram</td> <td>instagr.am</td> <td>3.5.0</td> </tr> <tr> <td>Slideshare</td> <td>slideshare.net</td> <td>3.5.0</td> </tr> <tr> <td>SoundCloud</td> <td>soundcloud.com</td> <td>3.5.0</td> </tr> <tr> <td>Dailymotion</td> <td>dai.ly</td> <td>3.6.0</td> </tr> <tr> <td>Flickr</td> <td>flic.kr</td> <td>3.6.0</td> </tr> <tr> <td>Spotify</td> <td>spotify.com</td> <td>3.6.0</td> </tr> <tr> <td>Imgur</td> <td>imgur.com</td> <td>3.9.0</td> </tr> <tr> <td>Meetup.com</td> <td>meetup.com</td> <td>3.9.0</td> </tr> <tr> <td>Meetup.com</td> <td>meetu.ps</td> <td>3.9.0</td> </tr> <tr> <td>Animoto</td> <td>animoto.com</td> <td>4.0.0</td> </tr> <tr> <td>Animoto</td> <td>video214.com</td> <td>4.0.0</td> </tr> <tr> <td>CollegeHumor</td> <td>collegehumor.com</td> <td>4.0.0</td> </tr> <tr> <td>Issuu</td> <td>issuu.com</td> <td>4.0.0</td> </tr> <tr> <td>Mixcloud</td> <td>mixcloud.com</td> <td>4.0.0</td> </tr> <tr> <td>Crowdsignal</td> <td>poll.fm</td> <td>4.0.0</td> </tr> <tr> <td>TED</td> <td>ted.com</td> <td>4.0.0</td> </tr> <tr> <td>YouTube</td> <td>youtube.com/playlist</td> <td>4.0.0</td> </tr> <tr> <td>Tumblr</td> <td>tumblr.com</td> <td>4.2.0</td> </tr> <tr> <td>Kickstarter</td> <td>kickstarter.com</td> <td>4.2.0</td> </tr> <tr> <td>Kickstarter</td> <td>kck.st</td> <td>4.2.0</td> </tr> <tr> <td>Cloudup</td> <td>cloudup.com</td> <td>4.3.0</td> </tr> <tr> <td>ReverbNation</td> <td>reverbnation.com</td> <td>4.4.0</td> </tr> <tr> <td>VideoPress</td> <td>videopress.com</td> <td>4.4.0</td> </tr> <tr> <td>Reddit</td> <td>reddit.com</td> <td>4.4.0</td> </tr> <tr> <td>Speaker Deck</td> <td>speakerdeck.com</td> <td>4.4.0</td> </tr> <tr> <td>Twitter</td> <td>twitter.com/timelines</td> <td>4.5.0</td> </tr> <tr> <td>Twitter</td> <td>twitter.com/moments</td> <td>4.5.0</td> </tr> <tr> <td>Facebook</td> <td>facebook.com</td> <td>4.7.0</td> </tr> <tr> <td>Twitter</td> <td>twitter.com/user</td> <td>4.7.0</td> </tr> <tr> <td>Twitter</td> <td>twitter.com/likes</td> <td>4.7.0</td> </tr> <tr> <td>Twitter</td> <td>twitter.com/lists</td> <td>4.7.0</td> </tr> <tr> <td>Screencast</td> <td>screencast.com</td> <td>4.8.0</td> </tr> <tr> <td>Amazon</td> <td>amazon.com (com.mx, com.br, ca)</td> <td>4.9.0</td> </tr> <tr> <td>Amazon</td> <td>amazon.de (fr, it, es, in, nl, ru, co.uk)</td> <td>4.9.0</td> </tr> <tr> <td>Amazon</td> <td>amazon.co.jp (com.au)</td> <td>4.9.0</td> </tr> <tr> <td>Amazon</td> <td>amazon.cn</td> <td>4.9.0</td> </tr> <tr> <td>Amazon</td> <td>a.co</td> <td>4.9.0</td> </tr> <tr> <td>Amazon</td> <td>amzn.to (eu, in, asia)</td> <td>4.9.0</td> </tr> <tr> <td>Amazon</td> <td>z.cn</td> <td>4.9.0</td> </tr> <tr> <td>Someecards</td> <td>someecards.com</td> <td>4.9.0</td> </tr> <tr> <td>Someecards</td> <td>some.ly</td> <td>4.9.0</td> </tr> <tr> <td>Crowdsignal</td> <td>survey.fm</td> <td>5.1.0</td> </tr> <tr> <td>Instagram TV</td> <td>instagram.com</td> <td>5.1.0</td> </tr> <tr> <td>Instagram TV</td> <td>instagr.am</td> <td>5.1.0</td> </tr> </tbody> </table> <p>No longer supported providers:</p> <table> <thead> <tr> <th>Provider</th> <th>Flavor</th> <th>Since</th> <th>Removed</th> </tr> </thead> <tbody> <tr> <td>Qik</td> <td>qik.com</td> <td>2.9.0</td> <td>3.9.0</td> </tr> <tr> <td>Viddler</td> <td>viddler.com</td> <td>2.9.0</td> <td>4.0.0</td> </tr> <tr> <td>Revision3</td> <td>revision3.com</td> <td>2.9.0</td> <td>4.2.0</td> </tr> <tr> <td>Blip</td> <td>blip.tv</td> <td>2.9.0</td> <td>4.4.0</td> </tr> <tr> <td>Rdio</td> <td>rdio.com</td> <td>3.6.0</td> <td>4.4.1</td> </tr> <tr> <td>Rdio</td> <td>rd.io</td> <td>3.6.0</td> <td>4.4.1</td> </tr> <tr> <td>Vine</td> <td>vine.co</td> <td>4.1.0</td> <td>4.9.0</td> </tr> <tr> <td>Photobucket</td> <td>photobucket.com</td> <td>2.9.0</td> <td>5.1.0</td> </tr> <tr> <td>Funny or Die</td> <td>funnyordie.com</td> <td>3.0.0</td> <td>5.1.0</td> </tr> </tbody> </table>",
            "tags": [
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_oembed_add_provider()"
                },
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "An array of arrays containing data about popular oEmbed providers.",
                    "types": [
                        "array[]"
                    ],
                    "variable": "$providers"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed.php"
    },
    {
        "name": "oembed_remote_get_args",
        "line": 439,
        "end_line": 439,
        "type": "filter",
        "doc": {
            "description": "Filters oEmbed remote get arguments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Http::request()"
                },
                {
                    "name": "param",
                    "content": "oEmbed remote get arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "URL to be inspected.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed.php"
    },
    {
        "name": "oembed_request_post_id",
        "line": 126,
        "end_line": 126,
        "type": "filter",
        "doc": {
            "description": "Filters the determined post ID.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "The requested URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed-controller.php"
    },
    {
        "name": "oembed_response_data",
        "line": 564,
        "end_line": 564,
        "type": "filter",
        "doc": {
            "description": "Filters the oEmbed response data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The response data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "The post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "The requested width.",
                    "types": [
                        "int"
                    ],
                    "variable": "$width"
                },
                {
                    "name": "param",
                    "content": "The calculated height.",
                    "types": [
                        "int"
                    ],
                    "variable": "$height"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "oembed_result",
        "line": 412,
        "end_line": 412,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML returned by the oEmbed provider.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The returned oEmbed HTML (false if unsafe).",
                    "types": [
                        "string",
                        "false"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "URL of the content to be embedded.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Optional arguments, usually passed from a shortcode.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed.php"
    },
    {
        "name": "oembed_ttl",
        "line": 214,
        "end_line": 214,
        "type": "filter",
        "doc": {
            "description": "Filters the oEmbed TTL value (time to live).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "Time to live (in seconds).",
                    "types": [
                        "int"
                    ],
                    "variable": "$time"
                },
                {
                    "name": "param",
                    "content": "The attempted embed URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "An array of shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_ID"
                }
            ]
        },
        "file": "wp-includes/class-wp-embed.php"
    },
    {
        "name": "old_slug_redirect_post_id",
        "line": 1017,
        "end_line": 1017,
        "type": "filter",
        "doc": {
            "description": "Filters the old slug redirect post ID.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.3"
                },
                {
                    "name": "param",
                    "content": "The redirect post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/query.php"
    },
    {
        "name": "old_slug_redirect_url",
        "line": 1038,
        "end_line": 1038,
        "type": "filter",
        "doc": {
            "description": "Filters the old slug redirect URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The redirect URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-includes/query.php"
    },
    {
        "name": "option_page_capability_{$option_page}",
        "line": 44,
        "end_line": 44,
        "type": "filter",
        "doc": {
            "description": "Filters the capability required when using the Settings API.",
            "long_description": "<p>By default, the options groups for all registered settings require the manage_options capability. This filter is required to change the capability required for a certain options page.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "The capability used for the page, which is manage_options by default.",
                    "types": [
                        "string"
                    ],
                    "variable": "$capability"
                }
            ]
        },
        "file": "wp-admin/options.php"
    },
    {
        "name": "option_{$option}",
        "line": 152,
        "end_line": 152,
        "type": "filter",
        "doc": {
            "description": "Filters the value of an existing option.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0",
                    "description": "As 'option_' . $setting"
                },
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$option</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Value of the option. If stored serialized, it will be                       unserialized prior to being returned.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "override_load_textdomain",
        "line": 641,
        "end_line": 641,
        "type": "filter",
        "doc": {
            "description": "Filters whether to override the .mo file loading.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether to override the .mo file loading. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$override"
                },
                {
                    "name": "param",
                    "content": "Text domain. Unique identifier for retrieving translated strings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "Path to the MO file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mofile"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "override_post_lock",
        "line": 1717,
        "end_line": 1717,
        "type": "filter",
        "doc": {
            "description": "Filters whether to allow the post lock to be overridden.",
            "long_description": "<p>Returning false from the filter will disable the ability to override the post lock.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow the post lock to be overridden. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$override"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "The user with the lock for the post.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "override_unload_textdomain",
        "line": 713,
        "end_line": 713,
        "type": "filter",
        "doc": {
            "description": "Filters whether to override the text domain unloading.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to override the text domain unloading. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$override"
                },
                {
                    "name": "param",
                    "content": "Text domain. Unique identifier for retrieving translated strings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "page_attributes_dropdown_pages_args",
        "line": 937,
        "end_line": 937,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments used to generate a Pages drop-down element.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_dropdown_pages()"
                },
                {
                    "name": "param",
                    "content": "Array of arguments used to generate the pages drop-down.",
                    "types": [
                        "array"
                    ],
                    "variable": "$dropdown_args"
                },
                {
                    "name": "param",
                    "content": "The current post.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/meta-boxes.php"
    },
    {
        "name": "page_css_class",
        "line": 150,
        "end_line": 150,
        "type": "filter",
        "doc": {
            "description": "Filters the list of CSS classes to include with each page item in the list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_list_pages()"
                },
                {
                    "name": "param",
                    "content": "An array of CSS classes to be applied to each list item.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$css_class"
                },
                {
                    "name": "param",
                    "content": "Page data object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$page"
                },
                {
                    "name": "param",
                    "content": "Depth of page, used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "ID of the current page.",
                    "types": [
                        "int"
                    ],
                    "variable": "$current_page"
                }
            ]
        },
        "file": "wp-includes/class-walker-page.php"
    },
    {
        "name": "page_link",
        "line": 347,
        "end_line": 347,
        "type": "filter",
        "doc": {
            "description": "Filters the permalink for a page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The page's permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "The ID of the page.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Is it a sample permalink.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$sample"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "page_menu_link_attributes",
        "line": 181,
        "end_line": 181,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML attributes applied to a page menu item's anchor element.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "{     The HTML attributes applied to the menu item's <code>&lt;a&gt;</code> element, empty strings are ignored.     @type string $href         The href attribute.     @type string $aria_current The aria-current attribute. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$atts"
                },
                {
                    "name": "param",
                    "content": "Page data object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$page"
                },
                {
                    "name": "param",
                    "content": "Depth of page, used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "ID of the current page.",
                    "types": [
                        "int"
                    ],
                    "variable": "$current_page"
                }
            ]
        },
        "file": "wp-includes/class-walker-page.php"
    },
    {
        "name": "page_rewrite_rules",
        "line": 1378,
        "end_line": 1378,
        "type": "filter",
        "doc": {
            "description": "Filters rewrite rules used for \"page\" post type archives.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of rewrite rules for the \"page\" post type, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$page_rewrite"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "page_row_actions",
        "line": 1430,
        "end_line": 1430,
        "type": "filter",
        "doc": {
            "description": "Filters the array of row action links on the Pages list table.",
            "long_description": "<p>The filter is evaluated only for hierarchical post types.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of row action links. Defaults are                          'Edit', 'Quick Edit', 'Restore', 'Trash',                          'Delete Permanently', 'Preview', and 'View'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "The post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "paginate_links",
        "line": 4173,
        "end_line": 4173,
        "type": "filter",
        "doc": {
            "description": "Filters the paginated links for the given archive pages.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The paginated link URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "parent_file",
        "line": 38,
        "end_line": 38,
        "type": "filter",
        "doc": {
            "description": "Filters the parent file of an admin menu sub-menu item.",
            "long_description": "<p>Allows plugins to move sub-menu items around.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "The parent file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$parent_file"
                }
            ]
        },
        "file": "wp-admin/menu-header.php"
    },
    {
        "name": "parent_theme_file_path",
        "line": 4379,
        "end_line": 4379,
        "type": "filter",
        "doc": {
            "description": "Filters the path to a file in the parent theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The file path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "The requested file to search for.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "parent_theme_file_uri",
        "line": 4318,
        "end_line": 4318,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to a file in the parent theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The file URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The requested file to search for.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "password_change_email",
        "line": 2042,
        "end_line": 2042,
        "type": "filter",
        "doc": {
            "description": "Filters the contents of the email sent when the user's password is changed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "{            Used to build wp_mail().            @type string $to      The intended recipients. Add emails in a comma separated string.            @type string $subject The subject of the email.            @type string $message The content of the email.                The following strings have a special meaning and will get replaced dynamically:                - ###USERNAME###    The current user's username.                - ###ADMIN_EMAIL### The admin email in case this was unexpected.                - ###EMAIL###       The user's email address.                - ###SITENAME###    The name of the site.                - ###SITEURL###     The URL to the site.            @type string $headers Headers. Add headers in a newline (\\r\\n) separated string.        }",
                    "types": [
                        "array"
                    ],
                    "variable": "$pass_change_email"
                },
                {
                    "name": "param",
                    "content": "The original user array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "The updated user array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$userdata"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "password_hint",
        "line": 2244,
        "end_line": 2244,
        "type": "filter",
        "doc": {
            "description": "Filters the text describing the site's password complexity policy.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "The password hint text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$hint"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "password_reset_expiration",
        "line": 2390,
        "end_line": 2390,
        "type": "filter",
        "doc": {
            "description": "Filters the expiration time of password reset keys.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "The expiration time in seconds.",
                    "types": [
                        "int"
                    ],
                    "variable": "$expiration"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "password_reset_key_expired",
        "line": 2428,
        "end_line": 2428,
        "type": "filter",
        "doc": {
            "description": "Filters the return value of check_password_reset_key() when an old-style key is used.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0",
                    "description": "Previously plain-text keys were stored in the database."
                },
                {
                    "name": "since",
                    "content": "4.3.0",
                    "description": "Previously key hashes were stored without an expiration time."
                },
                {
                    "name": "param",
                    "content": "A WP_Error object denoting an expired key.                          Return a WP_User object to validate the key.",
                    "types": [
                        "\\WP_Error"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "The matched user ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "phone_content",
        "line": 211,
        "end_line": 211,
        "type": "filter",
        "doc": {
            "description": "Filters the content of the post submitted by email before saving.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "param",
                    "content": "The email content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-mail.php"
    },
    {
        "name": "pingback_ping_source_uri",
        "line": 6774,
        "end_line": 6774,
        "type": "filter",
        "doc": {
            "description": "Filters the pingback source URI.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "URI of the page linked from.",
                    "types": [
                        "string"
                    ],
                    "variable": "$pagelinkedfrom"
                },
                {
                    "name": "param",
                    "content": "URI of the page linked to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$pagelinkedto"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "pingback_useragent",
        "line": 2877,
        "end_line": 2877,
        "type": "filter",
        "doc": {
            "description": "Filters the user agent sent when pinging-back a URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The user agent concatenated with ' -- WordPress/'                                    and the WordPress version.",
                    "types": [
                        "string"
                    ],
                    "variable": "$concat_useragent"
                },
                {
                    "name": "param",
                    "content": "The useragent.",
                    "types": [
                        "string"
                    ],
                    "variable": "$useragent"
                },
                {
                    "name": "param",
                    "content": "The server URL being linked to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$pingback_server_url"
                },
                {
                    "name": "param",
                    "content": "URL of page linked to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$pagelinkedto"
                },
                {
                    "name": "param",
                    "content": "URL of page linked from.",
                    "types": [
                        "string"
                    ],
                    "variable": "$pagelinkedfrom"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pings_open",
        "line": 1259,
        "end_line": 1259,
        "type": "filter",
        "doc": {
            "description": "Filters whether the current post is open for pings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether the current post is open for pings.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$open"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "plugin_action_links",
        "line": 809,
        "end_line": 809,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed for each plugin in the Plugins list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "2.6.0",
                    "description": "The <code>$context</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "The 'Edit' link was removed from the list of action links."
                },
                {
                    "name": "param",
                    "content": "An array of plugin action links. By default this can include 'activate',                              'deactivate', and 'delete'. With Multisite active this can also include                              'network_active' and 'network_only' items.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "Path to the plugin file relative to the plugins directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plugin_file"
                },
                {
                    "name": "param",
                    "content": "An array of plugin data. See <code>get_plugin_data()</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plugin_data"
                },
                {
                    "name": "param",
                    "content": "The plugin context. By default this can include 'all', 'active', 'inactive',                              'recently_activated', 'upgrade', 'mustuse', 'dropins', and 'search'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugins-list-table.php"
    },
    {
        "name": "plugin_action_links_{$plugin_file}",
        "line": 828,
        "end_line": 828,
        "type": "filter",
        "doc": {
            "description": "Filters the list of action links displayed for a specific plugin in the Plugins list table.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$plugin_file</code>, refers to the path to the plugin file, relative to the plugins directory.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "The 'Edit' link was removed from the list of action links."
                },
                {
                    "name": "param",
                    "content": "An array of plugin action links. By default this can include 'activate',                              'deactivate', and 'delete'. With Multisite active this can also include                              'network_active' and 'network_only' items.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "Path to the plugin file relative to the plugins directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plugin_file"
                },
                {
                    "name": "param",
                    "content": "An array of plugin data. See <code>get_plugin_data()</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plugin_data"
                },
                {
                    "name": "param",
                    "content": "The plugin context. By default this can include 'all', 'active', 'inactive',                              'recently_activated', 'upgrade', 'mustuse', 'dropins', and 'search'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugins-list-table.php"
    },
    {
        "name": "plugin_files_exclusions",
        "line": 246,
        "end_line": 246,
        "type": "filter",
        "doc": {
            "description": "Filters the array of excluded directories and files while scanning the folder.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Array of excluded directories and files.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$exclusions"
                }
            ]
        },
        "file": "wp-admin/includes/plugin.php"
    },
    {
        "name": "plugin_install_action_links",
        "line": 641,
        "end_line": 641,
        "type": "filter",
        "doc": {
            "description": "Filters the install action links for a plugin.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of plugin action links. Defaults are links to Details and Install Now.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$action_links"
                },
                {
                    "name": "param",
                    "content": "The plugin currently being listed.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plugin"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugin-install-list-table.php"
    },
    {
        "name": "plugin_locale",
        "line": 806,
        "end_line": 806,
        "type": "filter",
        "doc": {
            "description": "Filters a plugin's locale.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The plugin's current locale.",
                    "types": [
                        "string"
                    ],
                    "variable": "$locale"
                },
                {
                    "name": "param",
                    "content": "Text domain. Unique identifier for retrieving translated strings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "plugin_row_meta",
        "line": 946,
        "end_line": 946,
        "type": "filter",
        "doc": {
            "description": "Filters the array of row meta for each plugin in the Plugins list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of the plugin's metadata,                              including the version, author,                              author URI, and plugin URI.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$plugin_meta"
                },
                {
                    "name": "param",
                    "content": "Path to the plugin file relative to the plugins directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plugin_file"
                },
                {
                    "name": "param",
                    "content": "An array of plugin data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plugin_data"
                },
                {
                    "name": "param",
                    "content": "Status of the plugin. Defaults are 'All', 'Active',                              'Inactive', 'Recently Activated', 'Upgrade', 'Must-Use',                              'Drop-ins', 'Search', 'Paused'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$status"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugins-list-table.php"
    },
    {
        "name": "plugins_api",
        "line": 150,
        "end_line": 150,
        "type": "filter",
        "doc": {
            "description": "Filters the response for the current WordPress.org Plugin Installation API request.",
            "long_description": "<p>Passing a non-false value will effectively short-circuit the WordPress.org API request.</p> <p>If <code>$action</code> is 'query_plugins' or 'plugin_information', an object MUST be passed. If <code>$action</code> is 'hot_tags' or 'hot_categories', an array should be passed.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The result object or array. Default false.",
                    "types": [
                        "false",
                        "object",
                        "array"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "The type of information being requested from the Plugin Installation API.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action"
                },
                {
                    "name": "param",
                    "content": "Plugin API arguments.",
                    "types": [
                        "object"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/plugin-install.php"
    },
    {
        "name": "plugins_api_args",
        "line": 134,
        "end_line": 134,
        "type": "filter",
        "doc": {
            "description": "Filters the WordPress.org Plugin Installation API arguments.",
            "long_description": "<p>Important: An object MUST be returned to this filter.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Plugin API arguments.",
                    "types": [
                        "object"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The type of information being requested from the Plugin Installation API.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action"
                }
            ]
        },
        "file": "wp-admin/includes/plugin-install.php"
    },
    {
        "name": "plugins_api_result",
        "line": 231,
        "end_line": 231,
        "type": "filter",
        "doc": {
            "description": "Filters the Plugin Installation API response results.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Response object or WP_Error.",
                    "types": [
                        "object",
                        "\\WP_Error"
                    ],
                    "variable": "$res"
                },
                {
                    "name": "param",
                    "content": "The type of information being requested from the Plugin Installation API.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action"
                },
                {
                    "name": "param",
                    "content": "Plugin API arguments.",
                    "types": [
                        "object"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/plugin-install.php"
    },
    {
        "name": "plugins_update_check_locales",
        "line": 348,
        "end_line": 348,
        "type": "filter",
        "doc": {
            "description": "Filters the locales requested for plugin translations.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "The default value of the <code>$locales</code> parameter changed to include all locales."
                },
                {
                    "name": "param",
                    "content": "Plugin locales. Default is all available locales of the site.",
                    "types": [
                        "array"
                    ],
                    "variable": "$locales"
                }
            ]
        },
        "file": "wp-includes/update.php"
    },
    {
        "name": "plugins_url",
        "line": 3420,
        "end_line": 3420,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to the plugins directory.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The complete URL to the plugins directory including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the URL to the plugins directory. Blank string                       if no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "The plugin file path to be relative to. Blank string if no plugin                       is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plugin"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "plupload_default_params",
        "line": 3360,
        "end_line": 3360,
        "type": "filter",
        "doc": {
            "description": "Filters the Plupload default parameters.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Default Plupload parameters array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$params"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "plupload_default_settings",
        "line": 3347,
        "end_line": 3347,
        "type": "filter",
        "doc": {
            "description": "Filters the Plupload default settings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Default Plupload settings array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$defaults"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "plupload_init",
        "line": 2152,
        "end_line": 2152,
        "type": "filter",
        "doc": {
            "description": "Filters the default Plupload settings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of default settings used by Plupload.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plupload_init"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "populate_network_meta",
        "line": 1272,
        "end_line": 1272,
        "type": "filter",
        "doc": {
            "description": "Filters meta for a network on creation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of network meta keys and values to be inserted.",
                    "types": [
                        "array"
                    ],
                    "variable": "$sitemeta"
                },
                {
                    "name": "param",
                    "content": "ID of network to populate.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-admin/includes/schema.php"
    },
    {
        "name": "populate_site_meta",
        "line": 1318,
        "end_line": 1318,
        "type": "filter",
        "doc": {
            "description": "Filters meta for a site on creation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of site meta keys and values to be inserted.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                },
                {
                    "name": "param",
                    "content": "ID of site to populate.",
                    "types": [
                        "int"
                    ],
                    "variable": "$site_id"
                }
            ]
        },
        "file": "wp-admin/includes/schema.php"
    },
    {
        "name": "post_class",
        "line": 577,
        "end_line": 577,
        "type": "filter",
        "doc": {
            "description": "Filters the list of CSS class names for the current post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of post class names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$classes"
                },
                {
                    "name": "param",
                    "content": "An array of additional class names added to the post.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$class"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "post_column_taxonomy_links",
        "line": 1215,
        "end_line": 1215,
        "type": "filter",
        "doc": {
            "description": "Filters the links in `$taxonomy` column of edit.php.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Array of term editing links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$term_links"
                },
                {
                    "name": "param",
                    "content": "Taxonomy name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "Array of term objects appearing in the post row.",
                    "types": [
                        "\\WP_Term[]"
                    ],
                    "variable": "$terms"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "post_comments_feed_link",
        "line": 736,
        "end_line": 736,
        "type": "filter",
        "doc": {
            "description": "Filters the post comments feed permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.1"
                },
                {
                    "name": "param",
                    "content": "Post comments feed permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "post_comments_feed_link_html",
        "line": 770,
        "end_line": 770,
        "type": "filter",
        "doc": {
            "description": "Filters the post comment feed link anchor tag.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The complete anchor tag for the comment feed link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "The feed type. Possible values include 'rss2', 'atom',                        or an empty string for the default feed type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "post_comments_link",
        "line": 1816,
        "end_line": 1816,
        "type": "filter",
        "doc": {
            "description": "Filters the formatted post comments link HTML.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The HTML-formatted post comments link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$formatted"
                },
                {
                    "name": "param",
                    "content": "The post ID or WP_Post object.",
                    "types": [
                        "int",
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "post_date_column_status",
        "line": 1103,
        "end_line": 1103,
        "type": "filter",
        "doc": {
            "description": "Filters the status text of the post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "The status text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$status"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "The column name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$column_name"
                },
                {
                    "name": "param",
                    "content": "The list display mode ('excerpt' or 'list').",
                    "types": [
                        "string"
                    ],
                    "variable": "$mode"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "post_date_column_time",
        "line": 1124,
        "end_line": 1124,
        "type": "filter",
        "doc": {
            "description": "Filters the published time of the post.",
            "long_description": "<p>If <code>$mode</code> equals 'excerpt', the published time and date are both displayed. If <code>$mode</code> equals 'list' (default), the publish date is displayed, with the time and date together available as an abbreviation definition.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.1"
                },
                {
                    "name": "param",
                    "content": "The published time.",
                    "types": [
                        "string"
                    ],
                    "variable": "$t_time"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "The column name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$column_name"
                },
                {
                    "name": "param",
                    "content": "The list display mode ('excerpt' or 'list').",
                    "types": [
                        "string"
                    ],
                    "variable": "$mode"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "post_edit_category_parent_dropdown_args",
        "line": 656,
        "end_line": 656,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the taxonomy parent dropdown on the Post Edit page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "{     Optional. Array of arguments to generate parent dropdown.     @type string   $taxonomy         Name of the taxonomy to retrieve.     @type bool     $hide_if_empty    True to skip generating markup if no                                      categories are found. Default 0.     @type string   $name             Value for the 'name' attribute                                      of the select element.                                      Default \"new{$tax_name}_parent\".     @type string   $orderby          Which column to use for ordering                                      terms. Default 'name'.     @type bool|int $hierarchical     Whether to traverse the taxonomy                                      hierarchy. Default 1.     @type string   $show_option_none Text to display for the \"none\" option.                                      Default \"&mdash; {$parent} &mdash;\",                                      where <code>$parent</code> is 'parent_item'                                      taxonomy label. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$parent_dropdown_args"
                }
            ]
        },
        "file": "wp-admin/includes/meta-boxes.php"
    },
    {
        "name": "post_embed_url",
        "line": 382,
        "end_line": 382,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to embed a specific post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The post embed URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$embed_url"
                },
                {
                    "name": "param",
                    "content": "The corresponding post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "post_format_rewrite_base",
        "line": 42,
        "end_line": 42,
        "type": "filter",
        "doc": {
            "description": "Filters the post formats rewrite base.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Context of the rewrite base. Default 'type'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "post_gallery",
        "line": 1867,
        "end_line": 1867,
        "type": "filter",
        "doc": {
            "description": "Filters the default gallery shortcode output.",
            "long_description": "<p>If the filtered output isn't empty, it will be used instead of generating the default gallery template.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "4.2.0",
                    "description": "The <code>$instance</code> parameter was added."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "gallery_shortcode()"
                },
                {
                    "name": "param",
                    "content": "The gallery output. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Attributes of the gallery shortcode.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "Unique numeric ID of this gallery shortcode instance.",
                    "types": [
                        "int"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "post_limits",
        "line": 2728,
        "end_line": 2728,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the LIMIT clause of the query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The LIMIT clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$limits"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "post_limits_request",
        "line": 2860,
        "end_line": 2860,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the LIMIT clause of the query.",
            "long_description": "<p>For use by caching plugins.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The LIMIT clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$limits"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "post_link",
        "line": 247,
        "end_line": 247,
        "type": "filter",
        "doc": {
            "description": "Filters the permalink for a post.",
            "long_description": "<p>Only applies to posts with post_type of 'post'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The post's permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$permalink"
                },
                {
                    "name": "param",
                    "content": "The post in question.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Whether to keep the post name.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$leavename"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "post_link_category",
        "line": 191,
        "end_line": 191,
        "type": "filter",
        "doc": {
            "description": "Filters the category that gets used in the %category% permalink token.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "The category to use in the permalink.",
                    "types": [
                        "\\WP_Term"
                    ],
                    "variable": "$cat"
                },
                {
                    "name": "param",
                    "content": "Array of all categories (WP_Term objects) associated with the post.",
                    "types": [
                        "array"
                    ],
                    "variable": "$cats"
                },
                {
                    "name": "param",
                    "content": "The post in question.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "post_mime_types",
        "line": 2800,
        "end_line": 2800,
        "type": "filter",
        "doc": {
            "description": "Filters the default list of post mime types.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Default list of post mime types.",
                    "types": [
                        "array"
                    ],
                    "variable": "$post_mime_types"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "post_password_expires",
        "line": 726,
        "end_line": 726,
        "type": "filter",
        "doc": {
            "description": "Filters the life span of the post password cookie.",
            "long_description": "<p>By default, the cookie expires 10 days from creation. To turn this into a session cookie, return 0.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "The expiry time, as passed to setcookie().",
                    "types": [
                        "int"
                    ],
                    "variable": "$expires"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "post_password_required",
        "line": 877,
        "end_line": 877,
        "type": "filter",
        "doc": {
            "description": "Filters whether a post requires the user to supply a password.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the user needs to supply a password. True if password has not been                          provided or is incorrect, false if password has been supplied or is not required.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$required"
                },
                {
                    "name": "param",
                    "content": "Post data.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "post_playlist",
        "line": 2198,
        "end_line": 2198,
        "type": "filter",
        "doc": {
            "description": "Filters the playlist output.",
            "long_description": "<p>Passing a non-empty value to the filter will short-circuit generation of the default playlist output, returning the passed value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "since",
                    "content": "4.2.0",
                    "description": "The <code>$instance</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Playlist output. Default empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "An array of shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "Unique numeric ID of this playlist shortcode instance.",
                    "types": [
                        "int"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "post_rewrite_rules",
        "line": 1292,
        "end_line": 1292,
        "type": "filter",
        "doc": {
            "description": "Filters rewrite rules used for \"post\" archives.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of rewrite rules for posts, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_rewrite"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "post_row_actions",
        "line": 1445,
        "end_line": 1445,
        "type": "filter",
        "doc": {
            "description": "Filters the array of row action links on the Posts list table.",
            "long_description": "<p>The filter is evaluated only for non-hierarchical post types.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of row action links. Defaults are                          'Edit', 'Quick Edit', 'Restore', 'Trash',                          'Delete Permanently', 'Preview', and 'View'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "The post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "post_thumbnail_html",
        "line": 200,
        "end_line": 200,
        "type": "filter",
        "doc": {
            "description": "Filters the post thumbnail HTML.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The post thumbnail HTML.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "The post thumbnail ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_thumbnail_id"
                },
                {
                    "name": "param",
                    "content": "The post thumbnail size. Image size or array of width and height                                        values (in that order). Default 'post-thumbnail'.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "Query string of attributes.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attr"
                }
            ]
        },
        "file": "wp-includes/post-thumbnail-template.php"
    },
    {
        "name": "post_thumbnail_size",
        "line": 151,
        "end_line": 151,
        "type": "filter",
        "doc": {
            "description": "Filters the post thumbnail size.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$post_id</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The post thumbnail size. Image size or array of width and height                              values (in that order). Default 'post-thumbnail'.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post-thumbnail-template.php"
    },
    {
        "name": "post_type_archive_feed_link",
        "line": 1298,
        "end_line": 1298,
        "type": "filter",
        "doc": {
            "description": "Filters the post type archive feed link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The post type archive feed link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Feed type. Possible values include 'rss2', 'atom'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "post_type_archive_link",
        "line": 1255,
        "end_line": 1255,
        "type": "filter",
        "doc": {
            "description": "Filters the post type archive permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The post type archive permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Post type name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "post_type_archive_title",
        "line": 1385,
        "end_line": 1385,
        "type": "filter",
        "doc": {
            "description": "Filters the post type archive title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Post type 'name' label.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type_name"
                },
                {
                    "name": "param",
                    "content": "Post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "post_type_labels_{$post_type}",
        "line": 1732,
        "end_line": 1732,
        "type": "filter",
        "doc": {
            "description": "Filters the labels of a specific post type.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$post_type</code>, refers to the post type slug.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "see",
                    "content": "for the full list of labels.",
                    "refers": "get_post_type_labels()"
                },
                {
                    "name": "param",
                    "content": "Object with labels for the post type as member variables.",
                    "types": [
                        "object"
                    ],
                    "variable": "$labels"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "post_type_link",
        "line": 313,
        "end_line": 313,
        "type": "filter",
        "doc": {
            "description": "Filters the permalink for a post of a custom post type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The post's permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_link"
                },
                {
                    "name": "param",
                    "content": "The post in question.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Whether to keep the post name.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$leavename"
                },
                {
                    "name": "param",
                    "content": "Is it a sample permalink.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$sample"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "post_types_to_delete_with_user",
        "line": 387,
        "end_line": 387,
        "type": "filter",
        "doc": {
            "description": "Filters the list of post types to delete with a user.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Array of post types to delete.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_types_to_delete"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-admin/includes/user.php"
    },
    {
        "name": "post_updated_messages",
        "line": 217,
        "end_line": 217,
        "type": "filter",
        "doc": {
            "description": "Filters the post updated messages.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Post updated messages. For defaults see <code>$messages</code> declarations above.",
                    "types": [
                        "array[]"
                    ],
                    "variable": "$messages"
                }
            ]
        },
        "file": "wp-admin/edit-form-advanced.php"
    },
    {
        "name": "post_{$field}",
        "line": 2479,
        "end_line": 2479,
        "type": "filter",
        "doc": {
            "description": "",
            "long_description": "",
            "tags": []
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "postbox_classes_{$screen_id}_{$box_id}",
        "line": 1310,
        "end_line": 1310,
        "type": "filter",
        "doc": {
            "description": "Filters the postbox classes for a specific screen and box ID combo.",
            "long_description": "<p>The dynamic portions of the hook name, <code>$screen_id</code> and <code>$box_id</code>, refer to the screen ID and meta box ID, respectively.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "An array of postbox classes.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$classes"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "postmeta_form_keys",
        "line": 678,
        "end_line": 678,
        "type": "filter",
        "doc": {
            "description": "Filters values for the meta key dropdown in the Custom Fields meta box.",
            "long_description": "<p>Returning a non-null value will effectively short-circuit and avoid a potentially expensive query against postmeta.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Pre-defined meta keys to be used in place of a postmeta query. Default null.",
                    "types": [
                        "array",
                        "null"
                    ],
                    "variable": "$keys"
                },
                {
                    "name": "param",
                    "content": "The current post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/template.php"
    },
    {
        "name": "postmeta_form_limit",
        "line": 689,
        "end_line": 689,
        "type": "filter",
        "doc": {
            "description": "Filters the number of custom fields to retrieve for the drop-down in the Custom Fields meta box.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Number of custom fields to retrieve. Default 30.",
                    "types": [
                        "int"
                    ],
                    "variable": "$limit"
                }
            ]
        },
        "file": "wp-admin/includes/template.php"
    },
    {
        "name": "posts_clauses",
        "line": 2751,
        "end_line": 2751,
        "type": "filter_reference",
        "doc": {
            "description": "Filters all query clauses at once, for convenience.",
            "long_description": "<p>Covers the WHERE, GROUP BY, JOIN, ORDER BY, DISTINCT, fields (SELECT), and LIMITS clauses.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of the clauses for the query.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$clauses"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_clauses_request",
        "line": 2875,
        "end_line": 2875,
        "type": "filter_reference",
        "doc": {
            "description": "Filters all query clauses at once, for convenience.",
            "long_description": "<p>For use by caching plugins.</p> <p>Covers the WHERE, GROUP BY, JOIN, ORDER BY, DISTINCT, fields (SELECT), and LIMITS clauses.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of the pieces of the query.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$pieces"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_distinct",
        "line": 2718,
        "end_line": 2718,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the DISTINCT clause of the query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The DISTINCT clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$distinct"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_distinct_request",
        "line": 2836,
        "end_line": 2836,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the DISTINCT clause of the query.",
            "long_description": "<p>For use by caching plugins.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The DISTINCT clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$distinct"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_fields",
        "line": 2738,
        "end_line": 2738,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the SELECT clause of the query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The SELECT clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_fields_request",
        "line": 2848,
        "end_line": 2848,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the SELECT clause of the query.",
            "long_description": "<p>For use by caching plugins.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The SELECT clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_groupby",
        "line": 2686,
        "end_line": 2686,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the GROUP BY clause of the query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "The GROUP BY clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$groupby"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_groupby_request",
        "line": 2800,
        "end_line": 2800,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the GROUP BY clause of the query.",
            "long_description": "<p>For use by caching plugins.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The GROUP BY clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$groupby"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_join",
        "line": 2551,
        "end_line": 2551,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the JOIN clause of the query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The JOIN clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$join"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_join_paged",
        "line": 2698,
        "end_line": 2698,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the JOIN clause of the query.",
            "long_description": "<p>Specifically for manipulating paging queries.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The JOIN clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$join"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_join_request",
        "line": 2812,
        "end_line": 2812,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the JOIN clause of the query.",
            "long_description": "<p>For use by caching plugins.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The JOIN clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$join"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_orderby",
        "line": 2708,
        "end_line": 2708,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the ORDER BY clause of the query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.1"
                },
                {
                    "name": "param",
                    "content": "The ORDER BY clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$orderby"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_orderby_request",
        "line": 2824,
        "end_line": 2824,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the ORDER BY clause of the query.",
            "long_description": "<p>For use by caching plugins.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The ORDER BY clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$orderby"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_pre_query",
        "line": 2929,
        "end_line": 2929,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the posts array before the query takes place.",
            "long_description": "<p>Return a non-null value to bypass WordPress's default post queries.</p> <p>Filtering functions that require pagination information are encouraged to set the <code>found_posts</code> and <code>max_num_pages</code> properties of the WP_Query object, passed to the filter by reference. If WP_Query does not perform a database query, it will not have enough information to generate these values itself.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Return an array of post data to short-circuit WP's query,                          or null to allow WP to run its normal queries.",
                    "types": [
                        "array",
                        "null"
                    ],
                    "variable": "$posts"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_request",
        "line": 2910,
        "end_line": 2910,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the completed SQL query before sending.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "The complete SQL query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$request"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_request_ids",
        "line": 2992,
        "end_line": 2992,
        "type": "filter",
        "doc": {
            "description": "Filters the Post IDs SQL request before sending.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "The post ID request.",
                    "types": [
                        "string"
                    ],
                    "variable": "$request"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance.",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_results",
        "line": 3023,
        "end_line": 3023,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the raw post results array, prior to status checks.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Array of post objects.",
                    "types": [
                        "\\WP_Post[]"
                    ],
                    "variable": "$posts"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_search",
        "line": 2104,
        "end_line": 2104,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the search SQL that is used in the WHERE clause of WP_Query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Search SQL for WHERE clause.",
                    "types": [
                        "string"
                    ],
                    "variable": "$search"
                },
                {
                    "name": "param",
                    "content": "The current WP_Query object.",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_search_orderby",
        "line": 2359,
        "end_line": 2359,
        "type": "filter",
        "doc": {
            "description": "Filters the ORDER BY used when ordering search results.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "The ORDER BY clause.",
                    "types": [
                        "string"
                    ],
                    "variable": "$search_orderby"
                },
                {
                    "name": "param",
                    "content": "The current WP_Query instance.",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_where",
        "line": 2541,
        "end_line": 2541,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the WHERE clause of the query.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The WHERE clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$where"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_where_paged",
        "line": 2676,
        "end_line": 2676,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the WHERE clause of the query.",
            "long_description": "<p>Specifically for manipulating paging queries.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The WHERE clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$where"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "posts_where_request",
        "line": 2788,
        "end_line": 2788,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the WHERE clause of the query.",
            "long_description": "<p>For use by caching plugins.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The WHERE clause of the query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$where"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "pre_add_site_option_{$option}",
        "line": 1380,
        "end_line": 1380,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a specific network option before it is added.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0",
                    "description": "As 'pre_add_site<em>option</em>' . $key"
                },
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$option</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "The <code>$network_id</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Value of network option.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "ID of the network.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_cache_alloptions",
        "line": 227,
        "end_line": 227,
        "type": "filter",
        "doc": {
            "description": "Filters all options before caching them.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Array with all options.",
                    "types": [
                        "array"
                    ],
                    "variable": "$alloptions"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_category_nicename",
        "line": 1609,
        "end_line": 1609,
        "type": "filter",
        "doc": {
            "description": "Filters the category nicename before it is sanitized.",
            "long_description": "<p>Use the {@see 'pre<em>$taxonomy</em>$field'} hook instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "The category nicename.",
                    "types": [
                        "string"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "pre_clear_scheduled_hook",
        "line": 424,
        "end_line": 424,
        "type": "filter",
        "doc": {
            "description": "Filter to preflight or hijack clearing a scheduled hook.",
            "long_description": "<p>Returning a non-null value will short-circuit the normal unscheduling process, causing the function to return the filtered value instead.</p> <p>For plugins replacing wp-cron, return the number of events successfully unscheduled (zero if no events were registered with the hook) or false if unscheduling one or more events fails.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Value to return instead. Default null to continue unscheduling the event.",
                    "types": [
                        "null",
                        "int",
                        "false"
                    ],
                    "variable": "$pre"
                },
                {
                    "name": "param",
                    "content": "Action hook, the execution of which will be unscheduled.",
                    "types": [
                        "string"
                    ],
                    "variable": "$hook"
                },
                {
                    "name": "param",
                    "content": "Arguments to pass to the hook's callback function.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "pre_comment_approved",
        "line": 826,
        "end_line": 826,
        "type": "filter",
        "doc": {
            "description": "Filters a comment's approval status before it is set.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Returning a WP_Error value from the filter will shortcircuit comment insertion and              allow skipping further processing."
                },
                {
                    "name": "param",
                    "content": "The approval status. Accepts 1, 0, 'spam' or WP_Error.",
                    "types": [
                        "int",
                        "string",
                        "\\WP_Error"
                    ],
                    "variable": "$approved"
                },
                {
                    "name": "param",
                    "content": "Comment data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$commentdata"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pre_comment_author_email",
        "line": 618,
        "end_line": 618,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's email cookie before it is set.",
            "long_description": "<p>When this filter hook is evaluated in wp_filter_comment(), the comment author's email string is passed.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The comment author email cookie.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author_email_cookie"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pre_comment_author_name",
        "line": 601,
        "end_line": 601,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's name cookie before it is set.",
            "long_description": "<p>When this filter hook is evaluated in wp_filter_comment(), the comment author's name string is passed.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The comment author name cookie.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author_cookie"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pre_comment_author_url",
        "line": 635,
        "end_line": 635,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's URL cookie before it is set.",
            "long_description": "<p>When this filter hook is evaluated in wp_filter_comment(), the comment author's URL string is passed.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The comment author URL cookie.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author_url_cookie"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pre_comment_content",
        "line": 1989,
        "end_line": 1989,
        "type": "filter",
        "doc": {
            "description": "Filters the comment content before it is set.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The comment content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_content"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pre_comment_user_agent",
        "line": 1979,
        "end_line": 1979,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's browser user agent before it is set.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The comment author's browser user agent.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_agent"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pre_comment_user_ip",
        "line": 1997,
        "end_line": 1997,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's IP address before it is set.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The comment author's IP address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_author_ip"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pre_count_users",
        "line": 889,
        "end_line": 889,
        "type": "filter",
        "doc": {
            "description": "Filter the user count before queries are run. Return a non-null value to cause count_users() to return early.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Default null.",
                    "types": [
                        "null",
                        "string"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Optional. The computational strategy to use when counting the users.                              Accepts either 'time' or 'memory'. Default 'time'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$strategy"
                },
                {
                    "name": "param",
                    "content": "Optional. The site ID to count users for. Defaults to the current site.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$site_id"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_delete_post",
        "line": 2960,
        "end_line": 2960,
        "type": "filter",
        "doc": {
            "description": "Filters whether a post deletion should take place.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to go forward with deletion.",
                    "types": [
                        "bool",
                        "null"
                    ],
                    "variable": "$delete"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Whether to bypass the trash.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$force_delete"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "pre_determine_locale",
        "line": 131,
        "end_line": 131,
        "type": "filter",
        "doc": {
            "description": "Filters the locale for the current request prior to the default determination process.",
            "long_description": "<p>Using this filter allows to override the default logic, effectively short-circuiting the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "The locale to return and short-circuit. Default null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$locale"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "pre_do_shortcode_tag",
        "line": 318,
        "end_line": 318,
        "type": "filter",
        "doc": {
            "description": "Filters whether to call a shortcode callback.",
            "long_description": "<p>Returning a non-false value from filter will short-circuit the shortcode generation process, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Short-circuit return value. Either false or the value to replace the shortcode with.",
                    "types": [
                        "false",
                        "string"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "Shortcode name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$tag"
                },
                {
                    "name": "param",
                    "content": "Shortcode attributes array or empty string.",
                    "types": [
                        "array",
                        "string"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "Regular expression match array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$m"
                }
            ]
        },
        "file": "wp-includes/shortcodes.php"
    },
    {
        "name": "pre_ent2ncr",
        "line": 3909,
        "end_line": 3909,
        "type": "filter",
        "doc": {
            "description": "Filters text before named entities are converted into numbered entities.",
            "long_description": "<p>A non-null string must be returned for the filter to be evaluated.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "The text to be converted. Default null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$converted_text"
                },
                {
                    "name": "param",
                    "content": "The text prior to entity conversion.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "pre_get_avatar",
        "line": 2628,
        "end_line": 2628,
        "type": "filter",
        "doc": {
            "description": "Filters whether to retrieve the avatar URL early.",
            "long_description": "<p>Passing a non-null value will effectively short-circuit get_avatar(), passing the value through the {@see 'get_avatar'} filter and returning early.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "HTML for the user's avatar. Default null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$avatar"
                },
                {
                    "name": "param",
                    "content": "The Gravatar to retrieve. Accepts a user_id, gravatar md5 hash,                                 user email, WP_User object, WP_Post object, or WP_Comment object.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$id_or_email"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to get_avatar_url(), after processing.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "pre_get_avatar_data",
        "line": 4154,
        "end_line": 4154,
        "type": "filter",
        "doc": {
            "description": "Filters whether to retrieve the avatar URL early.",
            "long_description": "<p>Passing a non-null value in the 'url' member of the return array will effectively short circuit get_avatar_data(), passing the value through the {@see 'get_avatar_data'} filter and returning early.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to get_avatar_data(), after processing.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The Gravatar to retrieve. Accepts a user ID, Gravatar MD5 hash,                           user email, WP_User object, WP_Post object, or WP_Comment object.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$id_or_email"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "pre_get_blogs_of_user",
        "line": 620,
        "end_line": 620,
        "type": "filter",
        "doc": {
            "description": "Filters the list of a user's sites before it is populated.",
            "long_description": "<p>Passing a non-null value to the filter will effectively short circuit get_blogs_of_user(), returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "An array of site objects of which the user is a member.",
                    "types": [
                        "null",
                        "array"
                    ],
                    "variable": "$sites"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Whether the returned array should contain all sites, including                            those marked 'deleted', 'archived', or 'spam'. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$all"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_get_col_charset",
        "line": 2817,
        "end_line": 2817,
        "type": "filter",
        "doc": {
            "description": "Filters the column charset value before the DB is checked.",
            "long_description": "<p>Passing a non-null value to the filter will short-circuit checking the DB for the charset, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "The character set to use. Default null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$charset"
                },
                {
                    "name": "param",
                    "content": "The name of the table being checked.",
                    "types": [
                        "string"
                    ],
                    "variable": "$table"
                },
                {
                    "name": "param",
                    "content": "The name of the column being checked.",
                    "types": [
                        "string"
                    ],
                    "variable": "$column"
                }
            ]
        },
        "file": "wp-includes/wp-db.php"
    },
    {
        "name": "pre_get_document_title",
        "line": 1040,
        "end_line": 1040,
        "type": "filter",
        "doc": {
            "description": "Filters the document title before it is generated.",
            "long_description": "<p>Passing a non-empty value will short-circuit wp_get_document_title(), returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The document title. Default empty string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "pre_get_lastpostmodified",
        "line": 6430,
        "end_line": 6430,
        "type": "filter",
        "doc": {
            "description": "Pre-filter the return value of get_lastpostmodified() before the query is run.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The most recent time that a post was modified, in 'Y-m-d H:i:s' format, or                                       false. Returning anything other than false will short-circuit the function.",
                    "types": [
                        "string",
                        "false"
                    ],
                    "variable": "$lastpostmodified"
                },
                {
                    "name": "param",
                    "content": "Location to use for getting the post modified date.                                       See get_lastpostdate() for accepted <code>$timezone</code> values.",
                    "types": [
                        "string"
                    ],
                    "variable": "$timezone"
                },
                {
                    "name": "param",
                    "content": "The post type to check.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "pre_get_main_site_id",
        "line": 229,
        "end_line": 229,
        "type": "filter",
        "doc": {
            "description": "Filters the main site ID.",
            "long_description": "<p>Returning a positive integer will effectively short-circuit the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "If a positive integer is returned, it is interpreted as the main site ID.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$main_site_id"
                },
                {
                    "name": "param",
                    "content": "The network object for which the main site was detected.",
                    "types": [
                        "\\WP_Network"
                    ],
                    "variable": "$network"
                }
            ]
        },
        "file": "wp-includes/class-wp-network.php"
    },
    {
        "name": "pre_get_network_by_path",
        "line": 417,
        "end_line": 417,
        "type": "filter",
        "doc": {
            "description": "Determine a network by its domain and path.",
            "long_description": "<p>This allows one to short-circuit the default logic, perhaps by replacing it with a routine that is more optimal for your setup.</p> <p>Return null to avoid the short-circuit. Return false if no network can be found at the requested domain and path. Otherwise, return an object from wp_get_network().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "Network value to return by path.",
                    "types": [
                        "null",
                        "bool",
                        "\\WP_Network"
                    ],
                    "variable": "$network"
                },
                {
                    "name": "param",
                    "content": "The requested domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "The requested path, in full.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "The suggested number of paths to consult.                                       Default null, meaning the entire path was to be consulted.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$segments"
                },
                {
                    "name": "param",
                    "content": "Array of paths to search for, based on <code>$path</code> and <code>$segments</code>.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$paths"
                }
            ]
        },
        "file": "wp-includes/class-wp-network.php"
    },
    {
        "name": "pre_get_ready_cron_jobs",
        "line": 891,
        "end_line": 891,
        "type": "filter",
        "doc": {
            "description": "Filter to preflight or hijack retrieving ready cron jobs.",
            "long_description": "<p>Returning an array will short-circuit the normal retrieval of ready cron jobs, causing the function to return the filtered value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of ready cron tasks to return instead. Default null                        to continue using results from _get_cron_array().",
                    "types": [
                        "null",
                        "array"
                    ],
                    "variable": "$pre"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "pre_get_scheduled_event",
        "line": 552,
        "end_line": 552,
        "type": "filter",
        "doc": {
            "description": "Filter to preflight or hijack retrieving a scheduled event.",
            "long_description": "<p>Returning a non-null value will short-circuit the normal process, returning the filtered value instead.</p> <p>Return false if the event does not exist, otherwise an event object should be returned.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Value to return instead. Default null to continue retrieving the event.",
                    "types": [
                        "null",
                        "false",
                        "object"
                    ],
                    "variable": "$pre"
                },
                {
                    "name": "param",
                    "content": "Action hook of the event.",
                    "types": [
                        "string"
                    ],
                    "variable": "$hook"
                },
                {
                    "name": "param",
                    "content": "Array containing each separate argument to pass to the hook's callback function.                                Although not passed to a callback, these arguments are used to uniquely identify                                the event.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Unix timestamp (UTC) of the event. Null to retrieve next scheduled event.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$timestamp"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "pre_get_shortlink",
        "line": 3859,
        "end_line": 3859,
        "type": "filter",
        "doc": {
            "description": "Filters whether to preempt generating a shortlink for the given post.",
            "long_description": "<p>Passing a truthy value to the filter will effectively short-circuit the shortlink-generation process, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Short-circuit return value. Either false or a URL string.",
                    "types": [
                        "bool",
                        "string"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "Post ID, or 0 for the current post.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                },
                {
                    "name": "param",
                    "content": "The context for the link. One of 'post' or 'query',",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                },
                {
                    "name": "param",
                    "content": "Whether to allow post slugs in the shortlink.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow_slugs"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "pre_get_site_by_path",
        "line": 213,
        "end_line": 213,
        "type": "filter",
        "doc": {
            "description": "Determine a site by its domain and path.",
            "long_description": "<p>This allows one to short-circuit the default logic, perhaps by replacing it with a routine that is more optimal for your setup.</p> <p>Return null to avoid the short-circuit. Return false if no site can be found at the requested domain and path. Otherwise, return a site object.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "Site value to return by path.",
                    "types": [
                        "null",
                        "false",
                        "\\WP_Site"
                    ],
                    "variable": "$site"
                },
                {
                    "name": "param",
                    "content": "The requested domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "The requested path, in full.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "The suggested number of paths to consult.                                     Default null, meaning the entire path was to be consulted.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$segments"
                },
                {
                    "name": "param",
                    "content": "The paths to search for, based on $path and $segments.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$paths"
                }
            ]
        },
        "file": "wp-includes/ms-load.php"
    },
    {
        "name": "pre_get_space_used",
        "line": 2441,
        "end_line": 2441,
        "type": "filter",
        "doc": {
            "description": "Filters the amount of storage space used by the current site, in megabytes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "The amount of used space, in megabytes. Default false.",
                    "types": [
                        "int",
                        "false"
                    ],
                    "variable": "$space_used"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "pre_get_table_charset",
        "line": 2712,
        "end_line": 2712,
        "type": "filter",
        "doc": {
            "description": "Filters the table charset value before the DB is checked.",
            "long_description": "<p>Passing a non-null value to the filter will effectively short-circuit checking the DB for the charset, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "The character set to use. Default null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$charset"
                },
                {
                    "name": "param",
                    "content": "The name of the table being checked.",
                    "types": [
                        "string"
                    ],
                    "variable": "$table"
                }
            ]
        },
        "file": "wp-includes/wp-db.php"
    },
    {
        "name": "pre_handle_404",
        "line": 648,
        "end_line": 648,
        "type": "filter",
        "doc": {
            "description": "Filters whether to short-circuit default header status handling.",
            "long_description": "<p>Returning a non-false value from the filter will short-circuit the handling and return early.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether to short-circuit default header status handling. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$preempt"
                },
                {
                    "name": "param",
                    "content": "WordPress Query object.",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$wp_query"
                }
            ]
        },
        "file": "wp-includes/class-wp.php"
    },
    {
        "name": "pre_http_request",
        "line": 257,
        "end_line": 257,
        "type": "filter",
        "doc": {
            "description": "Filters whether to preempt an HTTP request's return value.",
            "long_description": "<p>Returning a non-false value from the filter will short-circuit the HTTP request and return early with that value. A filter should return either:</p> <ul> <li>An array containing 'headers', 'body', 'response', 'cookies', and 'filename' elements</li> <li>A WP_Error instance</li> <li>boolean false (to avoid short-circuiting the response)</li> </ul> <p>Returning any other value may result in unexpected behaviour.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether to preempt an HTTP request's return value. Default false.",
                    "types": [
                        "false",
                        "array",
                        "\\WP_Error"
                    ],
                    "variable": "$preempt"
                },
                {
                    "name": "param",
                    "content": "HTTP request arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                },
                {
                    "name": "param",
                    "content": "The request URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-http.php"
    },
    {
        "name": "pre_http_send_through_proxy",
        "line": 196,
        "end_line": 196,
        "type": "filter",
        "doc": {
            "description": "Filters whether to preempt sending the request through the proxy.",
            "long_description": "<p>Returning false will bypass the proxy; returning true will send the request through the proxy. Returning null bypasses the filter.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether to override the request result. Default null.",
                    "types": [
                        "bool",
                        "null"
                    ],
                    "variable": "$override"
                },
                {
                    "name": "param",
                    "content": "URL to check.",
                    "types": [
                        "string"
                    ],
                    "variable": "$uri"
                },
                {
                    "name": "param",
                    "content": "Associative array result of parsing the request URI.",
                    "types": [
                        "array"
                    ],
                    "variable": "$check"
                },
                {
                    "name": "param",
                    "content": "Associative array result of parsing the site URL.",
                    "types": [
                        "array"
                    ],
                    "variable": "$home"
                }
            ]
        },
        "file": "wp-includes/class-wp-http-proxy.php"
    },
    {
        "name": "pre_insert_term",
        "line": 2129,
        "end_line": 2129,
        "type": "filter",
        "doc": {
            "description": "Filters a term before it is sanitized and inserted into the database.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The term name to add or update, or a WP_Error object if there's an error.",
                    "types": [
                        "string",
                        "\\WP_Error"
                    ],
                    "variable": "$term"
                },
                {
                    "name": "param",
                    "content": "Taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "pre_kses",
        "line": 914,
        "end_line": 914,
        "type": "filter",
        "doc": {
            "description": "Filters content to be run through kses.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Content to run through KSES.",
                    "types": [
                        "string"
                    ],
                    "variable": "$string"
                },
                {
                    "name": "param",
                    "content": "Allowed HTML elements.",
                    "types": [
                        "array[]",
                        "string"
                    ],
                    "variable": "$allowed_html"
                },
                {
                    "name": "param",
                    "content": "Array of allowed URL protocols.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$allowed_protocols"
                }
            ]
        },
        "file": "wp-includes/kses.php"
    },
    {
        "name": "pre_load_script_translations",
        "line": 1076,
        "end_line": 1076,
        "type": "filter",
        "doc": {
            "description": "Pre-filters script translations for the given file, script handle and text domain.",
            "long_description": "<p>Returning a non-null value allows to override the default logic, effectively short-circuiting the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.2"
                },
                {
                    "name": "param",
                    "content": "JSON-encoded translation data. Default null.",
                    "types": [
                        "string",
                        "false",
                        "null"
                    ],
                    "variable": "$translations"
                },
                {
                    "name": "param",
                    "content": "Path to the translation file to load. False if there isn't one.",
                    "types": [
                        "string",
                        "false"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "Name of the script to register a translation domain to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$handle"
                },
                {
                    "name": "param",
                    "content": "The text domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "pre_move_uploaded_file",
        "line": 860,
        "end_line": 860,
        "type": "filter",
        "doc": {
            "description": "Filters whether to short-circuit moving the uploaded file after passing all checks.",
            "long_description": "<p>If a non-null value is passed to the filter, moving the file and any related error reporting will be completely skipped.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "If null (default) move the file after the upload.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$move_new_file"
                },
                {
                    "name": "param",
                    "content": "An array of data for a single file.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "Filename of the newly-uploaded file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$new_file"
                },
                {
                    "name": "param",
                    "content": "File type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "pre_oembed_result",
        "line": 391,
        "end_line": 391,
        "type": "filter",
        "doc": {
            "description": "Filters the oEmbed result before any HTTP requests are made.",
            "long_description": "<p>This allows one to short-circuit the default logic, perhaps by replacing it with a routine that is more optimal for your setup.</p> <p>Passing a non-null value to the filter will effectively short-circuit retrieval, returning the passed value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.3"
                },
                {
                    "name": "param",
                    "content": "The UNSANITIZED (and potentially unsafe) HTML that should be used to embed. Default null.",
                    "types": [
                        "null",
                        "string"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "The URL to the content that should be attempted to be embedded.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Optional. Arguments, usually passed from a shortcode. Default empty.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed.php"
    },
    {
        "name": "pre_option_{$option}",
        "line": 58,
        "end_line": 58,
        "type": "filter",
        "doc": {
            "description": "Filters the value of an existing option before it is retrieved.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p> <p>Passing a truthy value to the filter will short-circuit retrieving the option value, returning the passed value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$option</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "The <code>$default</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The value to return instead of the option value. This differs from                               <code>$default</code>, which is used as the fallback value in the event the option                               doesn't exist elsewhere in get_option(). Default false (to skip past the                               short-circuit).",
                    "types": [
                        "bool",
                        "mixed"
                    ],
                    "variable": "$pre_option"
                },
                {
                    "name": "param",
                    "content": "Option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "The fallback value to return if the option does not exist.                               Default is false.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$default"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_post_link",
        "line": 166,
        "end_line": 166,
        "type": "filter",
        "doc": {
            "description": "Filters the permalink structure for a post before token replacement occurs.",
            "long_description": "<p>Only applies to posts with post_type of 'post'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The site's permalink structure.",
                    "types": [
                        "string"
                    ],
                    "variable": "$permalink"
                },
                {
                    "name": "param",
                    "content": "The post in question.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Whether to keep the post name.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$leavename"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "pre_post_{$field}",
        "line": 2444,
        "end_line": 2444,
        "type": "filter",
        "doc": {
            "description": "",
            "long_description": "",
            "tags": []
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "pre_prepare_themes_for_js",
        "line": 604,
        "end_line": 604,
        "type": "filter",
        "doc": {
            "description": "Filters theme data before it is prepared for JavaScript.",
            "long_description": "<p>Passing a non-empty array will result in wp_prepare_themes_for_js() returning early with that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "An associative array of theme data. Default empty array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$prepared_themes"
                },
                {
                    "name": "param",
                    "content": "An array of theme objects to prepare, if any.",
                    "types": [
                        "\\WP_Theme[]",
                        "null"
                    ],
                    "variable": "$themes"
                },
                {
                    "name": "param",
                    "content": "The current theme slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$current_theme"
                }
            ]
        },
        "file": "wp-admin/includes/theme.php"
    },
    {
        "name": "pre_remote_source",
        "line": 6880,
        "end_line": 6880,
        "type": "filter",
        "doc": {
            "description": "Filters the pingback remote source.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Response source for the page linked from.",
                    "types": [
                        "string"
                    ],
                    "variable": "$remote_source"
                },
                {
                    "name": "param",
                    "content": "URL of the page linked to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$pagelinkedto"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "pre_render_block",
        "line": 231,
        "end_line": 231,
        "type": "filter",
        "doc": {
            "description": "Allows render_block() to be shortcircuited, by returning a non-null value.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "The pre-rendered content. Default null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$pre_render"
                },
                {
                    "name": "param",
                    "content": "The block being rendered.",
                    "types": [
                        "array"
                    ],
                    "variable": "$block"
                }
            ]
        },
        "file": "wp-includes/blocks.php"
    },
    {
        "name": "pre_reschedule_event",
        "line": 305,
        "end_line": 305,
        "type": "filter",
        "doc": {
            "description": "Filter to preflight or hijack rescheduling of events.",
            "long_description": "<p>Returning a non-null value will short-circuit the normal rescheduling process, causing the function to return the filtered value instead.</p> <p>For plugins replacing wp-cron, return true if the event was successfully rescheduled, false if not.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Value to return instead. Default null to continue adding the event.",
                    "types": [
                        "null",
                        "bool"
                    ],
                    "variable": "$pre"
                },
                {
                    "name": "param",
                    "content": "{     An object containing an event's data.     @type string       $hook      Action hook to execute when the event is run.     @type int          $timestamp Unix timestamp (UTC) for when to next run the event.     @type string|false $schedule  How often the event should subsequently recur.     @type array        $args      Array containing each separate argument to pass to the hook's callback function.     @type int          $interval  The interval time in seconds for the schedule. Only present for recurring events. }",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$event"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "pre_schedule_event",
        "line": 77,
        "end_line": 77,
        "type": "filter",
        "doc": {
            "description": "Filter to preflight or hijack scheduling an event.",
            "long_description": "<p>Returning a non-null value will short-circuit adding the event to the cron array, causing the function to return the filtered value instead.</p> <p>Both single events and recurring events are passed through this filter; single events have <code>$event-&gt;schedule</code> as false, whereas recurring events have this set to a recurrence from wp_get_schedules(). Recurring events also have the integer recurrence interval set as <code>$event-&gt;interval</code>.</p> <p>For plugins replacing wp-cron, it is recommended you check for an identical event within ten minutes and apply the {@see 'schedule_event'} filter to check if another plugin has disallowed the event before scheduling.</p> <p>Return true if the event was scheduled, false if not.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Value to return instead. Default null to continue adding the event.",
                    "types": [
                        "null",
                        "bool"
                    ],
                    "variable": "$pre"
                },
                {
                    "name": "param",
                    "content": "{     An object containing an event's data.     @type string       $hook      Action hook to execute when the event is run.     @type int          $timestamp Unix timestamp (UTC) for when to next run the event.     @type string|false $schedule  How often the event should subsequently recur.     @type array        $args      Array containing each separate argument to pass to the hook's callback function.     @type int          $interval  The interval time in seconds for the schedule. Only present for recurring events. }",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$event"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "pre_set_site_transient_{$transient}",
        "line": 1829,
        "end_line": 1829,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a specific site transient before it is set.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$transient</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "New value of site transient.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Transient name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$transient"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_set_theme_mod_{$name}",
        "line": 971,
        "end_line": 971,
        "type": "filter",
        "doc": {
            "description": "Filters the theme modification, or 'theme_mod', value on save.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$name</code>, refers to the key name of the modification array. For example, 'header_textcolor', 'header_image', and so on depending on the theme options.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "The new value of the theme modification.",
                    "types": [
                        "string"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "The current value of the theme modification.",
                    "types": [
                        "string"
                    ],
                    "variable": "$old_value"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "pre_set_transient_{$transient}",
        "line": 771,
        "end_line": 771,
        "type": "filter",
        "doc": {
            "description": "Filters a specific transient before its value is set.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.2.0",
                    "description": "The <code>$expiration</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$transient</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "New value of transient.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Time until expiration in seconds.",
                    "types": [
                        "int"
                    ],
                    "variable": "$expiration"
                },
                {
                    "name": "param",
                    "content": "Transient name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$transient"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_site_option_{$option}",
        "line": 1254,
        "end_line": 1254,
        "type": "filter",
        "doc": {
            "description": "Filters an existing network option before it is retrieved.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p> <p>Passing a truthy value to the filter will effectively short-circuit retrieval, returning the passed value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0",
                    "description": "As 'pre_site<em>option</em>' . $key"
                },
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$option</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "The <code>$network_id</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "The <code>$default</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The value to return instead of the option value. This differs from                           <code>$default</code>, which is used as the fallback value in the event the                           option doesn't exist elsewhere in get_network_option(). Default                           is false (to skip past the short-circuit).",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$pre_option"
                },
                {
                    "name": "param",
                    "content": "Option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "ID of the network.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                },
                {
                    "name": "param",
                    "content": "The fallback value to return if the option does not exist.                           Default is false.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$default"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_site_transient_{$transient}",
        "line": 1759,
        "end_line": 1759,
        "type": "filter",
        "doc": {
            "description": "Filters the value of an existing site transient.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p> <p>Passing a truthy value to the filter will effectively short-circuit retrieval, returning the passed value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$transient</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The default value to return if the site transient does not exist.                                   Any value other than false will short-circuit the retrieval                                   of the transient, and return the returned value.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$pre_site_transient"
                },
                {
                    "name": "param",
                    "content": "Transient name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$transient"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_term_link",
        "line": 4210,
        "end_line": 4210,
        "type": "filter",
        "doc": {
            "description": "Filters the permalink structure for a terms before token replacement occurs.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "The permalink structure for the term's taxonomy.",
                    "types": [
                        "string"
                    ],
                    "variable": "$termlink"
                },
                {
                    "name": "param",
                    "content": "The term object.",
                    "types": [
                        "\\WP_Term"
                    ],
                    "variable": "$term"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "pre_term_{$field}",
        "line": 1584,
        "end_line": 1584,
        "type": "filter",
        "doc": {
            "description": "Filters a term field value before it is sanitized.",
            "long_description": "<p>The dynamic portion of the filter name, <code>$field</code>, refers to the term field.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the term field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "pre_transient_{$transient}",
        "line": 697,
        "end_line": 697,
        "type": "filter",
        "doc": {
            "description": "Filters the value of an existing transient.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p> <p>Passing a truthy value to the filter will effectively short-circuit retrieval of the transient, returning the passed value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$transient</code> parameter was added"
                },
                {
                    "name": "param",
                    "content": "The default value to return if the transient does not exist.                              Any value other than false will short-circuit the retrieval                              of the transient, and return the returned value.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$pre_transient"
                },
                {
                    "name": "param",
                    "content": "Transient name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$transient"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_trash_post",
        "line": 3128,
        "end_line": 3128,
        "type": "filter",
        "doc": {
            "description": "Filters whether a post trashing should take place.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether to go forward with trashing.",
                    "types": [
                        "bool",
                        "null"
                    ],
                    "variable": "$trash"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "pre_unschedule_event",
        "line": 365,
        "end_line": 365,
        "type": "filter",
        "doc": {
            "description": "Filter to preflight or hijack unscheduling of events.",
            "long_description": "<p>Returning a non-null value will short-circuit the normal unscheduling process, causing the function to return the filtered value instead.</p> <p>For plugins replacing wp-cron, return true if the event was successfully unscheduled, false if not.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Value to return instead. Default null to continue unscheduling the event.",
                    "types": [
                        "null",
                        "bool"
                    ],
                    "variable": "$pre"
                },
                {
                    "name": "param",
                    "content": "Timestamp for when to run the event.",
                    "types": [
                        "int"
                    ],
                    "variable": "$timestamp"
                },
                {
                    "name": "param",
                    "content": "Action hook, the execution of which will be unscheduled.",
                    "types": [
                        "string"
                    ],
                    "variable": "$hook"
                },
                {
                    "name": "param",
                    "content": "Arguments to pass to the hook's callback function.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "pre_unschedule_hook",
        "line": 483,
        "end_line": 483,
        "type": "filter",
        "doc": {
            "description": "Filter to preflight or hijack clearing all events attached to the hook.",
            "long_description": "<p>Returning a non-null value will short-circuit the normal unscheduling process, causing the function to return the filtered value instead.</p> <p>For plugins replacing wp-cron, return the number of events successfully unscheduled (zero if no events were registered with the hook) or false if unscheduling one or more events fails.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Value to return instead. Default null to continue unscheduling the hook.",
                    "types": [
                        "null",
                        "int",
                        "false"
                    ],
                    "variable": "$pre"
                },
                {
                    "name": "param",
                    "content": "Action hook, the execution of which will be unscheduled.",
                    "types": [
                        "string"
                    ],
                    "variable": "$hook"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "pre_untrash_post",
        "line": 3197,
        "end_line": 3197,
        "type": "filter",
        "doc": {
            "description": "Filters whether a post untrashing should take place.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether to go forward with untrashing.",
                    "types": [
                        "bool",
                        "null"
                    ],
                    "variable": "$untrash"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "pre_update_option",
        "line": 342,
        "end_line": 342,
        "type": "filter",
        "doc": {
            "description": "Filters an option before its value is (maybe) serialized and updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "The new, unserialized option value.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Name of the option.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "The old option value.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$old_value"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_update_option_{$option}",
        "line": 331,
        "end_line": 331,
        "type": "filter",
        "doc": {
            "description": "Filters a specific option before its value is (maybe) serialized and updated.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$option</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "The new, unserialized option value.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "The old option value.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$old_value"
                },
                {
                    "name": "param",
                    "content": "Option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_update_site_option_{$option}",
        "line": 1598,
        "end_line": 1598,
        "type": "filter",
        "doc": {
            "description": "Filters a specific network option before its value is updated.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0",
                    "description": "As 'pre_update_site<em>option</em>' . $key"
                },
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$option</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "The <code>$network_id</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "New value of the network option.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Old value of the network option.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$old_value"
                },
                {
                    "name": "param",
                    "content": "Option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "ID of the network.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "pre_upload_error",
        "line": 6336,
        "end_line": 6336,
        "type": "filter",
        "doc": {
            "description": "Filters whether to preempt the XML-RPC media upload.",
            "long_description": "<p>Passing a truthy value will effectively short-circuit the media upload, returning that value as a 500 error instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to pre-empt the media upload. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$error"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "pre_user_description",
        "line": 1739,
        "end_line": 1739,
        "type": "filter",
        "doc": {
            "description": "Filters a user's description before the user is created or updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "The user's description.",
                    "types": [
                        "string"
                    ],
                    "variable": "$description"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_user_display_name",
        "line": 1728,
        "end_line": 1728,
        "type": "filter",
        "doc": {
            "description": "Filters a user's display name before the user is created or updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "The user's display name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$display_name"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_user_email",
        "line": 1633,
        "end_line": 1633,
        "type": "filter",
        "doc": {
            "description": "Filters a user's email before the user is created or updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "The user's email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$raw_user_email"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_user_first_name",
        "line": 1691,
        "end_line": 1691,
        "type": "filter",
        "doc": {
            "description": "Filters a user's first name before the user is created or updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "The user's first name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$first_name"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_user_id",
        "line": 1966,
        "end_line": 1966,
        "type": "filter",
        "doc": {
            "description": "Filters the comment author's user id before it is set.",
            "long_description": "<p>The first time this filter is evaluated, 'user_ID' is checked (for back-compat), followed by the standard 'user_id' value.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The comment author's user ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_ID"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pre_user_last_name",
        "line": 1702,
        "end_line": 1702,
        "type": "filter",
        "doc": {
            "description": "Filters a user's last name before the user is created or updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "The user's last name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$last_name"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_user_login",
        "line": 1557,
        "end_line": 1557,
        "type": "filter",
        "doc": {
            "description": "Filters a username after it has been sanitized.",
            "long_description": "<p>This filter is called before the user is created or updated.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "Username after it has been sanitized.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sanitized_user_login"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_user_nicename",
        "line": 1608,
        "end_line": 1608,
        "type": "filter",
        "doc": {
            "description": "Filters a user's nicename before the user is created or updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "The user's nicename.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_nicename"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_user_nickname",
        "line": 1680,
        "end_line": 1680,
        "type": "filter",
        "doc": {
            "description": "Filters a user's nickname before the user is created or updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "The user's nickname.",
                    "types": [
                        "string"
                    ],
                    "variable": "$nickname"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_user_url",
        "line": 1656,
        "end_line": 1656,
        "type": "filter",
        "doc": {
            "description": "Filters a user's URL before the user is created or updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.3"
                },
                {
                    "name": "param",
                    "content": "The user's URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$raw_user_url"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_user_{$field}",
        "line": 1291,
        "end_line": 1291,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a user field in the 'db' context.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field</code>, refers to the prefixed user field being filtered, such as 'user_login', 'user_email', 'first_name', etc.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Value of the prefixed user field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "pre_wp_is_site_initialized",
        "line": 938,
        "end_line": 938,
        "type": "filter",
        "doc": {
            "description": "Filters the check for whether a site is initialized before the database is accessed.",
            "long_description": "<p>Returning a non-null value will effectively short-circuit the function, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "The value to return, if not null.",
                    "types": [
                        "bool",
                        "null"
                    ],
                    "variable": "$pre"
                },
                {
                    "name": "param",
                    "content": "The site ID that is being checked.",
                    "types": [
                        "int"
                    ],
                    "variable": "$site_id"
                }
            ]
        },
        "file": "wp-includes/ms-site.php"
    },
    {
        "name": "pre_wp_nav_menu",
        "line": 104,
        "end_line": 104,
        "type": "filter",
        "doc": {
            "description": "Filters whether to short-circuit the wp_nav_menu() output.",
            "long_description": "<p>Returning a non-null value to the filter will short-circuit wp_nav_menu(), echoing that value if $args-&gt;echo is true, returning that value otherwise.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_nav_menu()"
                },
                {
                    "name": "param",
                    "content": "Nav menu output to short-circuit with. Default null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "An object containing wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/nav-menu-template.php"
    },
    {
        "name": "pre_wp_unique_post_slug",
        "line": 4312,
        "end_line": 4312,
        "type": "filter",
        "doc": {
            "description": "Filters the post slug before it is generated to be unique.",
            "long_description": "<p>Returning a non-null value will short-circuit the unique slug generation, returning the passed value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Short-circuit return value.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$override_slug"
                },
                {
                    "name": "param",
                    "content": "The desired slug (post_name).",
                    "types": [
                        "string"
                    ],
                    "variable": "$slug"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_ID"
                },
                {
                    "name": "param",
                    "content": "The post status.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_status"
                },
                {
                    "name": "param",
                    "content": "Post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                },
                {
                    "name": "param",
                    "content": "Post parent ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_parent"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "pre_wp_update_comment_count_now",
        "line": 2519,
        "end_line": 2519,
        "type": "filter",
        "doc": {
            "description": "Filters a post's comment count before it is updated in the database.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "The new comment count. Default null.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$new"
                },
                {
                    "name": "param",
                    "content": "The old comment count.",
                    "types": [
                        "int"
                    ],
                    "variable": "$old"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "pre_{$field}",
        "line": 2430,
        "end_line": 2430,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a specific post field before saving.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field</code>, refers to the post field name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the post field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "pre_{$taxonomy}_{$field}",
        "line": 1596,
        "end_line": 1596,
        "type": "filter",
        "doc": {
            "description": "Filters a taxonomy field before it is sanitized.",
            "long_description": "<p>The dynamic portions of the filter name, <code>$taxonomy</code> and <code>$field</code>, refer to the taxonomy slug and field name, respectively.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the taxonomy field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "prepend_attachment",
        "line": 1685,
        "end_line": 1685,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment markup to be prepended to the post content.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "prepend_attachment()"
                },
                {
                    "name": "param",
                    "content": "The attachment HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$p"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "preprocess_comment",
        "line": 2087,
        "end_line": 2087,
        "type": "filter",
        "doc": {
            "description": "Filters a comment's data before it is sanitized and inserted into the database.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Comment data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$commentdata"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "preview_post_link",
        "line": 1340,
        "end_line": 1340,
        "type": "filter",
        "doc": {
            "description": "Filters the URL used for a post preview.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.5"
                },
                {
                    "name": "since",
                    "content": "4.0.0",
                    "description": "Added the <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "URL used for the post preview.",
                    "types": [
                        "string"
                    ],
                    "variable": "$preview_link"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "previous_comments_link_attributes",
        "line": 2945,
        "end_line": 2945,
        "type": "filter",
        "doc": {
            "description": "Filters the anchor tag attributes for the previous comments page link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Attributes for the anchor tag.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attributes"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "previous_posts_link_attributes",
        "line": 2463,
        "end_line": 2463,
        "type": "filter",
        "doc": {
            "description": "Filters the anchor tag attributes for the previous posts page link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Attributes for the anchor tag.",
                    "types": [
                        "string"
                    ],
                    "variable": "$attributes"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "print_admin_styles",
        "line": 2696,
        "end_line": 2696,
        "type": "filter",
        "doc": {
            "description": "Filters whether to print the admin styles.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether to print the admin styles. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$print"
                }
            ]
        },
        "file": "wp-includes/script-loader.php"
    },
    {
        "name": "print_footer_scripts",
        "line": 2552,
        "end_line": 2552,
        "type": "filter",
        "doc": {
            "description": "Filters whether to print the footer scripts.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether to print the footer scripts. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$print"
                }
            ]
        },
        "file": "wp-includes/script-loader.php"
    },
    {
        "name": "print_head_scripts",
        "line": 2517,
        "end_line": 2517,
        "type": "filter",
        "doc": {
            "description": "Filters whether to print the head scripts.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether to print the head scripts. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$print"
                }
            ]
        },
        "file": "wp-includes/script-loader.php"
    },
    {
        "name": "print_late_styles",
        "line": 2732,
        "end_line": 2732,
        "type": "filter",
        "doc": {
            "description": "Filters whether to print the styles queued too late for the HTML head.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "Whether to print the 'late' styles. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$print"
                }
            ]
        },
        "file": "wp-includes/script-loader.php"
    },
    {
        "name": "print_scripts_array",
        "line": 618,
        "end_line": 618,
        "type": "filter",
        "doc": {
            "description": "Filters the list of script dependencies left to print.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of script dependency handles.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$to_do"
                }
            ]
        },
        "file": "wp-includes/class.wp-scripts.php"
    },
    {
        "name": "print_styles_array",
        "line": 374,
        "end_line": 374,
        "type": "filter",
        "doc": {
            "description": "Filters the array of enqueued styles before processing for output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "The list of enqueued style handles about to be processed.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$to_do"
                }
            ]
        },
        "file": "wp-includes/class.wp-styles.php"
    },
    {
        "name": "privacy_on_link_text",
        "line": 357,
        "end_line": 357,
        "type": "filter",
        "doc": {
            "description": "Filters the link label for the 'Search Engines Discouraged' message displayed in the 'At a Glance' dashboard widget.",
            "long_description": "<p>Prior to 3.8.0, the widget was named 'Right Now'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Default text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "privacy_on_link_title",
        "line": 345,
        "end_line": 345,
        "type": "filter",
        "doc": {
            "description": "Filters the link title attribute for the 'Search Engines Discouraged' message displayed in the 'At a Glance' dashboard widget.",
            "long_description": "<p>Prior to 3.8.0, the widget was named 'Right Now'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "The default for <code>$title</code> was updated to an empty string."
                },
                {
                    "name": "param",
                    "content": "Default attribute text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "privacy_policy_url",
        "line": 4406,
        "end_line": 4406,
        "type": "filter",
        "doc": {
            "description": "Filters the URL of the privacy policy page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The URL to the privacy policy page. Empty string                               if it doesn't exist.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The ID of privacy policy page.",
                    "types": [
                        "int"
                    ],
                    "variable": "$policy_page_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "private_title_format",
        "line": 158,
        "end_line": 158,
        "type": "filter",
        "doc": {
            "description": "Filters the text prepended to the post title of private posts.",
            "long_description": "<p>The filter is only applied on the front end.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Text displayed before the post title.                         Default 'Private: %s'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$prepend"
                },
                {
                    "name": "param",
                    "content": "Current post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "process_text_diff_html",
        "line": 175,
        "end_line": 175,
        "type": "filter",
        "doc": {
            "description": "Contextually filters a diffed line.",
            "long_description": "<p>Filters TextDiff processing of diffed line. By default, diffs are processed with htmlspecialchars. Use this filter to remove or change the processing. Passes a context indicating if the line is added, deleted or unchanged.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "The processed diffed line.",
                    "types": [
                        "String"
                    ],
                    "variable": "$processed_line"
                },
                {
                    "name": "param",
                    "content": "The unprocessed diffed line.",
                    "types": [
                        "String"
                    ],
                    "variable": "$line"
                },
                {
                    "name": "param",
                    "content": "null            The line context. Values are 'added', 'deleted' or 'unchanged'.",
                    "types": [
                        "string"
                    ],
                    "variable": ""
                }
            ]
        },
        "file": "wp-includes/class-wp-text-diff-renderer-table.php"
    },
    {
        "name": "protected_title_format",
        "line": 140,
        "end_line": 140,
        "type": "filter",
        "doc": {
            "description": "Filters the text prepended to the post title for protected posts.",
            "long_description": "<p>The filter is only applied on the front end.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Text displayed before the post title.                         Default 'Protected: %s'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$prepend"
                },
                {
                    "name": "param",
                    "content": "Current post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "pub_priv_sql_capability",
        "line": 6329,
        "end_line": 6329,
        "type": "filter",
        "doc": {
            "description": "Filters the capability to read private posts for a custom post type when generating SQL for getting posts by author.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.2.0",
                    "description": "The hook transitioned from \"somewhat useless\" to \"totally useless\"."
                },
                {
                    "name": "param",
                    "content": "Capability.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cap"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "query",
        "line": 1894,
        "end_line": 1894,
        "type": "filter",
        "doc": {
            "description": "Filters the database query.",
            "long_description": "<p>Some queries are made before the plugins have been loaded, and thus cannot be filtered with this method.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Database query.",
                    "types": [
                        "string"
                    ],
                    "variable": "$query"
                }
            ]
        },
        "file": "wp-includes/wp-db.php"
    },
    {
        "name": "query_string",
        "line": 549,
        "end_line": 549,
        "type": "filter",
        "doc": {
            "description": "Filters the query string before parsing.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "deprecated",
                    "content": "2.1.0",
                    "description": "Use 'query_vars' or 'request' filters instead."
                },
                {
                    "name": "param",
                    "content": "The query string to modify.",
                    "types": [
                        "string"
                    ],
                    "variable": "$query_string"
                }
            ]
        },
        "file": "wp-includes/class-wp.php"
    },
    {
        "name": "query_vars",
        "line": 287,
        "end_line": 287,
        "type": "filter",
        "doc": {
            "description": "Filters the query variables whitelist before processing.",
            "long_description": "<p>Allows (publicly allowed) query vars to be added, removed, or changed prior to executing the query. Needed to allow custom rewrite rules using your own arguments to work, or any other custom query variables you want to be publicly available.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The array of whitelisted query variable names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$public_query_vars"
                }
            ]
        },
        "file": "wp-includes/class-wp.php"
    },
    {
        "name": "quick_edit_dropdown_pages_args",
        "line": 1679,
        "end_line": 1679,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments used to generate the Quick Edit page-parent drop-down.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_dropdown_pages()"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$dropdown_args"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "quick_edit_show_taxonomy",
        "line": 1484,
        "end_line": 1484,
        "type": "filter",
        "doc": {
            "description": "Filters whether the current taxonomy should be shown in the Quick Edit panel.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether to show the current taxonomy in Quick Edit.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show_in_quick_edit"
                },
                {
                    "name": "param",
                    "content": "Taxonomy name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy_name"
                },
                {
                    "name": "param",
                    "content": "Post type of current Quick Edit post.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-posts-list-table.php"
    },
    {
        "name": "quicktags_settings",
        "line": 358,
        "end_line": 358,
        "type": "filter",
        "doc": {
            "description": "Filters the Quicktags settings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "Quicktags settings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$qtInit"
                },
                {
                    "name": "param",
                    "content": "The unique editor ID, e.g. 'content'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "random_password",
        "line": 2424,
        "end_line": 2424,
        "type": "filter",
        "doc": {
            "description": "Filters the randomly-generated password.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "5.3.0",
                    "description": "Added the <code>$length</code>, <code>$special_chars</code>, and <code>$extra_special_chars</code> parameters."
                },
                {
                    "name": "param",
                    "content": "The generated password.",
                    "types": [
                        "string"
                    ],
                    "variable": "$password"
                },
                {
                    "name": "param",
                    "content": "The length of password to generate.",
                    "types": [
                        "int"
                    ],
                    "variable": "$length"
                },
                {
                    "name": "param",
                    "content": "Whether to include standard special characters.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$special_chars"
                },
                {
                    "name": "param",
                    "content": "Whether to include other special characters.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$extra_special_chars"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "recovery_email_debug_info",
        "line": 148,
        "end_line": 148,
        "type": "filter",
        "doc": {
            "description": "Filters the debug information included in the fatal error protection email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "array An associated array of debug information.",
                    "types": [],
                    "variable": "$message"
                }
            ]
        },
        "file": "wp-includes/class-wp-recovery-mode-email-service.php"
    },
    {
        "name": "recovery_email_support_info",
        "line": 139,
        "end_line": 139,
        "type": "filter",
        "doc": {
            "description": "Filters the support message sent with the the fatal error protection email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "string The Message to include in the email.",
                    "types": [],
                    "variable": "$message"
                }
            ]
        },
        "file": "wp-includes/class-wp-recovery-mode-email-service.php"
    },
    {
        "name": "recovery_mode_begin_url",
        "line": 125,
        "end_line": 125,
        "type": "filter",
        "doc": {
            "description": "Filter the URL to begin recovery mode.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "The generated recovery mode begin URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The token used to identify the key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$token"
                },
                {
                    "name": "param",
                    "content": "The recovery mode key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                }
            ]
        },
        "file": "wp-includes/class-wp-recovery-mode-link-service.php"
    },
    {
        "name": "recovery_mode_cookie_length",
        "line": 45,
        "end_line": 45,
        "type": "filter",
        "doc": {
            "description": "Filter the length of time a Recovery Mode cookie is valid for.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Length in seconds.",
                    "types": [
                        "int"
                    ],
                    "variable": "$length"
                }
            ]
        },
        "file": "wp-includes/class-wp-recovery-mode-cookie-service.php"
    },
    {
        "name": "recovery_mode_email",
        "line": 211,
        "end_line": 211,
        "type": "filter",
        "doc": {
            "description": "Filter the contents of the Recovery Mode email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Used to build wp_mail().",
                    "types": [
                        "array"
                    ],
                    "variable": "$email"
                },
                {
                    "name": "param",
                    "content": "URL to enter recovery mode.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/class-wp-recovery-mode-email-service.php"
    },
    {
        "name": "recovery_mode_email_link_ttl",
        "line": 330,
        "end_line": 330,
        "type": "filter",
        "doc": {
            "description": "Filter the amount of time the recovery mode email link is valid for.",
            "long_description": "<p>The ttl must be at least as long as the email rate limit.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "The number of seconds the link is valid for.",
                    "types": [
                        "int"
                    ],
                    "variable": "$valid_for"
                }
            ]
        },
        "file": "wp-includes/class-wp-recovery-mode.php"
    },
    {
        "name": "recovery_mode_email_rate_limit",
        "line": 306,
        "end_line": 306,
        "type": "filter",
        "doc": {
            "description": "Filter the rate limit between sending new recovery mode email links.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Time to wait in seconds. Defaults to 1 day.",
                    "types": [
                        "int"
                    ],
                    "variable": "$rate_limit"
                }
            ]
        },
        "file": "wp-includes/class-wp-recovery-mode.php"
    },
    {
        "name": "redirect_canonical",
        "line": 597,
        "end_line": 597,
        "type": "filter",
        "doc": {
            "description": "Filters the canonical redirect URL.",
            "long_description": "<p>Returning false to this filter will cancel the redirect.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The redirect URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$redirect_url"
                },
                {
                    "name": "param",
                    "content": "The requested URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$requested_url"
                }
            ]
        },
        "file": "wp-includes/canonical.php"
    },
    {
        "name": "redirect_network_admin_request",
        "line": 29,
        "end_line": 29,
        "type": "filter",
        "doc": {
            "description": "Filters whether to redirect the request to the Network Admin.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether the request should be redirected.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$redirect_network_admin_request"
                }
            ]
        },
        "file": "wp-admin/network/admin.php"
    },
    {
        "name": "redirect_post_location",
        "line": 2007,
        "end_line": 2007,
        "type": "filter",
        "doc": {
            "description": "Filters the post redirect destination URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The destination URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "redirect_term_location",
        "line": 225,
        "end_line": 225,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy redirect destination URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "The destination URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                },
                {
                    "name": "param",
                    "content": "The taxonomy object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$tax"
                }
            ]
        },
        "file": "wp-admin/edit-tags.php"
    },
    {
        "name": "redirect_user_admin_request",
        "line": 27,
        "end_line": 27,
        "type": "filter",
        "doc": {
            "description": "Filters whether to redirect the request to the User Admin in Multisite.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether the request should be redirected.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$redirect_user_admin_request"
                }
            ]
        },
        "file": "wp-admin/user/admin.php"
    },
    {
        "name": "register",
        "line": 615,
        "end_line": 615,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML link to the Registration or Admin page.",
            "long_description": "<p>Users are sent to the admin page if logged-in, or the registration page if enabled and logged-out.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The HTML code for the link to the Registration or Admin page.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "register_meta_args",
        "line": 1192,
        "end_line": 1192,
        "type": "filter",
        "doc": {
            "description": "Filters the registration arguments when registering meta.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Array of meta registration arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Array of default arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$defaults"
                },
                {
                    "name": "param",
                    "content": "Object type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$object_type"
                },
                {
                    "name": "param",
                    "content": "Meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "register_post_type_args",
        "line": 386,
        "end_line": 386,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for registering a post type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Array of arguments for registering a post type.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Post type key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-includes/class-wp-post-type.php"
    },
    {
        "name": "register_setting_args",
        "line": 2137,
        "end_line": 2137,
        "type": "filter",
        "doc": {
            "description": "Filters the registration arguments when registering a setting.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of setting registration arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Array of default arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$defaults"
                },
                {
                    "name": "param",
                    "content": "Setting group.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option_group"
                },
                {
                    "name": "param",
                    "content": "Setting name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option_name"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "register_sidebar_defaults",
        "line": 275,
        "end_line": 275,
        "type": "filter",
        "doc": {
            "description": "Filters the sidebar default arguments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "register_sidebar()"
                },
                {
                    "name": "param",
                    "content": "The default sidebar arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$defaults"
                }
            ]
        },
        "file": "wp-includes/widgets.php"
    },
    {
        "name": "register_taxonomy_args",
        "line": 253,
        "end_line": 253,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for registering a taxonomy.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Array of arguments for registering a taxonomy.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Taxonomy key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "Array of names of object types for the taxonomy.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$object_type"
                }
            ]
        },
        "file": "wp-includes/class-wp-taxonomy.php"
    },
    {
        "name": "register_url",
        "line": 423,
        "end_line": 423,
        "type": "filter",
        "doc": {
            "description": "Filters the user registration URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The user registration URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$register"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "registration_errors",
        "line": 2545,
        "end_line": 2545,
        "type": "filter",
        "doc": {
            "description": "Filters the errors encountered when a new user is being registered.",
            "long_description": "<p>The filtered WP_Error object may, for example, contain errors for an invalid or existing username or email address. A WP_Error object should always returned, but may or may not contain errors.</p> <p>If any errors are present in $errors, this will abort the user's registration.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "A WP_Error object containing any errors encountered                                       during registration.",
                    "types": [
                        "\\WP_Error"
                    ],
                    "variable": "$errors"
                },
                {
                    "name": "param",
                    "content": "User's username after it has been sanitized.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sanitized_user_login"
                },
                {
                    "name": "param",
                    "content": "User's email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "registration_redirect",
        "line": 1051,
        "end_line": 1051,
        "type": "filter",
        "doc": {
            "description": "Filters the registration redirect URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The redirect destination URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$registration_redirect"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "removable_query_args",
        "line": 1186,
        "end_line": 1186,
        "type": "filter",
        "doc": {
            "description": "Filters the list of query variables to remove.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "param",
                    "content": "An array of query variables to remove from a URL.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$removable_query_args"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "render_block",
        "line": 275,
        "end_line": 275,
        "type": "filter",
        "doc": {
            "description": "Filters the content of a single block.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "The block content about to be appended.",
                    "types": [
                        "string"
                    ],
                    "variable": "$block_content"
                },
                {
                    "name": "param",
                    "content": "The full block, including name and attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$block"
                }
            ]
        },
        "file": "wp-includes/blocks.php"
    },
    {
        "name": "render_block_data",
        "line": 246,
        "end_line": 246,
        "type": "filter",
        "doc": {
            "description": "Filters the block being rendered in render_block(), before it's processed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "The block being rendered.",
                    "types": [
                        "array"
                    ],
                    "variable": "$block"
                },
                {
                    "name": "param",
                    "content": "An un-modified copy of $block, as it appeared in the source content.",
                    "types": [
                        "array"
                    ],
                    "variable": "$source_block"
                }
            ]
        },
        "file": "wp-includes/blocks.php"
    },
    {
        "name": "replace_editor",
        "line": 174,
        "end_line": 174,
        "type": "filter",
        "doc": {
            "description": "Allows replacement of the editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether to replace the editor. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$replace"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/post.php"
    },
    {
        "name": "request",
        "line": 378,
        "end_line": 378,
        "type": "filter",
        "doc": {
            "description": "Filters the array of parsed query variables.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The array of requested query variables.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_vars"
                }
            ]
        },
        "file": "wp-includes/class-wp.php"
    },
    {
        "name": "request_filesystem_credentials",
        "line": 1969,
        "end_line": 1969,
        "type": "filter",
        "doc": {
            "description": "Filters the filesystem credentials form output.",
            "long_description": "<p>Returning anything other than an empty string will effectively short-circuit output of the filesystem credentials form, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "The <code>$context</code> parameter default changed from <code>false</code> to an empty string."
                },
                {
                    "name": "param",
                    "content": "Form output to return instead. Default empty.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "The URL to post the form to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$form_post"
                },
                {
                    "name": "param",
                    "content": "Chosen type of filesystem.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "Optional. Whether the current request has failed to connect,                                                    or an error object. Default false.",
                    "types": [
                        "bool",
                        "\\WP_Error"
                    ],
                    "variable": "$error"
                },
                {
                    "name": "param",
                    "content": "Full path to the directory that is tested for                                                    being writable.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                },
                {
                    "name": "param",
                    "content": "Whether to allow Group/World writable.                                                    Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow_relaxed_file_ownership"
                },
                {
                    "name": "param",
                    "content": "Extra POST fields.",
                    "types": [
                        "array"
                    ],
                    "variable": "$extra_fields"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "respond_link",
        "line": 1574,
        "end_line": 1574,
        "type": "filter",
        "doc": {
            "description": "Filters the respond link when a post has no comments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The default response link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$respond_link"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "integer"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "rest_allow_anonymous_comments",
        "line": 423,
        "end_line": 423,
        "type": "filter",
        "doc": {
            "description": "Filter whether comments can be created without authentication.",
            "long_description": "<p>Enables creating comments for anonymous users.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow anonymous comments to                              be created. Default <code>false</code>.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow_anonymous"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the                                 response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php"
    },
    {
        "name": "rest_authentication_errors",
        "line": 135,
        "end_line": 135,
        "type": "filter",
        "doc": {
            "description": "Filters REST authentication errors.",
            "long_description": "<p>This is used to pass a WP_Error from an authentication method back to the API.</p> <p>Authentication methods should check first if they're being used, as multiple authentication methods can be enabled on a site (cookies, HTTP basic auth, OAuth). If the authentication method hooked in is not actually being attempted, null should be returned to indicate another authentication method should check instead. Similarly, callbacks should ensure the value is <code>null</code> before checking for errors.</p> <p>A WP_Error instance can be returned if an error occurs, and this should match the format used by API methods internally (that is, the <code>status</code> data should be used). A callback can return <code>true</code> to indicate that the authentication method was used, and it succeeded.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "WP_Error if authentication error, null if authentication                              method wasn't used, true if authentication succeeded.",
                    "types": [
                        "\\WP_Error",
                        "null",
                        "bool"
                    ],
                    "variable": ""
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_avatar_sizes",
        "line": 1200,
        "end_line": 1200,
        "type": "filter",
        "doc": {
            "description": "Filters the REST avatar sizes.",
            "long_description": "<p>Use this filter to adjust the array of sizes returned by the <code>rest_get_avatar_sizes</code> function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of int values that are the pixel sizes for avatars.                     Default <code>[ 24, 48, 96 ]</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$sizes"
                }
            ]
        },
        "file": "wp-includes/rest-api.php"
    },
    {
        "name": "rest_comment_collection_params",
        "line": 1534,
        "end_line": 1534,
        "type": "filter",
        "doc": {
            "description": "Filter collection parameters for the comments controller.",
            "long_description": "<p>This filter registers the collection parameter, but does not map the collection parameter to an internal WP_Comment_Query parameter. Use the <code>rest_comment_query</code> filter to set WP_Comment_Query parameters.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "JSON Schema-formatted collection parameters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_params"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php"
    },
    {
        "name": "rest_comment_query",
        "line": 259,
        "end_line": 259,
        "type": "filter",
        "doc": {
            "description": "Filters arguments, before passing to WP_Comment_Query, when querying comments via the REST API.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "link",
                    "content": "<a href=\"https://developer.wordpress.org/reference/classes/wp_comment_query/\">https://developer.wordpress.org/reference/classes/wp_comment_query/</a>",
                    "link": "https://developer.wordpress.org/reference/classes/wp_comment_query/"
                },
                {
                    "name": "param",
                    "content": "Array of arguments for WP_Comment_Query.",
                    "types": [
                        "array"
                    ],
                    "variable": "$prepared_args"
                },
                {
                    "name": "param",
                    "content": "The current request.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php"
    },
    {
        "name": "rest_comment_trashable",
        "line": 830,
        "end_line": 830,
        "type": "filter",
        "doc": {
            "description": "Filters whether a comment can be trashed.",
            "long_description": "<p>Return false to disable trash support for the post.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the post type support trashing.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$supports_trash"
                },
                {
                    "name": "param",
                    "content": "The comment object being considered for trashing support.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php"
    },
    {
        "name": "rest_dispatch_request",
        "line": 940,
        "end_line": 940,
        "type": "filter",
        "doc": {
            "description": "Filters the REST dispatch request result.",
            "long_description": "<p>Allow plugins to override dispatching the request.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "Added <code>$route</code> and <code>$handler</code> parameters."
                },
                {
                    "name": "param",
                    "content": "Dispatch result, will be used if not empty.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$dispatch_result"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                },
                {
                    "name": "param",
                    "content": "Route matched for the request.",
                    "types": [
                        "string"
                    ],
                    "variable": "$route"
                },
                {
                    "name": "param",
                    "content": "Route handler used for the request.",
                    "types": [
                        "array"
                    ],
                    "variable": "$handler"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_endpoints",
        "line": 724,
        "end_line": 724,
        "type": "filter",
        "doc": {
            "description": "Filters the array of available endpoints.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The available endpoints. An array of matching regex patterns, each mapped                         to an array of callbacks for the endpoint. These take the format                         <code>'/path/regex' =&gt; array( $callback, $bitmask )</code> or                         `'/path/regex' =&gt; array( array( $callback, $bitmask ).",
                    "types": [
                        "array"
                    ],
                    "variable": "$endpoints"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_endpoints_description",
        "line": 1122,
        "end_line": 1122,
        "type": "filter",
        "doc": {
            "description": "Filters the REST endpoint data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Request data. The namespace is passed as the 'namespace' parameter.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_envelope_response",
        "line": 640,
        "end_line": 640,
        "type": "filter",
        "doc": {
            "description": "Filters the enveloped form of a response.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Envelope data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$envelope"
                },
                {
                    "name": "param",
                    "content": "Original response data.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_index",
        "line": 1051,
        "end_line": 1051,
        "type": "filter",
        "doc": {
            "description": "Filters the API root index data.",
            "long_description": "<p>This contains the data describing the API. This includes information about supported authentication schemes, supported namespaces, routes available on the API, and a small amount of data about the site.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Response data.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_jsonp_enabled",
        "line": 282,
        "end_line": 282,
        "type": "filter",
        "doc": {
            "description": "Filters whether jsonp is enabled.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether jsonp is enabled. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$jsonp_enabled"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_namespace_index",
        "line": 1093,
        "end_line": 1093,
        "type": "filter",
        "doc": {
            "description": "Filters the namespace index data.",
            "long_description": "<p>This typically is just the route data for the namespace, but you can add any data you'd like here.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Response data.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "Request data. The namespace is passed as the 'namespace' parameter.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_oembed_ttl",
        "line": 212,
        "end_line": 212,
        "type": "filter",
        "doc": {
            "description": "Filters the oEmbed TTL value (time to live).",
            "long_description": "<p>Similar to the {@see 'oembed_ttl'} filter, but for the REST API oEmbed proxy endpoint.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "Time to live (in seconds).",
                    "types": [
                        "int"
                    ],
                    "variable": "$time"
                },
                {
                    "name": "param",
                    "content": "The attempted embed URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "An array of embed request arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-oembed-controller.php"
    },
    {
        "name": "rest_post_dispatch",
        "line": 352,
        "end_line": 352,
        "type": "filter",
        "doc": {
            "description": "Filters the API response.",
            "long_description": "<p>Allows modification of the response before returning.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "Applied to embedded responses."
                },
                {
                    "name": "param",
                    "content": "Result to send to the client. Usually a WP_REST_Response.",
                    "types": [
                        "\\WP_HTTP_Response"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Server instance.",
                    "types": [
                        "\\WP_REST_Server"
                    ],
                    "variable": "$this"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_post_search_query",
        "line": 83,
        "end_line": 83,
        "type": "filter",
        "doc": {
            "description": "Filters the query arguments for a search request.",
            "long_description": "<p>Enables adding extra arguments or setting defaults for a post search request.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Key value array of query var to query value.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_args"
                },
                {
                    "name": "param",
                    "content": "The request used.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/search/class-wp-rest-post-search-handler.php"
    },
    {
        "name": "rest_pre_dispatch",
        "line": 827,
        "end_line": 827,
        "type": "filter",
        "doc": {
            "description": "Filters the pre-calculated result of a REST dispatch request.",
            "long_description": "<p>Allow hijacking the request before dispatching by returning a non-empty. The returned value will be used to serve the request instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Response to replace the requested version with. Can be anything                                 a normal endpoint can return, or null to not hijack the request.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Server instance.",
                    "types": [
                        "\\WP_REST_Server"
                    ],
                    "variable": "$this"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_pre_echo_response",
        "line": 402,
        "end_line": 402,
        "type": "filter",
        "doc": {
            "description": "Filters the API response.",
            "long_description": "<p>Allows modification of the response data after inserting embedded data (if any) and before echoing the response data.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.1"
                },
                {
                    "name": "param",
                    "content": "Response data to send to the client.",
                    "types": [
                        "array"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Server instance.",
                    "types": [
                        "\\WP_REST_Server"
                    ],
                    "variable": "$this"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_pre_get_setting",
        "line": 99,
        "end_line": 99,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a setting recognized by the REST API.",
            "long_description": "<p>Allow hijacking the setting value and overriding the built-in behavior by returning a non-null value.  The returned value will be presented as the setting value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Value to use for the requested setting. Can be a scalar                       matching the registered schema for the setting, or null to                       follow the default get_option() behavior.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Setting name (as shown in REST API responses).",
                    "types": [
                        "string"
                    ],
                    "variable": "$name"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to register_setting() for this setting.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-settings-controller.php"
    },
    {
        "name": "rest_pre_insert_comment",
        "line": 595,
        "end_line": 595,
        "type": "filter",
        "doc": {
            "description": "Filters a comment before it is inserted via the REST API.",
            "long_description": "<p>Allows modification of the comment right before it is inserted via wp_insert_comment(). Returning a WP_Error value from the filter will shortcircuit insertion and allow skipping further processing.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "since",
                    "content": "4.8.0",
                    "description": "<code>$prepared_comment</code> can now be a WP_Error to shortcircuit insertion."
                },
                {
                    "name": "param",
                    "content": "The prepared comment data for wp_insert_comment().",
                    "types": [
                        "array",
                        "\\WP_Error"
                    ],
                    "variable": "$prepared_comment"
                },
                {
                    "name": "param",
                    "content": "Request used to insert the comment.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php"
    },
    {
        "name": "rest_pre_insert_user",
        "line": 1067,
        "end_line": 1067,
        "type": "filter",
        "doc": {
            "description": "Filters user data before insertion via the REST API.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "User object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$prepared_user"
                },
                {
                    "name": "param",
                    "content": "Request object.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php"
    },
    {
        "name": "rest_pre_insert_{$this->post_type}",
        "line": 1135,
        "end_line": 1135,
        "type": "filter",
        "doc": {
            "description": "Filters a post before it is inserted via the REST API.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type</code>, refers to the post type slug.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "An object representing a single post prepared                                       for inserting or updating the database.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$prepared_post"
                },
                {
                    "name": "param",
                    "content": "Request object.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php"
    },
    {
        "name": "rest_pre_insert_{$this->taxonomy}",
        "line": 713,
        "end_line": 713,
        "type": "filter",
        "doc": {
            "description": "Filters term data before inserting term via the REST API.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy</code>, refers to the taxonomy slug.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Term object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$prepared_term"
                },
                {
                    "name": "param",
                    "content": "Request object.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php"
    },
    {
        "name": "rest_pre_serve_request",
        "line": 380,
        "end_line": 380,
        "type": "filter",
        "doc": {
            "description": "Filters whether the request has already been served.",
            "long_description": "<p>Allow sending the request manually - by returning true, the API result will not be sent to the client.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether the request has already been served.                                           Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$served"
                },
                {
                    "name": "param",
                    "content": "Result to send to the client. Usually a WP_REST_Response.",
                    "types": [
                        "\\WP_HTTP_Response"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                },
                {
                    "name": "param",
                    "content": "Server instance.",
                    "types": [
                        "\\WP_REST_Server"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_pre_update_setting",
        "line": 169,
        "end_line": 169,
        "type": "filter",
        "doc": {
            "description": "Filters whether to preempt a setting value update.",
            "long_description": "<p>Allows hijacking the setting update logic and overriding the built-in behavior by returning true.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to override the default behavior for updating the                       value of a setting.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "Setting name (as shown in REST API responses).",
                    "types": [
                        "string"
                    ],
                    "variable": "$name"
                },
                {
                    "name": "param",
                    "content": "Updated setting value.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to register_setting() for this setting.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-settings-controller.php"
    },
    {
        "name": "rest_prepare_attachment",
        "line": 511,
        "end_line": 511,
        "type": "filter",
        "doc": {
            "description": "Filters an attachment returned from the REST API.",
            "long_description": "<p>Allows modification of the attachment right before it is returned.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The original attachment post.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-attachments-controller.php"
    },
    {
        "name": "rest_prepare_autosave",
        "line": 418,
        "end_line": 418,
        "type": "filter",
        "doc": {
            "description": "Filters a revision returned from the API.",
            "long_description": "<p>Allows modification of the revision right before it is returned.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The original revision object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-autosaves-controller.php"
    },
    {
        "name": "rest_prepare_comment",
        "line": 984,
        "end_line": 984,
        "type": "filter",
        "doc": {
            "description": "Filters a comment returned from the API.",
            "long_description": "<p>Allows modification of the comment right before it is returned.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The original comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php"
    },
    {
        "name": "rest_prepare_post_type",
        "line": 234,
        "end_line": 234,
        "type": "filter",
        "doc": {
            "description": "Filters a post type returned from the API.",
            "long_description": "<p>Allows modification of the post type data right before it is returned.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The original post type object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$item"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-post-types-controller.php"
    },
    {
        "name": "rest_prepare_revision",
        "line": 590,
        "end_line": 590,
        "type": "filter",
        "doc": {
            "description": "Filters a revision returned from the API.",
            "long_description": "<p>Allows modification of the revision right before it is returned.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The original revision object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-revisions-controller.php"
    },
    {
        "name": "rest_prepare_status",
        "line": 264,
        "end_line": 264,
        "type": "filter",
        "doc": {
            "description": "Filters a status returned from the REST API.",
            "long_description": "<p>Allows modification of the status data right before it is returned.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The original status object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$status"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-post-statuses-controller.php"
    },
    {
        "name": "rest_prepare_taxonomy",
        "line": 268,
        "end_line": 268,
        "type": "filter",
        "doc": {
            "description": "Filters a taxonomy returned from the REST API.",
            "long_description": "<p>Allows modification of the taxonomy data right before it is returned.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The original taxonomy object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$item"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-taxonomies-controller.php"
    },
    {
        "name": "rest_prepare_theme",
        "line": 139,
        "end_line": 139,
        "type": "filter",
        "doc": {
            "description": "Filters theme data returned from the REST API.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "Theme object used to create response.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$theme"
                },
                {
                    "name": "param",
                    "content": "Request object.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-themes-controller.php"
    },
    {
        "name": "rest_prepare_user",
        "line": 967,
        "end_line": 967,
        "type": "filter",
        "doc": {
            "description": "Filters user data returned from the REST API.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "User object used to create response.",
                    "types": [
                        "object"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "Request object.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php"
    },
    {
        "name": "rest_prepare_{$this->post_type}",
        "line": 1692,
        "end_line": 1692,
        "type": "filter",
        "doc": {
            "description": "Filters the post data for a response.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type</code>, refers to the post type slug.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Request object.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php"
    },
    {
        "name": "rest_prepare_{$this->taxonomy}",
        "line": 787,
        "end_line": 787,
        "type": "filter",
        "doc": {
            "description": "Filters a term item returned from the API.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy</code>, refers to the taxonomy slug.</p> <p>Allows modification of the term data right before it is returned.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The response object.",
                    "types": [
                        "\\WP_REST_Response"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The original term object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$item"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php"
    },
    {
        "name": "rest_preprocess_comment",
        "line": 1212,
        "end_line": 1212,
        "type": "filter",
        "doc": {
            "description": "Filters a comment after it is prepared for the database.",
            "long_description": "<p>Allows modification of the comment right after it is prepared for the database.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The prepared comment data for <code>wp_insert_comment</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$prepared_comment"
                },
                {
                    "name": "param",
                    "content": "The current request.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-comments-controller.php"
    },
    {
        "name": "rest_query_var-{$key}",
        "line": 900,
        "end_line": 900,
        "type": "filter",
        "doc": {
            "description": "Filters the query_vars used in get_items() for the constructed query.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$key</code>, refers to the query_var key.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The query_var value.",
                    "types": [
                        "string"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php"
    },
    {
        "name": "rest_request_after_callbacks",
        "line": 970,
        "end_line": 970,
        "type": "filter",
        "doc": {
            "description": "Filters the response immediately after executing any REST API callbacks.",
            "long_description": "<p>Allows plugins to perform any needed cleanup, for example, to undo changes made during the {@see 'rest_request_before_callbacks'} filter.</p> <p>Note that this filter will not be called for requests that fail to authenticate or match to a registered route.</p> <p>Note that an endpoint's <code>permission_callback</code> can still be called after this filter - see <code>rest_send_allow_header()</code>.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Result to send to the client. Usually a WP_REST_Response or WP_Error.",
                    "types": [
                        "\\WP_HTTP_Response",
                        "\\WP_Error"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "Route handler used for the request.",
                    "types": [
                        "array"
                    ],
                    "variable": "$handler"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_request_before_callbacks",
        "line": 911,
        "end_line": 911,
        "type": "filter",
        "doc": {
            "description": "Filters the response before executing any REST API callbacks.",
            "long_description": "<p>Allows plugins to perform additional validation after a request is initialized and matched to a registered route, but before it is executed.</p> <p>Note that this filter will not be called for requests that fail to authenticate or match to a registered route.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Result to send to the client. Usually a WP_REST_Response or WP_Error.",
                    "types": [
                        "\\WP_HTTP_Response",
                        "\\WP_Error"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "Route handler used for the request.",
                    "types": [
                        "array"
                    ],
                    "variable": "$handler"
                },
                {
                    "name": "param",
                    "content": "Request used to generate the response.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_request_from_url",
        "line": 1015,
        "end_line": 1015,
        "type": "filter",
        "doc": {
            "description": "Filters the request generated from a URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "Generated request object, or false if URL                                       could not be parsed.",
                    "types": [
                        "\\WP_REST_Request",
                        "false"
                    ],
                    "variable": "$request"
                },
                {
                    "name": "param",
                    "content": "URL the request was generated from.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-request.php"
    },
    {
        "name": "rest_request_parameter_order",
        "line": 376,
        "end_line": 376,
        "type": "filter",
        "doc": {
            "description": "Filters the parameter order.",
            "long_description": "<p>The order affects which parameters are checked when using get_param() and family. This acts similarly to PHP's <code>request_order</code> setting.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "{    An array of types to check, in order of priority.",
                    "types": [
                        "array"
                    ],
                    "variable": "$order"
                },
                {
                    "name": "param",
                    "content": "The type to check. }",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "The request object.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-request.php"
    },
    {
        "name": "rest_response_link_curies",
        "line": 287,
        "end_line": 287,
        "type": "filter",
        "doc": {
            "description": "Filters extra CURIEs available on API responses.",
            "long_description": "<p>CURIEs allow a shortened version of URI relations. This allows a more usable form for custom relations than using the full URI. These work similarly to how XML namespaces work.</p> <p>Registered CURIES need to specify a name and URI template. This will automatically transform URI relations into their shortened version. The shortened relation follows the format <code>{name}:{rel}</code>. <code>{rel}</code> in the URI template will be replaced with the <code>{rel}</code> part of the shortened relation.</p> <p>For example, a CURIE with name <code>example</code> and URI template <code>http://w.org/{rel}</code> would transform a <code>http://w.org/term</code> relation into <code>example:term</code>.</p> <p>Well-behaved clients should expand and normalise these back to their full URI relation, however some naive clients may not resolve these correctly, so adding new CURIEs may break backward compatibility.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "Additional CURIEs to register with the API.",
                    "types": [
                        "array"
                    ],
                    "variable": "$additional"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-response.php"
    },
    {
        "name": "rest_route_data",
        "line": 1137,
        "end_line": 1137,
        "type": "filter",
        "doc": {
            "description": "Filters the publicly-visible data for routes.",
            "long_description": "<p>This data is exposed on indexes and can be used by clients or developers to investigate the site and find out how to use it. It acts as a form of self-documentation.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Map of route to route data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$available"
                },
                {
                    "name": "param",
                    "content": "Internal route data as an associative array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$routes"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_send_nocache_headers",
        "line": 248,
        "end_line": 248,
        "type": "filter",
        "doc": {
            "description": "Send nocache headers on authenticated requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to send no-cache headers.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$rest_send_nocache_headers"
                }
            ]
        },
        "file": "wp-includes/rest-api/class-wp-rest-server.php"
    },
    {
        "name": "rest_themes_collection_params",
        "line": 216,
        "end_line": 216,
        "type": "filter",
        "doc": {
            "description": "Filter collection parameters for the themes controller.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "JSON Schema-formatted collection parameters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_params"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-themes-controller.php"
    },
    {
        "name": "rest_url",
        "line": 399,
        "end_line": 399,
        "type": "filter",
        "doc": {
            "description": "Filters the REST URL.",
            "long_description": "<p>Use this filter to adjust the url returned by the get_rest_url() function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "REST URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "REST route.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Blog ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$blog_id"
                },
                {
                    "name": "param",
                    "content": "Sanitization scheme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$scheme"
                }
            ]
        },
        "file": "wp-includes/rest-api.php"
    },
    {
        "name": "rest_url_prefix",
        "line": 326,
        "end_line": 326,
        "type": "filter",
        "doc": {
            "description": "Filters the REST URL prefix.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "URL prefix. Default 'wp-json'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$prefix"
                }
            ]
        },
        "file": "wp-includes/rest-api.php"
    },
    {
        "name": "rest_user_collection_params",
        "line": 1438,
        "end_line": 1438,
        "type": "filter",
        "doc": {
            "description": "Filter collection parameters for the users controller.",
            "long_description": "<p>This filter registers the collection parameter, but does not map the collection parameter to an internal WP_User_Query parameter.  Use the <code>rest_user_query</code> filter to set WP_User_Query arguments.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "JSON Schema-formatted collection parameters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_params"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php"
    },
    {
        "name": "rest_user_query",
        "line": 298,
        "end_line": 298,
        "type": "filter",
        "doc": {
            "description": "Filters WP_User_Query arguments when querying users via the REST API.",
            "long_description": "",
            "tags": [
                {
                    "name": "link",
                    "content": "<a href=\"https://developer.wordpress.org/reference/classes/wp_user_query/\">https://developer.wordpress.org/reference/classes/wp_user_query/</a>",
                    "link": "https://developer.wordpress.org/reference/classes/wp_user_query/"
                },
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of arguments for WP_User_Query.",
                    "types": [
                        "array"
                    ],
                    "variable": "$prepared_args"
                },
                {
                    "name": "param",
                    "content": "The current request.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-users-controller.php"
    },
    {
        "name": "rest_{$this->post_type}_collection_params",
        "line": 2580,
        "end_line": 2580,
        "type": "filter",
        "doc": {
            "description": "Filter collection parameters for the posts controller.",
            "long_description": "<p>The dynamic part of the filter <code>$this-&gt;post_type</code> refers to the post type slug for the controller.</p> <p>This filter registers the collection parameter, but does not map the collection parameter to an internal WP<em>Query parameter. Use the `rest</em>{$this-&gt;post_type}_query` filter to set WP_Query parameters.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "JSON Schema-formatted collection parameters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_params"
                },
                {
                    "name": "param",
                    "content": "Post type object.",
                    "types": [
                        "\\WP_Post_Type"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php"
    },
    {
        "name": "rest_{$this->post_type}_query",
        "line": 268,
        "end_line": 268,
        "type": "filter",
        "doc": {
            "description": "Filters the query arguments for a request.",
            "long_description": "<p>Enables adding extra arguments or setting defaults for a post collection request.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "link",
                    "content": "<a href=\"https://developer.wordpress.org/reference/classes/wp_query/\">https://developer.wordpress.org/reference/classes/wp_query/</a>",
                    "link": "https://developer.wordpress.org/reference/classes/wp_query/"
                },
                {
                    "name": "param",
                    "content": "Key value array of query var to query value.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The request used.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php"
    },
    {
        "name": "rest_{$this->post_type}_trashable",
        "line": 819,
        "end_line": 819,
        "type": "filter",
        "doc": {
            "description": "Filters whether a post is trashable.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;post_type</code>, refers to the post type slug.</p> <p>Pass false to disable trash support for the post.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the post type support trashing.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$supports_trash"
                },
                {
                    "name": "param",
                    "content": "The Post object being considered for trashing support.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-posts-controller.php"
    },
    {
        "name": "rest_{$this->taxonomy}_collection_params",
        "line": 1041,
        "end_line": 1041,
        "type": "filter",
        "doc": {
            "description": "Filter collection parameters for the terms controller.",
            "long_description": "<p>The dynamic part of the filter <code>$this-&gt;taxonomy</code> refers to the taxonomy slug for the controller.</p> <p>This filter registers the collection parameter, but does not map the collection parameter to an internal WP_Term<em>Query parameter.  Use the `rest</em>{$this-&gt;taxonomy}_query` filter to set WP_Term_Query parameters.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "JSON Schema-formatted collection parameters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_params"
                },
                {
                    "name": "param",
                    "content": "Taxonomy object.",
                    "types": [
                        "\\WP_Taxonomy"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php"
    },
    {
        "name": "rest_{$this->taxonomy}_query",
        "line": 244,
        "end_line": 244,
        "type": "filter",
        "doc": {
            "description": "Filters the query arguments before passing them to get_terms().",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;taxonomy</code>, refers to the taxonomy slug.</p> <p>Enables adding extra arguments or setting defaults for a terms collection request.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "link",
                    "content": "<a href=\"https://developer.wordpress.org/reference/functions/get_terms/\">https://developer.wordpress.org/reference/functions/get_terms/</a>",
                    "link": "https://developer.wordpress.org/reference/functions/get_terms/"
                },
                {
                    "name": "param",
                    "content": "Array of arguments to be                                       passed to get_terms().",
                    "types": [
                        "array"
                    ],
                    "variable": "$prepared_args"
                },
                {
                    "name": "param",
                    "content": "The current request.",
                    "types": [
                        "\\WP_REST_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/rest-api/endpoints/class-wp-rest-terms-controller.php"
    },
    {
        "name": "retrieve_password_message",
        "line": 447,
        "end_line": 447,
        "type": "filter",
        "doc": {
            "description": "Filters the message body of the password reset mail.",
            "long_description": "<p>If the filtered message is empty, the password reset email will not be sent.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "Added <code>$user_login</code> and <code>$user_data</code> parameters."
                },
                {
                    "name": "param",
                    "content": "Default mail message.",
                    "types": [
                        "string"
                    ],
                    "variable": "$message"
                },
                {
                    "name": "param",
                    "content": "The activation key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                },
                {
                    "name": "param",
                    "content": "The username for the user.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_login"
                },
                {
                    "name": "param",
                    "content": "WP_User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user_data"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "retrieve_password_title",
        "line": 432,
        "end_line": 432,
        "type": "filter",
        "doc": {
            "description": "Filters the subject of the password reset email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$user_login</code> and <code>$user_data</code> parameters."
                },
                {
                    "name": "param",
                    "content": "Default email title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "The username for the user.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_login"
                },
                {
                    "name": "param",
                    "content": "WP_User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user_data"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "revision_text_diff_options",
        "line": 109,
        "end_line": 109,
        "type": "filter",
        "doc": {
            "description": "Filters revisions text diff options.",
            "long_description": "<p>Filters the options passed to wp_text_diff() when viewing a post revision.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "{     Associative array of options to pass to wp_text_diff().     @type bool $show_split_view True for split view (two columns), false for                                 un-split view (single column). Default true. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The current revision field.",
                    "types": [
                        "string"
                    ],
                    "variable": "$field"
                },
                {
                    "name": "param",
                    "content": "The revision post to compare from.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$compare_from"
                },
                {
                    "name": "param",
                    "content": "The revision post to compare to.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$compare_to"
                }
            ]
        },
        "file": "wp-admin/includes/revision.php"
    },
    {
        "name": "rewrite_rules",
        "line": 1563,
        "end_line": 1563,
        "type": "filter",
        "doc": {
            "description": "Filters the list of rewrite rules formatted for output to an .htaccess file.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "deprecated",
                    "content": "1.5.0",
                    "description": "Use the mod_rewrite_rules filter instead."
                },
                {
                    "name": "param",
                    "content": "mod_rewrite Rewrite rules formatted for .htaccess.",
                    "types": [
                        "string"
                    ],
                    "variable": "$rules"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "rewrite_rules_array",
        "line": 1443,
        "end_line": 1443,
        "type": "filter",
        "doc": {
            "description": "Filters the full set of generated rewrite rules.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The compiled array of rewrite rules, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$this->rules"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "robots_txt",
        "line": 1630,
        "end_line": 1630,
        "type": "filter",
        "doc": {
            "description": "Filters the robots.txt output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The robots.txt output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Whether the site is considered \"public\".",
                    "types": [
                        "bool"
                    ],
                    "variable": "$public"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "role_has_cap",
        "line": 102,
        "end_line": 102,
        "type": "filter",
        "doc": {
            "description": "Filters which capabilities a role has.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of capabilities for the role.",
                    "types": [
                        "bool[]"
                    ],
                    "variable": "$capabilities"
                },
                {
                    "name": "param",
                    "content": "Capability name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cap"
                },
                {
                    "name": "param",
                    "content": "Role name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$name"
                }
            ]
        },
        "file": "wp-includes/class-wp-role.php"
    },
    {
        "name": "root_rewrite_rules",
        "line": 1321,
        "end_line": 1321,
        "type": "filter",
        "doc": {
            "description": "Filters rewrite rules used for root-level archives.",
            "long_description": "<p>Likely root-level archives would include pagination rules for the homepage as well as site-wide post feeds (e.g. /feed/, and /feed/atom/).</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of root-level rewrite rules, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$root_rewrite"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "rss_enclosure",
        "line": 490,
        "end_line": 490,
        "type": "filter",
        "doc": {
            "description": "Filters the RSS enclosure HTML link tag for the current post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The HTML link tag with a URI and other attributes.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html_link_tag"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "rss_update_frequency",
        "line": 74,
        "end_line": 74,
        "type": "filter",
        "doc": {
            "description": "Filters the RSS update frequency.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "An integer passed as a string representing the frequency                          of RSS updates within the update period. Default '1'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$frequency"
                }
            ]
        },
        "file": "wp-includes/feed-rss2.php"
    },
    {
        "name": "rss_update_period",
        "line": 59,
        "end_line": 59,
        "type": "filter",
        "doc": {
            "description": "Filters how often to update the RSS feed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The update period. Accepts 'hourly', 'daily', 'weekly', 'monthly',                         'yearly'. Default 'hourly'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$duration"
                }
            ]
        },
        "file": "wp-includes/feed-rss2.php"
    },
    {
        "name": "run_wptexturize",
        "line": 95,
        "end_line": 95,
        "type": "filter",
        "doc": {
            "description": "Filters whether to skip running wptexturize().",
            "long_description": "<p>Passing false to the filter will effectively short-circuit wptexturize(). returning the original text passed to the function instead.</p> <p>The filter runs only once, the first time wptexturize() is called.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wptexturize()"
                },
                {
                    "name": "param",
                    "content": "Whether to short-circuit wptexturize().",
                    "types": [
                        "bool"
                    ],
                    "variable": "$run_texturize"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "safe_style_css",
        "line": 2079,
        "end_line": 2192,
        "type": "filter",
        "doc": {
            "description": "Filters list of allowed CSS attributes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.1"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added support for <code>min-height</code>, <code>max-height</code>, <code>min-width</code>, and <code>max-width</code>."
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "Added support for <code>list-style-type</code>."
                },
                {
                    "name": "since",
                    "content": "5.0.0",
                    "description": "Added support for <code>background-image</code>."
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "Added support for <code>text-transform</code>."
                },
                {
                    "name": "since",
                    "content": "5.2.0",
                    "description": "Added support for <code>background-position</code> and <code>grid-template-columns</code>"
                },
                {
                    "name": "since",
                    "content": "5.3.0",
                    "description": "Added support for <code>grid</code>, <code>flex</code> and <code>column</code> layout properties.              Extend <code>background-*</code> support of individual properties."
                },
                {
                    "name": "param",
                    "content": "Array of allowed CSS attributes.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$attr"
                }
            ]
        },
        "file": "wp-includes/kses.php"
    },
    {
        "name": "salt",
        "line": 2217,
        "end_line": 2217,
        "type": "filter",
        "doc": {
            "description": "Filters the WordPress salt.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Cached salt for the given scheme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cached_salt"
                },
                {
                    "name": "param",
                    "content": "Authentication scheme. Values include 'auth',                            'secure_auth', 'logged_in', and 'nonce'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$scheme"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "sanitize_email",
        "line": 3606,
        "end_line": 3606,
        "type": "filter",
        "doc": {
            "description": "Filters a sanitized email address.",
            "long_description": "<p>This filter is evaluated under several contexts, including 'email_too_short', 'email_no_at', 'local_invalid_chars', 'domain_period_sequence', 'domain_period_limits', 'domain_no_periods', 'domain_no_valid_subs', or no context.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The sanitized email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sanitized_email"
                },
                {
                    "name": "param",
                    "content": "The email address, as provided to sanitize_email().",
                    "types": [
                        "string"
                    ],
                    "variable": "$email"
                },
                {
                    "name": "param",
                    "content": "A message to pass to the user. null if email is sanitized.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$message"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_file_name",
        "line": 2044,
        "end_line": 2044,
        "type": "filter",
        "doc": {
            "description": "Filters a sanitized filename string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Sanitized filename.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filename"
                },
                {
                    "name": "param",
                    "content": "The filename prior to sanitization.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filename_raw"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_file_name_chars",
        "line": 2016,
        "end_line": 2016,
        "type": "filter",
        "doc": {
            "description": "Filters the list of characters to remove from a filename.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of characters to remove.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$special_chars"
                },
                {
                    "name": "param",
                    "content": "The original filename to be sanitized.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filename_raw"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_html_class",
        "line": 2350,
        "end_line": 2350,
        "type": "filter",
        "doc": {
            "description": "Filters a sanitized HTML class string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The sanitized HTML class.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sanitized"
                },
                {
                    "name": "param",
                    "content": "HTML class before sanitization.",
                    "types": [
                        "string"
                    ],
                    "variable": "$class"
                },
                {
                    "name": "param",
                    "content": "The fallback string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$fallback"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_key",
        "line": 2144,
        "end_line": 2144,
        "type": "filter",
        "doc": {
            "description": "Filters a sanitized key string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Sanitized key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                },
                {
                    "name": "param",
                    "content": "The key prior to sanitization.",
                    "types": [
                        "string"
                    ],
                    "variable": "$raw_key"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_mime_type",
        "line": 5362,
        "end_line": 5362,
        "type": "filter",
        "doc": {
            "description": "Filters a mime type following sanitization.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.3"
                },
                {
                    "name": "param",
                    "content": "The sanitized mime type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sani_mime_type"
                },
                {
                    "name": "param",
                    "content": "The mime type prior to sanitization.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mime_type"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_option_{$option}",
        "line": 4814,
        "end_line": 4814,
        "type": "filter",
        "doc": {
            "description": "Filters an option value following sanitization.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "since",
                    "content": "4.3.0",
                    "description": "Added the <code>$original_value</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The sanitized option value.",
                    "types": [
                        "string"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "The option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "The original value passed to the function.",
                    "types": [
                        "string"
                    ],
                    "variable": "$original_value"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_text_field",
        "line": 5220,
        "end_line": 5220,
        "type": "filter",
        "doc": {
            "description": "Filters a sanitized text field string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The sanitized string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filtered"
                },
                {
                    "name": "param",
                    "content": "The string prior to being sanitized.",
                    "types": [
                        "string"
                    ],
                    "variable": "$str"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_textarea_field",
        "line": 5248,
        "end_line": 5248,
        "type": "filter",
        "doc": {
            "description": "Filters a sanitized textarea field string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The sanitized string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filtered"
                },
                {
                    "name": "param",
                    "content": "The string prior to being sanitized.",
                    "types": [
                        "string"
                    ],
                    "variable": "$str"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_title",
        "line": 2177,
        "end_line": 2177,
        "type": "filter",
        "doc": {
            "description": "Filters a sanitized title string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "param",
                    "content": "Sanitized title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "The title prior to sanitization.",
                    "types": [
                        "string"
                    ],
                    "variable": "$raw_title"
                },
                {
                    "name": "param",
                    "content": "The context for which the title is being sanitized.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_trackback_urls",
        "line": 5393,
        "end_line": 5393,
        "type": "filter",
        "doc": {
            "description": "Filters a list of trackback URLs following sanitization.",
            "long_description": "<p>The string returned here consists of a space or carriage return-delimited list of trackback URLs.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Sanitized space or carriage return separated URLs.",
                    "types": [
                        "string"
                    ],
                    "variable": "$urls_to_ping"
                },
                {
                    "name": "param",
                    "content": "Space or carriage return separated URLs before sanitization.",
                    "types": [
                        "string"
                    ],
                    "variable": "$to_ping"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_user",
        "line": 2118,
        "end_line": 2118,
        "type": "filter",
        "doc": {
            "description": "Filters a sanitized username string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.1"
                },
                {
                    "name": "param",
                    "content": "Sanitized username.",
                    "types": [
                        "string"
                    ],
                    "variable": "$username"
                },
                {
                    "name": "param",
                    "content": "The username prior to sanitization.",
                    "types": [
                        "string"
                    ],
                    "variable": "$raw_username"
                },
                {
                    "name": "param",
                    "content": "Whether to limit the sanitization to specific characters. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$strict"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "sanitize_{$object_type}_meta_{$meta_key}",
        "line": 1100,
        "end_line": 1100,
        "type": "filter",
        "doc": {
            "description": "Filters the sanitization of a specific meta key of a specific meta type.",
            "long_description": "<p>The dynamic portions of the hook name, <code>$meta_type</code>, and <code>$meta_key</code>, refer to the metadata object type (comment, post, term, or user) and the meta key value, respectively.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "Meta value to sanitize.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$meta_value"
                },
                {
                    "name": "param",
                    "content": "Meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Object type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$object_type"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "sanitize_{$object_type}_meta_{$meta_key}_for_{$object_subtype}",
        "line": 1084,
        "end_line": 1084,
        "type": "filter",
        "doc": {
            "description": "Filters the sanitization of a specific meta key of a specific meta type and subtype.",
            "long_description": "<p>The dynamic portions of the hook name, <code>$object_type</code>, <code>$meta_key</code>, and <code>$object_subtype</code>, refer to the metadata object type (comment, post, term, or user), the meta key value, and the object subtype respectively.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.8"
                },
                {
                    "name": "param",
                    "content": "Meta value to sanitize.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$meta_value"
                },
                {
                    "name": "param",
                    "content": "Meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Object type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$object_type"
                },
                {
                    "name": "param",
                    "content": "Object subtype.",
                    "types": [
                        "string"
                    ],
                    "variable": "$object_subtype"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "schedule_event",
        "line": 143,
        "end_line": 143,
        "type": "filter",
        "doc": {
            "description": "Modify an event before it is scheduled.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "{     An object containing an event's data.     @type string       $hook      Action hook to execute when the event is run.     @type int          $timestamp Unix timestamp (UTC) for when to next run the event.     @type string|false $schedule  How often the event should subsequently recur.     @type array        $args      Array containing each separate argument to pass to the hook's callback function.     @type int          $interval  The interval time in seconds for the schedule. Only present for recurring events. }",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$event"
                }
            ]
        },
        "file": "wp-includes/cron.php"
    },
    {
        "name": "screen_layout_columns",
        "line": 925,
        "end_line": 925,
        "type": "filter",
        "doc": {
            "description": "Filters the array of screen layout columns.",
            "long_description": "<p>This hook provides back-compat for plugins using the back-compat Filters instead of add_screen_option().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Empty array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$empty_columns"
                },
                {
                    "name": "param",
                    "content": "Screen ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$screen_id"
                },
                {
                    "name": "param",
                    "content": "Current WP_Screen instance.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-screen.php"
    },
    {
        "name": "screen_options_show_screen",
        "line": 1019,
        "end_line": 1019,
        "type": "filter",
        "doc": {
            "description": "Filters whether to show the Screen Options tab.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether to show Screen Options tab.                               Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show_screen"
                },
                {
                    "name": "param",
                    "content": "Current WP_Screen instance.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-screen.php"
    },
    {
        "name": "screen_options_show_submit",
        "line": 1075,
        "end_line": 1075,
        "type": "filter",
        "doc": {
            "description": "Filters whether to show the Screen Options submit button.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to show Screen Options submit button.                               Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show_button"
                },
                {
                    "name": "param",
                    "content": "Current WP_Screen instance.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-screen.php"
    },
    {
        "name": "screen_settings",
        "line": 1004,
        "end_line": 1004,
        "type": "filter",
        "doc": {
            "description": "Filters the screen settings text displayed in the Screen Options tab.",
            "long_description": "<p>This filter is currently only used on the Widgets screen to enable accessibility mode.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Screen settings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$screen_settings"
                },
                {
                    "name": "param",
                    "content": "WP_Screen object.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-screen.php"
    },
    {
        "name": "script_loader_src",
        "line": 319,
        "end_line": 319,
        "type": "filter",
        "doc": {
            "description": "Filters the script loader source.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "Script loader source path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$src"
                },
                {
                    "name": "param",
                    "content": "Script handle.",
                    "types": [
                        "string"
                    ],
                    "variable": "$handle"
                }
            ]
        },
        "file": "wp-includes/class.wp-scripts.php"
    },
    {
        "name": "script_loader_tag",
        "line": 396,
        "end_line": 396,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML script tag of an enqueued script.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "The <code>&lt;script&gt;</code> tag for the enqueued script.",
                    "types": [
                        "string"
                    ],
                    "variable": "$tag"
                },
                {
                    "name": "param",
                    "content": "The script's registered handle.",
                    "types": [
                        "string"
                    ],
                    "variable": "$handle"
                },
                {
                    "name": "param",
                    "content": "The script's source URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$src"
                }
            ]
        },
        "file": "wp-includes/class.wp-scripts.php"
    },
    {
        "name": "search_feed_link",
        "line": 1163,
        "end_line": 1163,
        "type": "filter",
        "doc": {
            "description": "Filters the search feed link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Search feed link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Feed type. Possible values include 'rss2', 'atom'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed"
                },
                {
                    "name": "param",
                    "content": "The search type. One of 'posts' or 'comments'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "search_form_args",
        "line": 241,
        "end_line": 241,
        "type": "filter",
        "doc": {
            "description": "Filters the array of arguments used when generating the search form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "The array of arguments for building the search form.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "search_form_format",
        "line": 253,
        "end_line": 253,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML format of the search form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The type of markup to use in the search form.                       Accepts 'html5', 'xhtml'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$format"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "search_link",
        "line": 1122,
        "end_line": 1122,
        "type": "filter",
        "doc": {
            "description": "Filters the search permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Search permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "The URL-encoded search term.",
                    "types": [
                        "string"
                    ],
                    "variable": "$search"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "search_rewrite_rules",
        "line": 1351,
        "end_line": 1351,
        "type": "filter",
        "doc": {
            "description": "Filters rewrite rules used for search archives.",
            "long_description": "<p>Likely search-related archives include /search/search+query/ as well as pagination and feed paths for a search.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of rewrite rules for search queries, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$search_rewrite"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "secure_auth_cookie",
        "line": 865,
        "end_line": 865,
        "type": "filter",
        "doc": {
            "description": "Filters whether the connection is secure.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the connection is secure.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$secure"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "secure_auth_redirect",
        "line": 1038,
        "end_line": 1038,
        "type": "filter",
        "doc": {
            "description": "Filters whether to use a secure authentication redirect.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to use a secure authentication redirect. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$secure"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "secure_logged_in_cookie",
        "line": 876,
        "end_line": 876,
        "type": "filter",
        "doc": {
            "description": "Filters whether to use a secure cookie when logged-in.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to use a secure cookie when logged-in.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$secure_logged_in_cookie"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Whether the connection is secure.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$secure"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "secure_signon_cookie",
        "line": 88,
        "end_line": 88,
        "type": "filter",
        "doc": {
            "description": "Filters whether to use a secure sign-on cookie.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to use a secure sign-on cookie.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$secure_cookie"
                },
                {
                    "name": "param",
                    "content": "{     Array of entered sign-on data.     @type string $user_login    Username.     @type string $user_password Password entered.     @type bool   $remember      Whether to 'remember' the user. Increases the time                                 that the cookie will be kept. Default false. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$credentials"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "self_admin_url",
        "line": 3610,
        "end_line": 3610,
        "type": "filter",
        "doc": {
            "description": "Filters the admin URL for the current site or network depending on context.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "The complete URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the URL. Blank string if no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "The scheme to use.",
                    "types": [
                        "string"
                    ],
                    "variable": "$scheme"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "self_link",
        "line": 648,
        "end_line": 648,
        "type": "filter",
        "doc": {
            "description": "Filters the current feed URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "set_url_scheme()"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_unslash()"
                },
                {
                    "name": "param",
                    "content": "The link for the feed with set URL scheme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed_link"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "send_auth_cookies",
        "line": 935,
        "end_line": 935,
        "type": "filter",
        "doc": {
            "description": "Allows preventing auth cookies from actually being sent to the client.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.4"
                },
                {
                    "name": "param",
                    "content": "Whether to send auth cookies to the client.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$send"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "send_core_update_notification_email",
        "line": 256,
        "end_line": 256,
        "type": "filter",
        "doc": {
            "description": "Filters whether to notify the site administrator of a new core update.",
            "long_description": "<p>By default, administrators are notified when the update offer received from WordPress.org sets a particular flag. This allows some discretion in if and when to notify.</p> <p>This filter is only evaluated once per release. If the same email address was already notified of the same new version, WordPress won't repeatedly email the administrator.</p> <p>This filter is also used on about.php to check if a plugin has disabled these notifications.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the site administrator is notified.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$notify"
                },
                {
                    "name": "param",
                    "content": "The update offer.",
                    "types": [
                        "object"
                    ],
                    "variable": "$item"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-automatic-updater.php"
    },
    {
        "name": "send_email_change_email",
        "line": 1978,
        "end_line": 1978,
        "type": "filter",
        "doc": {
            "description": "Filters whether to send the email change email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "see",
                    "content": "For <code>$user</code> and <code>$userdata</code> fields.",
                    "refers": "wp_insert_user()"
                },
                {
                    "name": "param",
                    "content": "Whether to send the email.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$send"
                },
                {
                    "name": "param",
                    "content": "The original user array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "The updated user array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$userdata"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "send_network_admin_email_change_email",
        "line": 2724,
        "end_line": 2724,
        "type": "filter",
        "doc": {
            "description": "Filters whether to send the network admin email change notification email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether to send the email notification.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$send"
                },
                {
                    "name": "param",
                    "content": "The old network admin email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$old_email"
                },
                {
                    "name": "param",
                    "content": "The new network admin email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$new_email"
                },
                {
                    "name": "param",
                    "content": "ID of the network.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "send_password_change_email",
        "line": 1963,
        "end_line": 1963,
        "type": "filter",
        "doc": {
            "description": "Filters whether to send the password change email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "see",
                    "content": "For <code>$user</code> and <code>$userdata</code> fields.",
                    "refers": "wp_insert_user()"
                },
                {
                    "name": "param",
                    "content": "Whether to send the email.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$send"
                },
                {
                    "name": "param",
                    "content": "The original user array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "The updated user array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$userdata"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "send_site_admin_email_change_email",
        "line": 6734,
        "end_line": 6734,
        "type": "filter",
        "doc": {
            "description": "Filters whether to send the site admin email change notification email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether to send the email notification.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$send"
                },
                {
                    "name": "param",
                    "content": "The old site admin email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$old_email"
                },
                {
                    "name": "param",
                    "content": "The new site admin email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$new_email"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "session_token_manager",
        "line": 57,
        "end_line": 57,
        "type": "filter",
        "doc": {
            "description": "Filters the class name for the session token manager.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "Name of class to use as the manager.                        Default 'WP_User_Meta_Session_Tokens'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$session"
                }
            ]
        },
        "file": "wp-includes/class-wp-session-tokens.php"
    },
    {
        "name": "set-screen-option",
        "line": 698,
        "end_line": 698,
        "type": "filter",
        "doc": {
            "description": "Filters a screen option value before it is set.",
            "long_description": "<p>The filter can also be used to modify non-standard [items]_per_page settings. See the parent function for a full list of standard options.</p> <p>Returning false to the filter will skip saving the current option.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "set_screen_options()"
                },
                {
                    "name": "param",
                    "content": "Whether to save or skip saving the screen option value. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$keep"
                },
                {
                    "name": "param",
                    "content": "The option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "The number of rows to use.",
                    "types": [
                        "int"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-admin/includes/misc.php"
    },
    {
        "name": "set_url_scheme",
        "line": 3659,
        "end_line": 3659,
        "type": "filter",
        "doc": {
            "description": "Filters the resulting URL after setting the scheme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "The complete URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Scheme applied to the URL. One of 'http', 'https', or 'relative'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$scheme"
                },
                {
                    "name": "param",
                    "content": "Scheme requested for the URL. One of 'http', 'https', 'login',                                 'login_post', 'admin', 'relative', 'rest', 'rpc', or null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$orig_scheme"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "shake_error_codes",
        "line": 56,
        "end_line": 56,
        "type": "filter",
        "doc": {
            "description": "Filters the error codes array for shaking the login form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Error codes that shake the login form.",
                    "types": [
                        "array"
                    ],
                    "variable": "$shake_error_codes"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "shortcode_atts_{$shortcode}",
        "line": 576,
        "end_line": 576,
        "type": "filter",
        "doc": {
            "description": "Filters a shortcode's default attributes.",
            "long_description": "<p>If the third parameter of the shortcode_atts() function is present then this filter is available. The third parameter, $shortcode, is the name of the shortcode.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$shortcode</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The output array of shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$out"
                },
                {
                    "name": "param",
                    "content": "The supported attributes and their defaults.",
                    "types": [
                        "array"
                    ],
                    "variable": "$pairs"
                },
                {
                    "name": "param",
                    "content": "The user defined shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$atts"
                },
                {
                    "name": "param",
                    "content": "The shortcode name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$shortcode"
                }
            ]
        },
        "file": "wp-includes/shortcodes.php"
    },
    {
        "name": "show_admin_bar",
        "line": 1211,
        "end_line": 1211,
        "type": "filter",
        "doc": {
            "description": "Filters whether to show the admin bar.",
            "long_description": "<p>Returning false to this hook is the recommended way to hide the admin bar. The user's display preference is used for logged in users.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the admin bar should be shown. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show_admin_bar"
                }
            ]
        },
        "file": "wp-includes/admin-bar.php"
    },
    {
        "name": "show_advanced_plugins",
        "line": 124,
        "end_line": 124,
        "type": "filter",
        "doc": {
            "description": "Filters whether to display the advanced plugins list table.",
            "long_description": "<p>There are two types of advanced plugins - must-use and drop-ins - which can be used in a single site or Multisite network.</p> <p>The $type parameter allows you to differentiate between the type of advanced plugins to filter the display of. Contexts include 'mustuse' and 'dropins'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to show the advanced plugins for the specified                     plugin type. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show"
                },
                {
                    "name": "param",
                    "content": "The plugin type. Accepts 'mustuse', 'dropins'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugins-list-table.php"
    },
    {
        "name": "show_network_active_plugins",
        "line": 159,
        "end_line": 159,
        "type": "filter",
        "doc": {
            "description": "Filters whether to display network-active plugins alongside plugins active for the current site.",
            "long_description": "<p>This also controls the display of inactive network-only plugins (plugins with \"Network: true\" in the plugin header).</p> <p>Plugins cannot be network-activated or network-deactivated from this screen.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to show network-active plugins. Default is whether the current                   user can manage network plugins (ie. a Super Admin).",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-plugins-list-table.php"
    },
    {
        "name": "show_network_site_users_add_existing_form",
        "line": 213,
        "end_line": 213,
        "type": "filter",
        "doc": {
            "description": "Filters whether to show the Add Existing User form on the Multisite Users screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to show the Add Existing User form. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$bool"
                }
            ]
        },
        "file": "wp-admin/network/site-users.php"
    },
    {
        "name": "show_network_site_users_add_new_form",
        "line": 332,
        "end_line": 332,
        "type": "filter",
        "doc": {
            "description": "Filters whether to show the Add New User form on the Multisite Users screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to show the Add New User form. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$bool"
                }
            ]
        },
        "file": "wp-admin/network/site-users.php"
    },
    {
        "name": "show_password_fields",
        "line": 621,
        "end_line": 621,
        "type": "filter",
        "doc": {
            "description": "Filters the display of the password fields.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.1"
                },
                {
                    "name": "since",
                    "content": "2.8.0",
                    "description": "Added the <code>$profileuser</code> parameter."
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Now evaluated only in user-edit.php."
                },
                {
                    "name": "param",
                    "content": "Whether to show the password fields. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show"
                },
                {
                    "name": "param",
                    "content": "User object for the current user to edit.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$profileuser"
                }
            ]
        },
        "file": "wp-admin/user-edit.php"
    },
    {
        "name": "show_post_locked_dialog",
        "line": 1661,
        "end_line": 1661,
        "type": "filter",
        "doc": {
            "description": "Filters whether to show the post locked dialog.",
            "long_description": "<p>Returning false from the filter will prevent the dialog from being displayed.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to display the dialog. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$display"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "The user with the lock for the post.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "show_recent_comments_widget_style",
        "line": 53,
        "end_line": 53,
        "type": "filter",
        "doc": {
            "description": "Filters the Recent Comments default widget styles.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the widget is active. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$active"
                },
                {
                    "name": "param",
                    "content": "The widget ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$id_base"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-recent-comments.php"
    },
    {
        "name": "sidebars_widgets",
        "line": 998,
        "end_line": 998,
        "type": "filter",
        "doc": {
            "description": "Filters the list of sidebars and their widgets.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An associative array of sidebars and their widgets.",
                    "types": [
                        "array"
                    ],
                    "variable": "$sidebars_widgets"
                }
            ]
        },
        "file": "wp-includes/widgets.php"
    },
    {
        "name": "signup_another_blog_init",
        "line": 335,
        "end_line": 335,
        "type": "filter",
        "doc": {
            "description": "Filters the default site sign-up variables.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "{     An array of default site sign-up variables.     @type string   $blogname   The site blogname.     @type string   $blog_title The site title.     @type WP_Error $errors     A WP_Error object possibly containing 'blogname' or 'blog_title' errors. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$signup_defaults"
                }
            ]
        },
        "file": "wp-signup.php"
    },
    {
        "name": "signup_blog_init",
        "line": 724,
        "end_line": 724,
        "type": "filter",
        "doc": {
            "description": "Filters the default site creation variables for the site sign-up form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "{     An array of default site creation variables.     @type string   $user_name  The user username.     @type string   $user_email The user email address.     @type string   $blogname   The blogname.     @type string   $blog_title The title of the site.     @type WP_Error $errors     A WP_Error object with possible errors relevant to new site creation variables. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$signup_blog_defaults"
                }
            ]
        },
        "file": "wp-signup.php"
    },
    {
        "name": "signup_create_blog_meta",
        "line": 460,
        "end_line": 460,
        "type": "filter",
        "doc": {
            "description": "Filters the new site meta variables.",
            "long_description": "<p>Use the {@see 'add_signup_meta'} filter instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "deprecated",
                    "content": "3.0.0",
                    "description": "Use the {@see 'add_signup_meta'} filter instead."
                },
                {
                    "name": "param",
                    "content": "An array of default blog meta variables.",
                    "types": [
                        "array"
                    ],
                    "variable": "$blog_meta_defaults"
                }
            ]
        },
        "file": "wp-signup.php"
    },
    {
        "name": "signup_get_available_languages",
        "line": 879,
        "end_line": 879,
        "type": "filter",
        "doc": {
            "description": "Filters the list of available languages for front-end site signups.",
            "long_description": "<p>Passing an empty array to this hook will disable output of the setting on the signup form, and the default language will be used when creating the site.</p> <p>Languages not already installed will be stripped.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Available languages.",
                    "types": [
                        "array"
                    ],
                    "variable": "$available_languages"
                }
            ]
        },
        "file": "wp-signup.php"
    },
    {
        "name": "signup_site_meta",
        "line": 772,
        "end_line": 772,
        "type": "filter",
        "doc": {
            "description": "Filters the metadata for a site signup.",
            "long_description": "<p>The metadata will be serialized prior to storing it in the database.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. Default empty array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                },
                {
                    "name": "param",
                    "content": "The requested domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "The requested path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "The requested site title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "The user's requested login name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "The user's email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                },
                {
                    "name": "param",
                    "content": "The user's activation key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "signup_user_init",
        "line": 586,
        "end_line": 586,
        "type": "filter",
        "doc": {
            "description": "Filters the default user variables used on the user sign-up form.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "{     An array of default user variables.     @type string   $user_name  The user username.     @type string   $user_email The user email address.     @type WP_Error $errors     A WP_Error object with possible errors relevant to the sign-up user. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$signup_user_defaults"
                }
            ]
        },
        "file": "wp-signup.php"
    },
    {
        "name": "signup_user_meta",
        "line": 838,
        "end_line": 838,
        "type": "filter",
        "doc": {
            "description": "Filters the metadata for a user signup.",
            "long_description": "<p>The metadata will be serialized prior to storing it in the database.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. Default empty array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                },
                {
                    "name": "param",
                    "content": "The user's requested login name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "The user's email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                },
                {
                    "name": "param",
                    "content": "The user's activation key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "single_cat_title",
        "line": 1456,
        "end_line": 1456,
        "type": "filter",
        "doc": {
            "description": "Filters the category archive page title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.10"
                },
                {
                    "name": "param",
                    "content": "Category name for archive being displayed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$term_name"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "single_post_title",
        "line": 1345,
        "end_line": 1345,
        "type": "filter",
        "doc": {
            "description": "Filters the page title for a single post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "0.71"
                },
                {
                    "name": "param",
                    "content": "The single post page title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$_post_title"
                },
                {
                    "name": "param",
                    "content": "The current queried object as returned by get_queried_object().",
                    "types": [
                        "object"
                    ],
                    "variable": "$_post"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "single_tag_title",
        "line": 1465,
        "end_line": 1465,
        "type": "filter",
        "doc": {
            "description": "Filters the tag archive page title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Tag name for archive being displayed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$term_name"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "single_term_title",
        "line": 1474,
        "end_line": 1474,
        "type": "filter",
        "doc": {
            "description": "Filters the custom taxonomy archive page title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Term name for archive being displayed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$term_name"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "site_admin_email_change_email",
        "line": 6787,
        "end_line": 6787,
        "type": "filter",
        "doc": {
            "description": "Filters the contents of the email notification sent when the site admin email address is changed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "{            Used to build wp_mail().            @type string $to      The intended recipient.            @type string $subject The subject of the email.            @type string $message The content of the email.                The following strings have a special meaning and will get replaced dynamically:                - ###OLD_EMAIL### The old site admin email address.                - ###NEW_EMAIL### The new site admin email address.                - ###SITENAME###  The name of the site.                - ###SITEURL###   The URL to the site.            @type string $headers Headers.        }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_change_email"
                },
                {
                    "name": "param",
                    "content": "The old site admin email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$old_email"
                },
                {
                    "name": "param",
                    "content": "The new site admin email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$new_email"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "site_allowed_themes",
        "line": 1507,
        "end_line": 1507,
        "type": "filter",
        "doc": {
            "description": "Filters the array of themes allowed on the site.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of theme stylesheet names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$allowed_themes"
                },
                {
                    "name": "param",
                    "content": "ID of the site. Defaults to current site.",
                    "types": [
                        "int"
                    ],
                    "variable": "$blog_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-theme.php"
    },
    {
        "name": "site_by_path_segments_count",
        "line": 179,
        "end_line": 179,
        "type": "filter",
        "doc": {
            "description": "Filters the number of path segments to consider when searching for a site.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "The number of path segments to consider. WordPress by default looks at                           one path segment following the network path. The function default of                           null only makes sense when you know the requested path should match a site.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$segments"
                },
                {
                    "name": "param",
                    "content": "The requested domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "The requested path, in full.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                }
            ]
        },
        "file": "wp-includes/ms-load.php"
    },
    {
        "name": "site_details",
        "line": 346,
        "end_line": 346,
        "type": "filter",
        "doc": {
            "description": "Filters a site's extended properties.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "The site details.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$details"
                }
            ]
        },
        "file": "wp-includes/class-wp-site.php"
    },
    {
        "name": "site_icon_attachment_metadata",
        "line": 127,
        "end_line": 127,
        "type": "filter",
        "doc": {
            "description": "Filters the site icon attachment metadata.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_generate_attachment_metadata()"
                },
                {
                    "name": "param",
                    "content": "Attachment metadata.",
                    "types": [
                        "array"
                    ],
                    "variable": "$metadata"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-site-icon.php"
    },
    {
        "name": "site_icon_image_sizes",
        "line": 151,
        "end_line": 151,
        "type": "filter",
        "doc": {
            "description": "Filters the different dimensions that a site icon is saved in.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Array of sizes available for the Site Icon.",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$site_icon_sizes"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-site-icon.php"
    },
    {
        "name": "site_icon_meta_tags",
        "line": 3167,
        "end_line": 3167,
        "type": "filter",
        "doc": {
            "description": "Filters the site icon meta tags, so plugins can add their own.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Array of Site Icon meta tags.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$meta_tags"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "site_option_{$option}",
        "line": 1331,
        "end_line": 1331,
        "type": "filter",
        "doc": {
            "description": "Filters the value of an existing network option.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$option</code>, refers to the option name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0",
                    "description": "As 'site<em>option</em>' . $key"
                },
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$option</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "The <code>$network_id</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Value of network option.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Option name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$option"
                },
                {
                    "name": "param",
                    "content": "ID of the network.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "site_search_columns",
        "line": 588,
        "end_line": 588,
        "type": "filter",
        "doc": {
            "description": "Filters the columns to search in a WP_Site_Query search.",
            "long_description": "<p>The default columns include 'domain' and 'path.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Array of column names to be searched.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$search_columns"
                },
                {
                    "name": "param",
                    "content": "Text being searched.",
                    "types": [
                        "string"
                    ],
                    "variable": "$search"
                },
                {
                    "name": "param",
                    "content": "The current WP_Site_Query instance.",
                    "types": [
                        "\\WP_Site_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-site-query.php"
    },
    {
        "name": "site_status_test_php_modules",
        "line": 936,
        "end_line": 936,
        "type": "filter",
        "doc": {
            "description": "An array representing all the modules we wish to test for.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "since",
                    "content": "5.3.0",
                    "description": "The <code>$constant</code> and <code>$class</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "{     An associated array of modules to test for.     array $module {         An associated array of module properties used during testing.         One of either <code>$function</code> or <code>$extension</code> must be provided, or they will fail by default.         string $function     Optional. A function name to test for the existence of.         string $extension    Optional. An extension to check if is loaded in PHP.         string $constant     Optional. A constant name to check for to verify an extension exists.         string $class        Optional. A class name to check for to verify an extension exists.         bool   $required     Is this a required feature or not.         string $fallback_for Optional. The module this module replaces as a fallback.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$modules"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-site-health.php"
    },
    {
        "name": "site_status_test_result",
        "line": 120,
        "end_line": 120,
        "type": "filter",
        "doc": {
            "description": "Filter the output of a finished Site Health test.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "{     An associated array of test result data.     @param string $label  A label describing the test, and is used as a header in the output.     @param string $status The status of the test, which can be a value of <code>good</code>, <code>recommended</code> or <code>critical</code>.     @param array  $badge {         Tests are put into categories which have an associated badge shown, these can be modified and assigned here.         @param string $label The test label, for example <code>Performance</code>.         @param string $color Default <code>blue</code>. A string representing a color to use for the label.     }     @param string $description A more descriptive explanation of what the test looks for, and why it is important for the end user.     @param string $actions     An action to direct the user to where they can resolve the issue, if one exists.     @param string $test        The name of the test being ran, used as a reference point. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$test_result"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-site-health.php"
    },
    {
        "name": "site_status_tests",
        "line": 1948,
        "end_line": 1948,
        "type": "filter",
        "doc": {
            "description": "Add or modify which site status tests are run on a site.",
            "long_description": "<p>The site health is determined by a set of tests based on best practices from both the WordPress Hosting Team, but also web standards in general.</p> <p>Some sites may not have the same requirements, for example the automatic update checks may be handled by a host, and are therefore disabled in core. Or maybe you want to introduce a new test, is caching enabled/disabled/stale for example.</p> <p>Tests may be added either as direct, or asynchronous ones. Any test that may require some time to complete should run asynchronously, to avoid extended loading periods within wp-admin.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "{     An associative array, where the <code>$test_type</code> is either <code>direct</code> or     <code>async</code>, to declare if the test should run via AJAX calls after page load.     @type array $identifier {         <code>$identifier</code> should be a unique identifier for the test that should run.         Plugins and themes are encouraged to prefix test identifiers with their slug         to avoid any collisions between tests.         @type string $label A friendly label for your test to identify it by.         @type mixed  $test  A callable to perform a direct test, or a string AJAX action to be called                             to perform an async test.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$test_type"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-site-health.php"
    },
    {
        "name": "site_transient_{$transient}",
        "line": 1797,
        "end_line": 1797,
        "type": "filter",
        "doc": {
            "description": "Filters the value of an existing site transient.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$transient</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Value of site transient.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Transient name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$transient"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "site_url",
        "line": 3266,
        "end_line": 3266,
        "type": "filter",
        "doc": {
            "description": "Filters the site URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The complete site URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the site URL. Blank string if no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Scheme to give the site URL context. Accepts 'http', 'https', 'login',                             'login_post', 'admin', 'relative' or null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$scheme"
                },
                {
                    "name": "param",
                    "content": "Site ID, or null for the current site.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$blog_id"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "sites_clauses",
        "line": 625,
        "end_line": 625,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the site query clauses.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "An associative array of site query clauses.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$pieces"
                },
                {
                    "name": "param",
                    "content": "Current instance of WP_Site_Query (passed by reference).",
                    "types": [
                        "\\WP_Site_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-site-query.php"
    },
    {
        "name": "sites_pre_query",
        "line": 310,
        "end_line": 310,
        "type": "filter_reference",
        "doc": {
            "description": "Filter the site data before the get_sites query takes place.",
            "long_description": "<p>Return a non-null value to bypass WordPress's default site queries.</p> <p>The expected return type from this filter depends on the value passed in the request query_vars: When <code>$this-&gt;query_vars['count']</code> is set, the filter should return the site count as an int. When <code>'ids' == $this-&gt;query_vars['fields']</code>, the filter should return an array of site ids. Otherwise the filter should return an array of WP_Site objects.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Return an array of site data to short-circuit WP's site query,                                  the site count as an integer if <code>$this-&gt;query_vars['count']</code> is set,                                  or null to run the normal queries.",
                    "types": [
                        "array",
                        "int",
                        "null"
                    ],
                    "variable": "$site_data"
                },
                {
                    "name": "param",
                    "content": "The WP_Site_Query instance, passed by reference.",
                    "types": [
                        "\\WP_Site_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-site-query.php"
    },
    {
        "name": "smilies",
        "line": 4174,
        "end_line": 4174,
        "type": "filter",
        "doc": {
            "description": "Filters all the smilies.",
            "long_description": "<p>This filter must be added before <code>smilies_init</code> is run, as it is normally only run once to setup the smilies regex.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "List of the smilies' hexadecimal representations, keyed by their smily code.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$wpsmiliestrans"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "smilies_src",
        "line": 3308,
        "end_line": 3308,
        "type": "filter",
        "doc": {
            "description": "Filters the Smiley image URL before it's used in the image element.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "URL for the smiley image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$smiley_url"
                },
                {
                    "name": "param",
                    "content": "Filename for the smiley image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$img"
                },
                {
                    "name": "param",
                    "content": "Site URL, as returned by site_url().",
                    "types": [
                        "string"
                    ],
                    "variable": "$site_url"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "split_the_query",
        "line": 2977,
        "end_line": 2977,
        "type": "filter",
        "doc": {
            "description": "Filters whether to split the query.",
            "long_description": "<p>Splitting the query will cause it to fetch just the IDs of the found posts (and then individually fetch each post by ID), rather than fetching every complete row at once. One massive result vs. many small results.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether or not to split the query.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$split_the_query"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance.",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "status_header",
        "line": 1385,
        "end_line": 1385,
        "type": "filter",
        "doc": {
            "description": "Filters an HTTP status header.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "HTTP status header.",
                    "types": [
                        "string"
                    ],
                    "variable": "$status_header"
                },
                {
                    "name": "param",
                    "content": "HTTP status code.",
                    "types": [
                        "int"
                    ],
                    "variable": "$code"
                },
                {
                    "name": "param",
                    "content": "Description for the status code.",
                    "types": [
                        "string"
                    ],
                    "variable": "$description"
                },
                {
                    "name": "param",
                    "content": "Server protocol.",
                    "types": [
                        "string"
                    ],
                    "variable": "$protocol"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "strip_shortcodes_tagnames",
        "line": 616,
        "end_line": 616,
        "type": "filter",
        "doc": {
            "description": "Filters the list of shortcode tags to remove from the content.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of shortcode tags to remove.",
                    "types": [
                        "array"
                    ],
                    "variable": "$tags_to_remove"
                },
                {
                    "name": "param",
                    "content": "Content shortcodes are being removed from.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-includes/shortcodes.php"
    },
    {
        "name": "style_loader_src",
        "line": 406,
        "end_line": 406,
        "type": "filter",
        "doc": {
            "description": "Filters an enqueued style's fully-qualified URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "The source URL of the enqueued style.",
                    "types": [
                        "string"
                    ],
                    "variable": "$src"
                },
                {
                    "name": "param",
                    "content": "The style's registered handle.",
                    "types": [
                        "string"
                    ],
                    "variable": "$handle"
                }
            ]
        },
        "file": "wp-includes/class.wp-styles.php"
    },
    {
        "name": "style_loader_tag",
        "line": 248,
        "end_line": 248,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML link tag of an enqueued style.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "since",
                    "content": "4.3.0",
                    "description": "Introduced the <code>$href</code> parameter."
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "Introduced the <code>$media</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The link tag for the enqueued style.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "The style's registered handle.",
                    "types": [
                        "string"
                    ],
                    "variable": "$handle"
                },
                {
                    "name": "param",
                    "content": "The stylesheet's source URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$href"
                },
                {
                    "name": "param",
                    "content": "The stylesheet's media attribute.",
                    "types": [
                        "string"
                    ],
                    "variable": "$media"
                }
            ]
        },
        "file": "wp-includes/class.wp-styles.php"
    },
    {
        "name": "stylesheet",
        "line": 177,
        "end_line": 177,
        "type": "filter",
        "doc": {
            "description": "Filters the name of current stylesheet.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Name of the current stylesheet.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "stylesheet_directory",
        "line": 201,
        "end_line": 201,
        "type": "filter",
        "doc": {
            "description": "Filters the stylesheet directory path for current theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Absolute path to the current theme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet_dir"
                },
                {
                    "name": "param",
                    "content": "Directory name of the current theme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet"
                },
                {
                    "name": "param",
                    "content": "Absolute path to themes directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$theme_root"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "stylesheet_directory_uri",
        "line": 225,
        "end_line": 225,
        "type": "filter",
        "doc": {
            "description": "Filters the stylesheet directory URI.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Stylesheet directory URI.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet_dir_uri"
                },
                {
                    "name": "param",
                    "content": "Name of the activated theme's directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet"
                },
                {
                    "name": "param",
                    "content": "Themes root URI.",
                    "types": [
                        "string"
                    ],
                    "variable": "$theme_root_uri"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "stylesheet_uri",
        "line": 249,
        "end_line": 249,
        "type": "filter",
        "doc": {
            "description": "Filters the URI of the current theme stylesheet.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Stylesheet URI for the current theme/child theme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet_uri"
                },
                {
                    "name": "param",
                    "content": "Stylesheet directory URI for the current theme/child theme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet_dir_uri"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "subdirectory_reserved_names",
        "line": 2605,
        "end_line": 2605,
        "type": "filter",
        "doc": {
            "description": "Filters reserved site names on a sub-directory Multisite installation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "'wp-admin', 'wp-content', 'wp-includes', 'wp-json', and 'embed' were added              to the reserved names list."
                },
                {
                    "name": "param",
                    "content": "Array of reserved names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$subdirectory_reserved_names"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "submenu_file",
        "line": 48,
        "end_line": 48,
        "type": "filter",
        "doc": {
            "description": "Filters the file of an admin menu sub-menu item.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The submenu file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$submenu_file"
                },
                {
                    "name": "param",
                    "content": "The submenu item's parent file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$parent_file"
                }
            ]
        },
        "file": "wp-admin/menu-header.php"
    },
    {
        "name": "tables_to_repair",
        "line": 92,
        "end_line": 92,
        "type": "filter",
        "doc": {
            "description": "Filters additional database tables to repair.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of prefixed table names to be repaired.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$tables"
                }
            ]
        },
        "file": "wp-admin/maint/repair.php"
    },
    {
        "name": "tag_cloud_sort",
        "line": 857,
        "end_line": 857,
        "type": "filter",
        "doc": {
            "description": "Filters how the items in a tag cloud are sorted.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Ordered array of terms.",
                    "types": [
                        "\\WP_Term[]"
                    ],
                    "variable": "$tags"
                },
                {
                    "name": "param",
                    "content": "An array of tag cloud arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "tag_escape",
        "line": 4523,
        "end_line": 4523,
        "type": "filter",
        "doc": {
            "description": "Filters a string cleaned and escaped for output as an HTML tag.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The tag name after it has been escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$safe_tag"
                },
                {
                    "name": "param",
                    "content": "The text before it was escaped.",
                    "types": [
                        "string"
                    ],
                    "variable": "$tag_name"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "tag_feed_link",
        "line": 905,
        "end_line": 905,
        "type": "filter",
        "doc": {
            "description": "Filters the post tag feed link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The tag feed link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Feed type. Possible values include 'rss2', 'atom'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "tag_link",
        "line": 4252,
        "end_line": 4252,
        "type": "filter",
        "doc": {
            "description": "Filters the tag link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "deprecated",
                    "content": "2.5.0",
                    "description": "Use 'term_link' instead."
                },
                {
                    "name": "param",
                    "content": "Tag link URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$termlink"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "tag_rewrite_rules",
        "line": 1414,
        "end_line": 1414,
        "type": "filter",
        "doc": {
            "description": "Filters rewrite rules used specifically for Tags.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.1.0",
                    "description": "Use 'post_tag_rewrite_rules' instead"
                },
                {
                    "name": "param",
                    "content": "Array of rewrite rules generated for tags, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$rules"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "tag_row_actions",
        "line": 511,
        "end_line": 511,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed for each term in the Tags list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.0.0",
                    "description": "Use {$taxonomy}_row_actions instead."
                },
                {
                    "name": "param",
                    "content": "An array of action links to be displayed. Default                          'Edit', 'Quick Edit', 'Delete', and 'View'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "Term object.",
                    "types": [
                        "\\WP_Term"
                    ],
                    "variable": "$tag"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-terms-list-table.php"
    },
    {
        "name": "tagsperpage",
        "line": 100,
        "end_line": 100,
        "type": "filter",
        "doc": {
            "description": "Filters the number of terms displayed per page for the Tags list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "deprecated",
                    "content": "2.8.0",
                    "description": "Use edit_tags_per_page instead."
                },
                {
                    "name": "param",
                    "content": "Number of tags to be displayed. Default 20.",
                    "types": [
                        "int"
                    ],
                    "variable": "$tags_per_page"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-terms-list-table.php"
    },
    {
        "name": "taxonomy_feed_link",
        "line": 916,
        "end_line": 916,
        "type": "filter",
        "doc": {
            "description": "Filters the feed link for a taxonomy other than 'category' or 'post_tag'.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The taxonomy feed link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Feed type. Possible values include 'rss2', 'atom'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed"
                },
                {
                    "name": "param",
                    "content": "The taxonomy name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "taxonomy_labels_{$taxonomy}",
        "line": 590,
        "end_line": 590,
        "type": "filter",
        "doc": {
            "description": "Filters the labels of a specific taxonomy.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "see",
                    "content": "for the full list of taxonomy labels.",
                    "refers": "get_taxonomy_labels()"
                },
                {
                    "name": "param",
                    "content": "Object with labels for the taxonomy as member variables.",
                    "types": [
                        "object"
                    ],
                    "variable": "$labels"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "taxonomy_parent_dropdown_args",
        "line": 483,
        "end_line": 483,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy parent drop-down on the Edit Term page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "since",
                    "content": "4.2.0",
                    "description": "Added <code>$context</code> parameter."
                },
                {
                    "name": "param",
                    "content": "{     An array of taxonomy parent drop-down arguments.     @type int|bool $hide_empty       Whether to hide terms not attached to any posts. Default 0|false.     @type bool     $hide_if_empty    Whether to hide the drop-down if no terms exist. Default false.     @type string   $taxonomy         The taxonomy slug.     @type string   $name             Value of the name attribute to use for the drop-down select element.                                      Default 'parent'.     @type string   $orderby          The field to order by. Default 'name'.     @type bool     $hierarchical     Whether the taxonomy is hierarchical. Default true.     @type string   $show_option_none Label to display if there are no terms. Default 'None'. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$dropdown_args"
                },
                {
                    "name": "param",
                    "content": "The taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "Filter context. Accepts 'new' or 'edit'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/edit-tags.php"
    },
    {
        "name": "teeny_mce_before_init",
        "line": 722,
        "end_line": 722,
        "type": "filter",
        "doc": {
            "description": "Filters the teenyMCE config before init.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An array with teenyMCE config.",
                    "types": [
                        "array"
                    ],
                    "variable": "$mceInit"
                },
                {
                    "name": "param",
                    "content": "Unique editor identifier, e.g. 'content'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "teeny_mce_buttons",
        "line": 589,
        "end_line": 589,
        "type": "filter",
        "doc": {
            "description": "Filters the list of teenyMCE buttons (Text tab).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of teenyMCE buttons.",
                    "types": [
                        "array"
                    ],
                    "variable": "$buttons"
                },
                {
                    "name": "param",
                    "content": "Unique editor identifier, e.g. 'content'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "teeny_mce_plugins",
        "line": 382,
        "end_line": 382,
        "type": "filter",
        "doc": {
            "description": "Filters the list of teenyMCE plugins.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of teenyMCE plugins.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plugins"
                },
                {
                    "name": "param",
                    "content": "Unique editor identifier, e.g. 'content'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "template",
        "line": 311,
        "end_line": 311,
        "type": "filter",
        "doc": {
            "description": "Filters the name of the current theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Current theme's directory name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$template"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "template_directory",
        "line": 335,
        "end_line": 335,
        "type": "filter",
        "doc": {
            "description": "Filters the current theme directory path.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The URI of the current theme directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$template_dir"
                },
                {
                    "name": "param",
                    "content": "Directory name of the current theme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$template"
                },
                {
                    "name": "param",
                    "content": "Absolute path to the themes directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$theme_root"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "template_directory_uri",
        "line": 359,
        "end_line": 359,
        "type": "filter",
        "doc": {
            "description": "Filters the current theme directory URI.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The URI of the current theme directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$template_dir_uri"
                },
                {
                    "name": "param",
                    "content": "Directory name of the current theme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$template"
                },
                {
                    "name": "param",
                    "content": "The themes root URI.",
                    "types": [
                        "string"
                    ],
                    "variable": "$theme_root_uri"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "template_include",
        "line": 96,
        "end_line": 96,
        "type": "filter",
        "doc": {
            "description": "Filters the path of the current template before including it.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The path of the template to include.",
                    "types": [
                        "string"
                    ],
                    "variable": "$template"
                }
            ]
        },
        "file": "wp-includes/template-loader.php"
    },
    {
        "name": "term_id_filter",
        "line": 2371,
        "end_line": 2371,
        "type": "filter",
        "doc": {
            "description": "Filters the term ID after a new term is created.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                },
                {
                    "name": "param",
                    "content": "Taxonomy term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$tt_id"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "term_link",
        "line": 4276,
        "end_line": 4276,
        "type": "filter",
        "doc": {
            "description": "Filters the term link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Term link URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$termlink"
                },
                {
                    "name": "param",
                    "content": "Term object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$term"
                },
                {
                    "name": "param",
                    "content": "Taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "term_links-{$taxonomy}",
        "line": 1306,
        "end_line": 1306,
        "type": "filter",
        "doc": {
            "description": "Filters the term links for a given taxonomy.",
            "long_description": "<p>The dynamic portion of the filter name, <code>$taxonomy</code>, refers to the taxonomy slug.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of term links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$links"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "term_name",
        "line": 392,
        "end_line": 392,
        "type": "filter",
        "doc": {
            "description": "Filters display of the term name in the terms list table.",
            "long_description": "<p>The default output may include padding due to the term's current level in the term hierarchy.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Terms_List_Table::column_name()"
                },
                {
                    "name": "param",
                    "content": "The term name, padded if not top-level.",
                    "types": [
                        "string"
                    ],
                    "variable": "$pad_tag_name"
                },
                {
                    "name": "param",
                    "content": "Term object.",
                    "types": [
                        "\\WP_Term"
                    ],
                    "variable": "$tag"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-terms-list-table.php"
    },
    {
        "name": "term_search_min_chars",
        "line": 146,
        "end_line": 146,
        "type": "filter",
        "doc": {
            "description": "Filters the minimum number of characters required to fire a tag search via Ajax.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "The minimum number of characters required. Default 2.",
                    "types": [
                        "int"
                    ],
                    "variable": "$characters"
                },
                {
                    "name": "param",
                    "content": "The taxonomy object.",
                    "types": [
                        "\\WP_Taxonomy"
                    ],
                    "variable": "$tax"
                },
                {
                    "name": "param",
                    "content": "The search term.",
                    "types": [
                        "string"
                    ],
                    "variable": "$s"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "term_updated_messages",
        "line": 49,
        "end_line": 49,
        "type": "filter",
        "doc": {
            "description": "Filters the messages displayed when a tag is updated.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "The messages to be displayed.",
                    "types": [
                        "array"
                    ],
                    "variable": "$messages"
                }
            ]
        },
        "file": "wp-admin/includes/edit-tag-messages.php"
    },
    {
        "name": "term_{$field}",
        "line": 1651,
        "end_line": 1651,
        "type": "filter",
        "doc": {
            "description": "Filters the term field sanitized for display.",
            "long_description": "<p>The dynamic portion of the filter name, <code>$field</code>, refers to the term field name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the term field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                },
                {
                    "name": "param",
                    "content": "Taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "Context to retrieve the term field value.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "term_{$field}_rss",
        "line": 1623,
        "end_line": 1623,
        "type": "filter",
        "doc": {
            "description": "Filters the term field for use in RSS.",
            "long_description": "<p>The dynamic portion of the filter name, <code>$field</code>, refers to the term field.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the term field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "terms_clauses",
        "line": 657,
        "end_line": 657,
        "type": "filter",
        "doc": {
            "description": "Filters the terms query SQL clauses.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of query SQL clauses.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$pieces"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomy names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                },
                {
                    "name": "param",
                    "content": "An array of term query arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-term-query.php"
    },
    {
        "name": "terms_pre_query",
        "line": 692,
        "end_line": 692,
        "type": "filter_reference",
        "doc": {
            "description": "Filter the terms array before the query takes place.",
            "long_description": "<p>Return a non-null value to bypass WordPress's default term queries.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "Return an array of term data to short-circuit WP's term query,                             or null to allow WP queries to run normally.",
                    "types": [
                        "array",
                        "null"
                    ],
                    "variable": "$terms"
                },
                {
                    "name": "param",
                    "content": "The WP_Term_Query instance, passed by reference.",
                    "types": [
                        "\\WP_Term_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-term-query.php"
    },
    {
        "name": "terms_to_edit",
        "line": 293,
        "end_line": 293,
        "type": "filter",
        "doc": {
            "description": "Filters the comma-separated list of terms available to edit.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_terms_to_edit()"
                },
                {
                    "name": "param",
                    "content": "A comma-separated list of term names.",
                    "types": [
                        "string"
                    ],
                    "variable": "$terms_to_edit"
                },
                {
                    "name": "param",
                    "content": "The taxonomy name for which to retrieve terms.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                }
            ]
        },
        "file": "wp-admin/includes/taxonomy.php"
    },
    {
        "name": "the_author",
        "line": 37,
        "end_line": 37,
        "type": "filter",
        "doc": {
            "description": "Filters the display name of the current post's author.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The author's display name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$authordata->display_name"
                }
            ]
        },
        "file": "wp-includes/author-template.php"
    },
    {
        "name": "the_author_posts_link",
        "line": 314,
        "end_line": 314,
        "type": "filter",
        "doc": {
            "description": "Filters the link to the author page of the author of the current post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "HTML link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-includes/author-template.php"
    },
    {
        "name": "the_author_{$field}",
        "line": 215,
        "end_line": 215,
        "type": "filter",
        "doc": {
            "description": "The value of the requested user metadata.",
            "long_description": "<p>The filter name is dynamic and depends on the $field parameter of the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The value of the metadata.",
                    "types": [
                        "string"
                    ],
                    "variable": "$author_meta"
                },
                {
                    "name": "param",
                    "content": "The user ID.",
                    "types": [
                        "int",
                        "false"
                    ],
                    "variable": "$user_id"
                }
            ]
        },
        "file": "wp-includes/author-template.php"
    },
    {
        "name": "the_category",
        "line": 220,
        "end_line": 220,
        "type": "filter",
        "doc": {
            "description": "Filters the category or list of categories.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "param",
                    "content": "List of categories for the current post.",
                    "types": [
                        "string"
                    ],
                    "variable": "$thelist"
                },
                {
                    "name": "param",
                    "content": "Separator used between the categories.",
                    "types": [
                        "string"
                    ],
                    "variable": "$separator"
                },
                {
                    "name": "param",
                    "content": "How to display the category parents. Accepts 'multiple',                          'single', or empty.",
                    "types": [
                        "string"
                    ],
                    "variable": "$parents"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "the_category_list",
        "line": 148,
        "end_line": 148,
        "type": "filter",
        "doc": {
            "description": "Filters the categories before building the category list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of the post's categories.",
                    "types": [
                        "\\WP_Term[]"
                    ],
                    "variable": "$categories"
                },
                {
                    "name": "param",
                    "content": "ID of the post we're retrieving categories for. When <code>false</code>, we assume the                              current post in the loop.",
                    "types": [
                        "int",
                        "bool"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "the_category_rss",
        "line": 423,
        "end_line": 423,
        "type": "filter",
        "doc": {
            "description": "Filters all of the post categories for display in a feed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "param",
                    "content": "All of the RSS post categories.",
                    "types": [
                        "string"
                    ],
                    "variable": "$the_list"
                },
                {
                    "name": "param",
                    "content": "Type of feed. Possible values include 'rss2', 'atom'.                         Default 'rss2'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "the_comments",
        "line": 481,
        "end_line": 481,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the comment query results.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of comments.",
                    "types": [
                        "\\WP_Comment[]"
                    ],
                    "variable": "$_comments"
                },
                {
                    "name": "param",
                    "content": "Current instance of WP_Comment_Query (passed by reference).",
                    "types": [
                        "\\WP_Comment_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-comment-query.php"
    },
    {
        "name": "the_content",
        "line": 253,
        "end_line": 253,
        "type": "filter",
        "doc": {
            "description": "Filters the post content.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "0.71"
                },
                {
                    "name": "param",
                    "content": "Content of the current post.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "the_content_export",
        "line": 554,
        "end_line": 554,
        "type": "filter",
        "doc": {
            "description": "Filters the post content used for WXR exports.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Content of the current post.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_content"
                }
            ]
        },
        "file": "wp-admin/includes/export.php"
    },
    {
        "name": "the_content_feed",
        "line": 202,
        "end_line": 202,
        "type": "filter",
        "doc": {
            "description": "Filters the post content for use in feeds.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The current post content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Type of feed. Possible values include 'rss2', 'atom'.                          Default 'rss2'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed_type"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "the_content_more_link",
        "line": 365,
        "end_line": 365,
        "type": "filter",
        "doc": {
            "description": "Filters the Read More link text.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Read More link element.",
                    "types": [
                        "string"
                    ],
                    "variable": "$more_link_element"
                },
                {
                    "name": "param",
                    "content": "Read More text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$more_link_text"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "the_date",
        "line": 2373,
        "end_line": 2373,
        "type": "filter",
        "doc": {
            "description": "Filters the date a post was published for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "0.71"
                },
                {
                    "name": "param",
                    "content": "The formatted date string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$the_date"
                },
                {
                    "name": "param",
                    "content": "PHP date format. Defaults to 'date_format' option                         if not specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "HTML output before the date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$before"
                },
                {
                    "name": "param",
                    "content": "HTML output after the date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$after"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "the_editor",
        "line": 262,
        "end_line": 268,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML markup output that displays the editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Editor's HTML markup.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "the_editor_content",
        "line": 284,
        "end_line": 284,
        "type": "filter",
        "doc": {
            "description": "Filters the default editor content.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Default editor content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "The default editor for the current user.                               Either 'html' or 'tinymce'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$default_editor"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "the_excerpt",
        "line": 390,
        "end_line": 390,
        "type": "filter",
        "doc": {
            "description": "Filters the displayed post excerpt.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "0.71"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_the_excerpt()"
                },
                {
                    "name": "param",
                    "content": "The post excerpt.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_excerpt"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "the_excerpt_embed",
        "line": 956,
        "end_line": 956,
        "type": "filter",
        "doc": {
            "description": "Filters the post excerpt for the embed template.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The current post excerpt.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "the_excerpt_export",
        "line": 563,
        "end_line": 563,
        "type": "filter",
        "doc": {
            "description": "Filters the post excerpt used for WXR exports.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "Excerpt for the current post.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_excerpt"
                }
            ]
        },
        "file": "wp-admin/includes/export.php"
    },
    {
        "name": "the_excerpt_rss",
        "line": 230,
        "end_line": 230,
        "type": "filter",
        "doc": {
            "description": "Filters the post excerpt for a feed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "param",
                    "content": "The current post excerpt.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "the_feed_link",
        "line": 602,
        "end_line": 602,
        "type": "filter",
        "doc": {
            "description": "Filters the feed link anchor tag.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The complete anchor tag for a feed link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "The feed type. Possible values include 'rss2', 'atom',                     or an empty string for the default feed type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feed"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "the_generator",
        "line": 4553,
        "end_line": 4553,
        "type": "filter",
        "doc": {
            "description": "Filters the output of the XHTML generator tag for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The generator output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$generator_type"
                },
                {
                    "name": "param",
                    "content": "The type of generator to output. Accepts 'html',                               'xhtml', 'atom', 'rss2', 'rdf', 'comment', 'export'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "the_guid",
        "line": 203,
        "end_line": 203,
        "type": "filter",
        "doc": {
            "description": "Filters the escaped Global Unique Identifier (guid) of the post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_the_guid()"
                },
                {
                    "name": "param",
                    "content": "Escaped Global Unique Identifier (guid) of the post.",
                    "types": [
                        "string"
                    ],
                    "variable": "$guid"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "the_meta_key",
        "line": 1115,
        "end_line": 1115,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output of the li element in the post custom fields list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The HTML output for the li element.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "Meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                },
                {
                    "name": "param",
                    "content": "Meta value.",
                    "types": [
                        "string"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "the_modified_author",
        "line": 103,
        "end_line": 103,
        "type": "filter",
        "doc": {
            "description": "Filters the display name of the author who last edited the current post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The author's display name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$last_user->display_name"
                }
            ]
        },
        "file": "wp-includes/author-template.php"
    },
    {
        "name": "the_modified_date",
        "line": 2445,
        "end_line": 2445,
        "type": "filter",
        "doc": {
            "description": "Filters the date a post was last modified for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The last modified date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$the_modified_date"
                },
                {
                    "name": "param",
                    "content": "PHP date format. Defaults to 'date_format' option                                  if not specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                },
                {
                    "name": "param",
                    "content": "HTML output before the date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$before"
                },
                {
                    "name": "param",
                    "content": "HTML output after the date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$after"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "the_modified_time",
        "line": 2695,
        "end_line": 2695,
        "type": "filter",
        "doc": {
            "description": "Filters the localized time a post was last modified, for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "The formatted time.",
                    "types": [
                        "string"
                    ],
                    "variable": "$get_the_modified_time"
                },
                {
                    "name": "param",
                    "content": "The time format. Accepts 'G', 'U',                                      or php date format. Defaults to value                                      specified in 'time_format' option.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "the_networks",
        "line": 291,
        "end_line": 291,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the network query results.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "An array of WP_Network objects.",
                    "types": [
                        "\\WP_Network[]"
                    ],
                    "variable": "$_networks"
                },
                {
                    "name": "param",
                    "content": "Current instance of WP_Network_Query (passed by reference).",
                    "types": [
                        "\\WP_Network_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-network-query.php"
    },
    {
        "name": "the_password_form",
        "line": 1721,
        "end_line": 1721,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output for the protected post password form.",
            "long_description": "<p>If modifying the password field, please note that the core database schema limits the password field to 20 characters regardless of the value of the size attribute in the form input.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The password form HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "the_permalink",
        "line": 27,
        "end_line": 27,
        "type": "filter",
        "doc": {
            "description": "Filters the display of the permalink for the current post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$post</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The permalink for the current post.",
                    "types": [
                        "string"
                    ],
                    "variable": "$permalink"
                },
                {
                    "name": "param",
                    "content": "Post ID, WP_Post object, or 0. Default 0.",
                    "types": [
                        "int",
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "the_permalink_rss",
        "line": 246,
        "end_line": 246,
        "type": "filter",
        "doc": {
            "description": "Filters the permalink to the post for use in feeds.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The current post permalink.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_permalink"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "the_post_thumbnail_caption",
        "line": 275,
        "end_line": 275,
        "type": "filter",
        "doc": {
            "description": "Filters the displayed post thumbnail caption.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Caption for the given attachment.",
                    "types": [
                        "string"
                    ],
                    "variable": "$caption"
                }
            ]
        },
        "file": "wp-includes/post-thumbnail-template.php"
    },
    {
        "name": "the_posts",
        "line": 3160,
        "end_line": 3160,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the array of retrieved posts after they've been fetched and internally processed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of post objects.",
                    "types": [
                        "\\WP_Post[]"
                    ],
                    "variable": "$posts"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "the_preview",
        "line": 3097,
        "end_line": 3097,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the single post for preview mode.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post_preview"
                },
                {
                    "name": "param",
                    "content": "The WP_Query instance (passed by reference).",
                    "types": [
                        "\\WP_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "the_privacy_policy_link",
        "line": 4456,
        "end_line": 4456,
        "type": "filter",
        "doc": {
            "description": "Filters the privacy policy link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The privacy policy link. Empty string if it                                   doesn't exist.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "The URL of the privacy policy. Empty string                                   if it doesn't exist.",
                    "types": [
                        "string"
                    ],
                    "variable": "$privacy_policy_url"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "the_search_query",
        "line": 3937,
        "end_line": 3937,
        "type": "filter",
        "doc": {
            "description": "Filters the contents of the search query variable for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Contents of the search query variable.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$search"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "the_shortlink",
        "line": 3980,
        "end_line": 3980,
        "type": "filter",
        "doc": {
            "description": "Filters the short link anchor tag for a post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Shortlink anchor tag.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Shortlink URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$shortlink"
                },
                {
                    "name": "param",
                    "content": "Shortlink's text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "Shortlink's title attribute.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "the_sites",
        "line": 384,
        "end_line": 384,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the site query results.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "An array of WP_Site objects.",
                    "types": [
                        "\\WP_Site[]"
                    ],
                    "variable": "$_sites"
                },
                {
                    "name": "param",
                    "content": "Current instance of WP_Site_Query (passed by reference).",
                    "types": [
                        "\\WP_Site_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-site-query.php"
    },
    {
        "name": "the_tags",
        "line": 1163,
        "end_line": 1163,
        "type": "filter",
        "doc": {
            "description": "Filters the tags list for a given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "List of tags.",
                    "types": [
                        "string"
                    ],
                    "variable": "$tag_list"
                },
                {
                    "name": "param",
                    "content": "String to use before tags.",
                    "types": [
                        "string"
                    ],
                    "variable": "$before"
                },
                {
                    "name": "param",
                    "content": "String to use between the tags.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sep"
                },
                {
                    "name": "param",
                    "content": "String to use after tags.",
                    "types": [
                        "string"
                    ],
                    "variable": "$after"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "the_terms",
        "line": 1406,
        "end_line": 1406,
        "type": "filter",
        "doc": {
            "description": "Filters the list of terms to display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "List of terms to display.",
                    "types": [
                        "string"
                    ],
                    "variable": "$term_list"
                },
                {
                    "name": "param",
                    "content": "The taxonomy name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "String to use before the terms.",
                    "types": [
                        "string"
                    ],
                    "variable": "$before"
                },
                {
                    "name": "param",
                    "content": "String to use between the terms.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sep"
                },
                {
                    "name": "param",
                    "content": "String to use after the terms.",
                    "types": [
                        "string"
                    ],
                    "variable": "$after"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "the_time",
        "line": 2508,
        "end_line": 2508,
        "type": "filter",
        "doc": {
            "description": "Filters the time a post was written for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "0.71"
                },
                {
                    "name": "param",
                    "content": "The formatted time.",
                    "types": [
                        "string"
                    ],
                    "variable": "$get_the_time"
                },
                {
                    "name": "param",
                    "content": "The time format. Accepts 'G', 'U',                             or php date format.",
                    "types": [
                        "string"
                    ],
                    "variable": "$d"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "the_title",
        "line": 171,
        "end_line": 171,
        "type": "filter",
        "doc": {
            "description": "Filters the post title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "0.71"
                },
                {
                    "name": "param",
                    "content": "The post title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "the_title_rss",
        "line": 163,
        "end_line": 163,
        "type": "filter",
        "doc": {
            "description": "Filters the post title for use in a feed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.2.0"
                },
                {
                    "name": "param",
                    "content": "The current post title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "the_weekday",
        "line": 2818,
        "end_line": 2818,
        "type": "filter",
        "doc": {
            "description": "Filters the weekday on which the post was written, for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "0.71"
                },
                {
                    "name": "param",
                    "content": "",
                    "types": [
                        "string"
                    ],
                    "variable": "$the_weekday"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "the_weekday_date",
        "line": 2863,
        "end_line": 2863,
        "type": "filter",
        "doc": {
            "description": "Filters the localized date on which the post was written, for display.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "0.71"
                },
                {
                    "name": "param",
                    "content": "The weekday on which the post was written.",
                    "types": [
                        "string"
                    ],
                    "variable": "$the_weekday_date"
                },
                {
                    "name": "param",
                    "content": "The HTML to output before the date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$before"
                },
                {
                    "name": "param",
                    "content": "The HTML to output after the date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$after"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "theme_action_links",
        "line": 549,
        "end_line": 549,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed for each theme in the Multisite themes list table.",
            "long_description": "<p>The action links displayed are determined by the theme's status, and which Multisite themes list table is being displayed - the Network themes list table (themes.php), which displays all installed themes, or the Site themes list table (site-themes.php), which displays the non-network enabled themes when editing a site in the Network admin.</p> <p>The default action links for the Network themes list table include 'Network Enable', 'Network Disable', and 'Delete'.</p> <p>The default action links for the Site themes list table include 'Enable', and 'Disable'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of action links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "The current WP_Theme object.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$theme"
                },
                {
                    "name": "param",
                    "content": "Status of the theme, one of 'all', 'enabled', or 'disabled'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-themes-list-table.php"
    },
    {
        "name": "theme_action_links_{$stylesheet}",
        "line": 565,
        "end_line": 565,
        "type": "filter",
        "doc": {
            "description": "Filters the action links of a specific theme in the Multisite themes list table.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$stylesheet</code>, refers to the directory name of the theme, which in most cases is synonymous with the template name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of action links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "The current WP_Theme object.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$theme"
                },
                {
                    "name": "param",
                    "content": "Status of the theme, one of 'all', 'enabled', or 'disabled'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-themes-list-table.php"
    },
    {
        "name": "theme_file_path",
        "line": 4351,
        "end_line": 4351,
        "type": "filter",
        "doc": {
            "description": "Filters the path to a file in the theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The file path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "The requested file to search for.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "theme_file_uri",
        "line": 4290,
        "end_line": 4290,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to a file in the theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The file URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The requested file to search for.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "theme_install_actions",
        "line": 349,
        "end_line": 349,
        "type": "filter",
        "doc": {
            "description": "Filters the install action links for a theme in the Install Themes list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of theme action links. Defaults are                          links to Install Now, Preview, and Details.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "Theme object.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$theme"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-theme-install-list-table.php"
    },
    {
        "name": "theme_locale",
        "line": 879,
        "end_line": 879,
        "type": "filter",
        "doc": {
            "description": "Filters a theme's locale.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The theme's current locale.",
                    "types": [
                        "string"
                    ],
                    "variable": "$locale"
                },
                {
                    "name": "param",
                    "content": "Text domain. Unique identifier for retrieving translated strings.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                }
            ]
        },
        "file": "wp-includes/l10n.php"
    },
    {
        "name": "theme_mod_{$name}",
        "line": 933,
        "end_line": 933,
        "type": "filter",
        "doc": {
            "description": "Filters the theme modification, or 'theme_mod', value.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$name</code>, refers to the key name of the modification array. For example, 'header_textcolor', 'header_image', and so on depending on the theme options.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The value of the current theme modification.",
                    "types": [
                        "string"
                    ],
                    "variable": "$current_mod"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "theme_root",
        "line": 600,
        "end_line": 600,
        "type": "filter",
        "doc": {
            "description": "Filters the absolute path to the themes directory.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Absolute path to themes directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$theme_root"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "theme_root_uri",
        "line": 653,
        "end_line": 653,
        "type": "filter",
        "doc": {
            "description": "Filters the URI for themes directory.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "The URI for themes directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$theme_root_uri"
                },
                {
                    "name": "param",
                    "content": "WordPress web address which is set in General Options.",
                    "types": [
                        "string"
                    ],
                    "variable": "$siteurl"
                },
                {
                    "name": "param",
                    "content": "The stylesheet or template name of the theme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet_or_template"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "theme_row_meta",
        "line": 636,
        "end_line": 636,
        "type": "filter",
        "doc": {
            "description": "Filters the array of row meta for each theme in the Multisite themes list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of the theme's metadata,                             including the version, author, and                             theme URI.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$theme_meta"
                },
                {
                    "name": "param",
                    "content": "Directory name of the theme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet"
                },
                {
                    "name": "param",
                    "content": "WP_Theme object.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$theme"
                },
                {
                    "name": "param",
                    "content": "Status of the theme.",
                    "types": [
                        "string"
                    ],
                    "variable": "$status"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-themes-list-table.php"
    },
    {
        "name": "theme_scandir_exclusions",
        "line": 1320,
        "end_line": 1320,
        "type": "filter",
        "doc": {
            "description": "Filters the array of excluded directories and files while scanning theme folder.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.4"
                },
                {
                    "name": "param",
                    "content": "Array of excluded directories and files.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$exclusions"
                }
            ]
        },
        "file": "wp-includes/class-wp-theme.php"
    },
    {
        "name": "theme_templates",
        "line": 1257,
        "end_line": 1257,
        "type": "filter",
        "doc": {
            "description": "Filters list of page templates for a theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "Array of page templates. Keys are filenames,                                     values are translated names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_templates"
                },
                {
                    "name": "param",
                    "content": "The theme object.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$this"
                },
                {
                    "name": "param",
                    "content": "The post being edited, provided for context, or null.",
                    "types": [
                        "\\WP_Post",
                        "null"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Post type to get the templates for.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-includes/class-wp-theme.php"
    },
    {
        "name": "theme_{$post_type}_templates",
        "line": 1274,
        "end_line": 1274,
        "type": "filter",
        "doc": {
            "description": "Filters list of page templates for a theme.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$post_type</code>, refers to the post type.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Converted to allow complete control over the <code>$page_templates</code> array."
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "Added the <code>$post_type</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Array of page templates. Keys are filenames,                                     values are translated names.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$post_templates"
                },
                {
                    "name": "param",
                    "content": "The theme object.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$this"
                },
                {
                    "name": "param",
                    "content": "The post being edited, provided for context, or null.",
                    "types": [
                        "\\WP_Post",
                        "null"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Post type to get the templates for.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-includes/class-wp-theme.php"
    },
    {
        "name": "themes_api",
        "line": 485,
        "end_line": 485,
        "type": "filter",
        "doc": {
            "description": "Filters whether to override the WordPress.org Themes API.",
            "long_description": "<p>Passing a non-false value will effectively short-circuit the WordPress.org API request.</p> <p>If <code>$action</code> is 'query_themes', 'theme_information', or 'feature_list', an object MUST be passed. If <code>$action</code> is 'hot_tags', an array should be passed.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether to override the WordPress.org Themes API. Default false.",
                    "types": [
                        "false",
                        "object",
                        "array"
                    ],
                    "variable": "$override"
                },
                {
                    "name": "param",
                    "content": "Requested action. Likely values are 'theme_information',                                    'feature_list', or 'query_themes'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action"
                },
                {
                    "name": "param",
                    "content": "Arguments used to query for installer pages from the Themes API.",
                    "types": [
                        "object"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/theme.php"
    },
    {
        "name": "themes_api_args",
        "line": 468,
        "end_line": 468,
        "type": "filter",
        "doc": {
            "description": "Filters arguments used to query for installer pages from the WordPress.org Themes API.",
            "long_description": "<p>Important: An object MUST be returned to this filter.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Arguments used to query for installer pages from the WordPress.org Themes API.",
                    "types": [
                        "object"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Requested action. Likely values are 'theme_information',                       'feature_list', or 'query_themes'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action"
                }
            ]
        },
        "file": "wp-admin/includes/theme.php"
    },
    {
        "name": "themes_api_result",
        "line": 576,
        "end_line": 576,
        "type": "filter",
        "doc": {
            "description": "Filters the returned WordPress.org Themes API response.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "WordPress.org Themes API response.",
                    "types": [
                        "array",
                        "object",
                        "\\WP_Error"
                    ],
                    "variable": "$res"
                },
                {
                    "name": "param",
                    "content": "Requested action. Likely values are 'theme_information',                                      'feature_list', or 'query_themes'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action"
                },
                {
                    "name": "param",
                    "content": "Arguments used to query for installer pages from the WordPress.org Themes API.",
                    "types": [
                        "object"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/theme.php"
    },
    {
        "name": "themes_update_check_locales",
        "line": 538,
        "end_line": 538,
        "type": "filter",
        "doc": {
            "description": "Filters the locales requested for theme translations.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "since",
                    "content": "4.5.0",
                    "description": "The default value of the <code>$locales</code> parameter changed to include all locales."
                },
                {
                    "name": "param",
                    "content": "Theme locales. Default is all available locales of the site.",
                    "types": [
                        "array"
                    ],
                    "variable": "$locales"
                }
            ]
        },
        "file": "wp-includes/update.php"
    },
    {
        "name": "thread_comments_depth_max",
        "line": 106,
        "end_line": 106,
        "type": "filter",
        "doc": {
            "description": "Filters the maximum depth of threaded/nested comments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "The maximum depth of threaded comments. Default 10.",
                    "types": [
                        "int"
                    ],
                    "variable": "$max_depth"
                }
            ]
        },
        "file": "wp-admin/options-discussion.php"
    },
    {
        "name": "time_formats",
        "line": 369,
        "end_line": 369,
        "type": "filter",
        "doc": {
            "description": "Filters the default time formats.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of default time formats.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$default_time_formats"
                }
            ]
        },
        "file": "wp-admin/options-general.php"
    },
    {
        "name": "tiny_mce_before_init",
        "line": 733,
        "end_line": 733,
        "type": "filter",
        "doc": {
            "description": "Filters the TinyMCE config before init.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An array with TinyMCE config.",
                    "types": [
                        "array"
                    ],
                    "variable": "$mceInit"
                },
                {
                    "name": "param",
                    "content": "Unique editor identifier, e.g. 'content'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "tiny_mce_plugins",
        "line": 439,
        "end_line": 439,
        "type": "filter",
        "doc": {
            "description": "Filters the list of default TinyMCE plugins.",
            "long_description": "<p>The filter specifies which of the default plugins included in WordPress should be added to the TinyMCE instance.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of default TinyMCE plugins.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plugins"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "trackback_url",
        "line": 1138,
        "end_line": 1138,
        "type": "filter",
        "doc": {
            "description": "Filters the returned trackback URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The trackback URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$tb_url"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "transient_{$transient}",
        "line": 736,
        "end_line": 736,
        "type": "filter",
        "doc": {
            "description": "Filters an existing transient's value.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$transient</code>, refers to the transient name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$transient</code> parameter was added"
                },
                {
                    "name": "param",
                    "content": "Value of transient.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Transient name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$transient"
                }
            ]
        },
        "file": "wp-includes/option.php"
    },
    {
        "name": "translations_api",
        "line": 35,
        "end_line": 35,
        "type": "filter",
        "doc": {
            "description": "Allows a plugin to override the WordPress.org Translation Installation API entirely.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "The result object. Default false.",
                    "types": [
                        "bool",
                        "array"
                    ],
                    "variable": "$result"
                },
                {
                    "name": "param",
                    "content": "The type of translations being requested.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "Translation API arguments.",
                    "types": [
                        "object"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/translation-install.php"
    },
    {
        "name": "translations_api_result",
        "line": 108,
        "end_line": 108,
        "type": "filter",
        "doc": {
            "description": "Filters the Translation Installation API response results.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "Response object or WP_Error.",
                    "types": [
                        "object",
                        "\\WP_Error"
                    ],
                    "variable": "$res"
                },
                {
                    "name": "param",
                    "content": "The type of translations being requested.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "Translation API arguments.",
                    "types": [
                        "object"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/translation-install.php"
    },
    {
        "name": "type_url_form_media",
        "line": 2462,
        "end_line": 2462,
        "type": "filter",
        "doc": {
            "description": "Filters the insert media from URL form HTML.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "The insert from URL form HTML.",
                    "types": [
                        "string"
                    ],
                    "variable": "$form_html"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "unzip_file_use_ziparchive",
        "line": 1425,
        "end_line": 1425,
        "type": "filter",
        "doc": {
            "description": "Filters whether to use ZipArchive to unzip archives.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to use ZipArchive. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$ziparchive"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "update_attached_file",
        "line": 546,
        "end_line": 546,
        "type": "filter",
        "doc": {
            "description": "Filters the path to the attached file to update.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Path to the attached file to update.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "update_bulk_plugins_complete_actions",
        "line": 72,
        "end_line": 72,
        "type": "filter",
        "doc": {
            "description": "Filters the list of action links available following bulk plugin updates.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of plugin action links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$update_actions"
                },
                {
                    "name": "param",
                    "content": "Array of information for the last-updated plugin.",
                    "types": [
                        "array"
                    ],
                    "variable": "$plugin_info"
                }
            ]
        },
        "file": "wp-admin/includes/class-bulk-plugin-upgrader-skin.php"
    },
    {
        "name": "update_bulk_theme_complete_actions",
        "line": 72,
        "end_line": 72,
        "type": "filter",
        "doc": {
            "description": "Filters the list of action links available following bulk theme updates.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of theme action links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$update_actions"
                },
                {
                    "name": "param",
                    "content": "Theme object for the last-updated theme.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$theme_info"
                }
            ]
        },
        "file": "wp-admin/includes/class-bulk-theme-upgrader-skin.php"
    },
    {
        "name": "update_custom_css_data",
        "line": 1880,
        "end_line": 1880,
        "type": "filter",
        "doc": {
            "description": "Filters the `css` (`post_content`) and `preprocessed` (`post_content_filtered`) args for a `custom_css` post being updated.",
            "long_description": "<p>This filter can be used by plugin that offer CSS pre-processors, to store the original pre-processed CSS in <code>post_content_filtered</code> and then store processed CSS in <code>post_content</code>. When used in this way, the <code>post_content_filtered</code> should be supplied as the setting value instead of <code>post_content</code> via a the <code>customize_value_custom_css</code> filter, for example:</p> <pre><code>add_filter( 'customize_value_custom_css', function( $value, $setting ) {\n    $post = wp_get_custom_css_post( $setting->stylesheet );\n    if ( $post && ! empty( $post->post_content_filtered ) ) {\n        $css = $post->post_content_filtered;\n    }\n    return $css;\n}, 10, 2 );\n</code></pre>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "{     Custom CSS data.     @type string $css          CSS stored in <code>post_content</code>.     @type string $preprocessed Pre-processed CSS stored in <code>post_content_filtered</code>. Normally empty string. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "{     The args passed into <code>wp_update_custom_css_post()</code> merged with defaults.     @type string $css          The original CSS passed in to be updated.     @type string $preprocessed The original preprocessed CSS passed in to be updated.     @type string $stylesheet   The stylesheet (theme) being updated. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "update_feedback",
        "line": 907,
        "end_line": 907,
        "type": "filter",
        "doc": {
            "description": "Filters feedback messages displayed during the core update process.",
            "long_description": "<p>The filter is first evaluated after the zip file for the latest version has been downloaded and unzipped. It is evaluated five more times during the process:</p> <ol> <li>Before WordPress begins the core upgrade process.</li> <li>Before Maintenance Mode is enabled.</li> <li>Before WordPress begins copying over the necessary files.</li> <li>Before Maintenance Mode is disabled.</li> <li>Before the database is upgraded.</li> </ol>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The core update feedback messages.",
                    "types": [
                        "string"
                    ],
                    "variable": "$feedback"
                }
            ]
        },
        "file": "wp-admin/includes/update-core.php"
    },
    {
        "name": "update_footer",
        "line": 65,
        "end_line": 65,
        "type": "filter",
        "doc": {
            "description": "Filters the version/update text displayed in the admin footer.",
            "long_description": "<p>WordPress prints the current version and update information, using core_update_footer() at priority 10.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "core_update_footer()"
                },
                {
                    "name": "param",
                    "content": "The content that will be printed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-admin/admin-footer.php"
    },
    {
        "name": "update_plugin_complete_actions",
        "line": 83,
        "end_line": 83,
        "type": "filter",
        "doc": {
            "description": "Filters the list of action links available following a single plugin update.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of plugin action links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$update_actions"
                },
                {
                    "name": "param",
                    "content": "Path to the plugin file relative to the plugins directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$plugin"
                }
            ]
        },
        "file": "wp-admin/includes/class-plugin-upgrader-skin.php"
    },
    {
        "name": "update_right_now_text",
        "line": 338,
        "end_line": 338,
        "type": "filter",
        "doc": {
            "description": "Filters the text displayed in the 'At a Glance' dashboard widget.",
            "long_description": "<p>Prior to 3.8.0, the widget was named 'Right Now'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Default text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-admin/includes/update.php"
    },
    {
        "name": "update_theme_complete_actions",
        "line": 120,
        "end_line": 120,
        "type": "filter",
        "doc": {
            "description": "Filters the list of action links available following a single theme update.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of theme action links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$update_actions"
                },
                {
                    "name": "param",
                    "content": "Theme directory name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$theme"
                }
            ]
        },
        "file": "wp-admin/includes/class-theme-upgrader-skin.php"
    },
    {
        "name": "update_translations_complete_actions",
        "line": 89,
        "end_line": 89,
        "type": "filter",
        "doc": {
            "description": "Filters the list of action links available following a translations update.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of translations update links.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$update_actions"
                }
            ]
        },
        "file": "wp-admin/includes/class-language-pack-upgrader-skin.php"
    },
    {
        "name": "update_welcome_email",
        "line": 1600,
        "end_line": 1600,
        "type": "filter",
        "doc": {
            "description": "Filters the content of the welcome email after site activation.",
            "long_description": "<p>Content should be formatted for transmission via wp_mail().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Message body of the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$welcome_email"
                },
                {
                    "name": "param",
                    "content": "Blog ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$blog_id"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "User password.",
                    "types": [
                        "string"
                    ],
                    "variable": "$password"
                },
                {
                    "name": "param",
                    "content": "Site title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "update_welcome_subject",
        "line": 1625,
        "end_line": 1625,
        "type": "filter",
        "doc": {
            "description": "Filters the subject of the welcome email after site activation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Subject of the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "update_welcome_user_email",
        "line": 1687,
        "end_line": 1687,
        "type": "filter",
        "doc": {
            "description": "Filters the content of the welcome email after user activation.",
            "long_description": "<p>Content should be formatted for transmission via wp_mail().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "The message body of the account activation success email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$welcome_email"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "User password.",
                    "types": [
                        "string"
                    ],
                    "variable": "$password"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. Default empty array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "update_welcome_user_subject",
        "line": 1717,
        "end_line": 1717,
        "type": "filter",
        "doc": {
            "description": "Filters the subject of the welcome email after user activation.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Subject of the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "update_{$meta_type}_metadata",
        "line": 202,
        "end_line": 202,
        "type": "filter",
        "doc": {
            "description": "Filters whether to update metadata of a specific type.",
            "long_description": "<p>The dynamic portion of the hook, <code>$meta_type</code>, refers to the meta object type (comment, post, term, or user). Returning a non-null value will effectively short-circuit the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow updating metadata for the given type.",
                    "types": [
                        "null",
                        "bool"
                    ],
                    "variable": "$check"
                },
                {
                    "name": "param",
                    "content": "Object ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$object_id"
                },
                {
                    "name": "param",
                    "content": "Meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Meta value. Must be serializable if non-scalar.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$meta_value"
                },
                {
                    "name": "param",
                    "content": "Optional. If specified, only update existing                              metadata entries with the specified value.                              Otherwise, update all entries.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$prev_value"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "update_{$meta_type}_metadata_by_mid",
        "line": 700,
        "end_line": 700,
        "type": "filter",
        "doc": {
            "description": "Filters whether to update metadata of a specific type by meta ID.",
            "long_description": "<p>The dynamic portion of the hook, <code>$meta_type</code>, refers to the meta object type (comment, post, term, or user). Returning a non-null value will effectively short-circuit the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow updating metadata for the given type.",
                    "types": [
                        "null",
                        "bool"
                    ],
                    "variable": "$check"
                },
                {
                    "name": "param",
                    "content": "Meta ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$meta_id"
                },
                {
                    "name": "param",
                    "content": "Meta value. Must be serializable if non-scalar.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$meta_value"
                },
                {
                    "name": "param",
                    "content": "Meta key, if provided.",
                    "types": [
                        "string",
                        "bool"
                    ],
                    "variable": "$meta_key"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "update_{$meta_type}_metadata_cache",
        "line": 917,
        "end_line": 917,
        "type": "filter",
        "doc": {
            "description": "Filters whether to update the metadata cache of a specific type.",
            "long_description": "<p>The dynamic portion of the hook, <code>$meta_type</code>, refers to the meta object type (comment, post, term, or user). Returning a non-null value will effectively short-circuit the function.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow updating the meta cache of the given type.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$check"
                },
                {
                    "name": "param",
                    "content": "Array of object IDs to update the meta cache for.",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$object_ids"
                }
            ]
        },
        "file": "wp-includes/meta.php"
    },
    {
        "name": "upgrader_clear_destination",
        "line": 565,
        "end_line": 565,
        "type": "filter",
        "doc": {
            "description": "Filters whether the upgrader cleared the destination.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether the destination was cleared. true on success, WP_Error on failure",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$removed"
                },
                {
                    "name": "param",
                    "content": "The local package destination.",
                    "types": [
                        "string"
                    ],
                    "variable": "$local_destination"
                },
                {
                    "name": "param",
                    "content": "The remote package destination.",
                    "types": [
                        "string"
                    ],
                    "variable": "$remote_destination"
                },
                {
                    "name": "param",
                    "content": "Extra arguments passed to hooked filters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$hook_extra"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-upgrader.php"
    },
    {
        "name": "upgrader_package_options",
        "line": 704,
        "end_line": 704,
        "type": "filter",
        "doc": {
            "description": "Filters the package options before running an update.",
            "long_description": "<p>See also {@see 'upgrader_process_complete'}.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "{     Options used by the upgrader.     @type string $package                     Package for update.     @type string $destination                 Update location.     @type bool   $clear_destination           Clear the destination resource.     @type bool   $clear_working               Clear the working resource.     @type bool   $abort_if_destination_exists Abort if the Destination directory exists.     @type bool   $is_multi                    Whether the upgrader is running multiple times.     @type array  $hook_extra {         Extra hook arguments.         @type string $action               Type of action. Default 'update'.         @type string $type                 Type of update process. Accepts 'plugin', 'theme', or 'core'.         @type bool   $bulk                 Whether the update process is a bulk update. Default true.         @type string $plugin               Path to the plugin file relative to the plugins directory.         @type string $theme                The stylesheet or template name of the theme.         @type string $language_update_type The language pack update type. Accepts 'plugin', 'theme',                                            or 'core'.         @type object $language_update      The language pack update offer.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$options"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-upgrader.php"
    },
    {
        "name": "upgrader_post_install",
        "line": 616,
        "end_line": 616,
        "type": "filter",
        "doc": {
            "description": "Filters the installation response after the installation has finished.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Installation response.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "Extra arguments passed to hooked filters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$hook_extra"
                },
                {
                    "name": "param",
                    "content": "Installation result data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$result"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-upgrader.php"
    },
    {
        "name": "upgrader_pre_download",
        "line": 265,
        "end_line": 265,
        "type": "filter",
        "doc": {
            "description": "Filters whether to return the package.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to bail without returning the package.                             Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$reply"
                },
                {
                    "name": "param",
                    "content": "The package file name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$package"
                },
                {
                    "name": "param",
                    "content": "The WP_Upgrader instance.",
                    "types": [
                        "\\WP_Upgrader"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-upgrader.php"
    },
    {
        "name": "upgrader_pre_install",
        "line": 487,
        "end_line": 487,
        "type": "filter",
        "doc": {
            "description": "Filters the install response before the installation has started.",
            "long_description": "<p>Returning a truthy value, or one that could be evaluated as a WP_Error will effectively short-circuit the installation, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Response.",
                    "types": [
                        "bool",
                        "\\WP_Error"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "Extra arguments passed to hooked filters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$hook_extra"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-upgrader.php"
    },
    {
        "name": "upgrader_source_selection",
        "line": 520,
        "end_line": 520,
        "type": "filter",
        "doc": {
            "description": "Filters the source file location for the upgrade package.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The $hook_extra parameter became available."
                },
                {
                    "name": "param",
                    "content": "File source location.",
                    "types": [
                        "string"
                    ],
                    "variable": "$source"
                },
                {
                    "name": "param",
                    "content": "Remote file source location.",
                    "types": [
                        "string"
                    ],
                    "variable": "$remote_source"
                },
                {
                    "name": "param",
                    "content": "WP_Upgrader instance.",
                    "types": [
                        "\\WP_Upgrader"
                    ],
                    "variable": "$this"
                },
                {
                    "name": "param",
                    "content": "Extra arguments passed to hooked filters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$hook_extra"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-upgrader.php"
    },
    {
        "name": "upload_dir",
        "line": 2246,
        "end_line": 2246,
        "type": "filter",
        "doc": {
            "description": "Filters the uploads directory data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "{     Array of information about the upload directory.     @type string       $path    Base directory and subdirectory or full path to upload directory.     @type string       $url     Base URL and subdirectory or absolute URL to upload directory.     @type string       $subdir  Subdirectory if uploads use year/month folders option is on.     @type string       $basedir Path without subdir.     @type string       $baseurl URL path without subdir.     @type string|false $error   False or error message. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$uploads"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "upload_mimes",
        "line": 3065,
        "end_line": 3065,
        "type": "filter",
        "doc": {
            "description": "Filters list of allowed mime types and file extensions.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Mime types keyed by the file extension regex corresponding to those types.",
                    "types": [
                        "array"
                    ],
                    "variable": "$t"
                },
                {
                    "name": "param",
                    "content": "User ID, User object or null if not provided (indicates current user).",
                    "types": [
                        "int",
                        "\\WP_User",
                        "null"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "upload_per_page",
        "line": 1229,
        "end_line": 1229,
        "type": "filter",
        "doc": {
            "description": "Filters the number of items to list per page when listing media items.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Number of media to list. Default 20.",
                    "types": [
                        "int"
                    ],
                    "variable": "$media_per_page"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "upload_post_params",
        "line": 2119,
        "end_line": 2119,
        "type": "filter",
        "doc": {
            "description": "Filters the media upload post parameters.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0",
                    "description": "As 'swfupload_post_params'"
                },
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of media upload parameters used by Plupload.",
                    "types": [
                        "array"
                    ],
                    "variable": "$post_params"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "upload_size_limit",
        "line": 3194,
        "end_line": 3194,
        "type": "filter",
        "doc": {
            "description": "Filters the maximum upload size allowed in php.ini.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Max upload size limit in bytes.",
                    "types": [
                        "int"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "Maximum upload filesize in bytes.",
                    "types": [
                        "int"
                    ],
                    "variable": "$u_bytes"
                },
                {
                    "name": "param",
                    "content": "Maximum size of POST data in bytes.",
                    "types": [
                        "int"
                    ],
                    "variable": "$p_bytes"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "url_to_postid",
        "line": 478,
        "end_line": 478,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to derive the post ID from.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "The URL to derive the post ID from.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/rewrite.php"
    },
    {
        "name": "use_block_editor_for_post",
        "line": 2108,
        "end_line": 2108,
        "type": "filter",
        "doc": {
            "description": "Filter whether a post is able to be edited in the block editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether the post can be edited or not.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$use_block_editor"
                },
                {
                    "name": "param",
                    "content": "The post being checked.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "use_block_editor_for_post_type",
        "line": 2144,
        "end_line": 2144,
        "type": "filter",
        "doc": {
            "description": "Filter whether a post is able to be edited in the block editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether the post type can be edited or not. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$use_block_editor"
                },
                {
                    "name": "param",
                    "content": "The post type being checked.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/includes/post.php"
    },
    {
        "name": "use_curl_transport",
        "line": 406,
        "end_line": 406,
        "type": "filter",
        "doc": {
            "description": "Filters whether cURL can be used as a transport for retrieving a URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the class can be used. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$use_class"
                },
                {
                    "name": "param",
                    "content": "An array of request arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-http-curl.php"
    },
    {
        "name": "use_default_gallery_style",
        "line": 1978,
        "end_line": 1978,
        "type": "filter",
        "doc": {
            "description": "Filters whether to print default gallery styles.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether to print default gallery styles.                    Defaults to false if the theme supports HTML5 galleries.                    Otherwise, defaults to true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$print"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "use_google_chrome_frame",
        "line": 80,
        "end_line": 80,
        "type": "filter",
        "doc": {
            "description": "Filters whether Google Chrome Frame should be used, if available.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether to use the Google Chrome Frame. Default is the value of is_admin().",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_admin"
                }
            ]
        },
        "file": "wp-includes/vars.php"
    },
    {
        "name": "use_streams_transport",
        "line": 456,
        "end_line": 456,
        "type": "filter",
        "doc": {
            "description": "Filters whether streams can be used as a transport for retrieving a URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the class can be used. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$use_class"
                },
                {
                    "name": "param",
                    "content": "Request arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-http-streams.php"
    },
    {
        "name": "user_admin_url",
        "line": 3579,
        "end_line": 3579,
        "type": "filter",
        "doc": {
            "description": "Filters the user admin URL for the current user.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The complete URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Path relative to the URL. Blank string if                     no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "user_can_richedit",
        "line": 3358,
        "end_line": 3358,
        "type": "filter",
        "doc": {
            "description": "Filters whether the user can access the visual editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the user can access the visual editor.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$wp_rich_edit"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "user_confirmed_action_email_content",
        "line": 3140,
        "end_line": 3140,
        "type": "filter",
        "doc": {
            "description": "Filters the body of the user request confirmation email.",
            "long_description": "<p>The email is sent to an administrator when an user request is confirmed. The following strings have a special meaning and will get replaced dynamically:</p> <h3>SITENAME###    The name of the site.</h3> <h3>USER_EMAIL###  The user email for the request.</h3> <h3>DESCRIPTION### Description of the action being performed so the user knows what the email is for.</h3> <h3>MANAGE_URL###  The URL to manage requests.</h3> <h3>SITEURL###     The URL to the site.</h3>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "Text in the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email_text"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the account action email.     @type WP_User_Request $request     User request object.     @type string          $user_email  The email address confirming a request     @type string          $description Description of the action being performed so the user knows what the email is for.     @type string          $manage_url  The link to click manage privacy requests of this type.     @type string          $sitename    The site name sending the mail.     @type string          $siteurl     The site URL sending the mail.     @type string          $admin_email The administrator email receiving the mail. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_data"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_confirmed_action_email_content",
        "line": 3316,
        "end_line": 3316,
        "type": "filter",
        "doc": {
            "description": "Filters the body of the data erasure fulfillment notification.",
            "long_description": "<p>The email is sent to a user when a their data erasure request is fulfilled by an administrator.</p> <p>The following strings have a special meaning and will get replaced dynamically:</p> <h3>SITENAME###           The name of the site.</h3> <h3>PRIVACY_POLICY_URL### Privacy policy page URL.</h3> <h3>SITEURL###            The URL to the site.</h3>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "Text in the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email_text"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the account action email.     @type WP_User_Request $request            User request object.     @type string          $message_recipient  The address that the email will be sent to. Defaults                                               to the value of <code>$request-&gt;email</code>, but can be changed                                               by the <code>user_erasure_fulfillment_email_to</code> filter.     @type string          $privacy_policy_url Privacy policy URL.     @type string          $sitename           The site name sending the mail.     @type string          $siteurl            The site URL sending the mail. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_data"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_contactmethods",
        "line": 2209,
        "end_line": 2209,
        "type": "filter",
        "doc": {
            "description": "Filters the user contact methods.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Array of contact methods and their labels.",
                    "types": [
                        "array"
                    ],
                    "variable": "$methods"
                },
                {
                    "name": "param",
                    "content": "WP_User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_dashboard_url",
        "line": 3711,
        "end_line": 3711,
        "type": "filter",
        "doc": {
            "description": "Filters the dashboard URL for a user.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The complete URL including scheme and path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The user ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Path relative to the URL. Blank string if no path is specified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Scheme to give the URL context. Accepts 'http', 'https', 'login',                        'login_post', 'admin', 'relative' or null.",
                    "types": [
                        "string"
                    ],
                    "variable": "$scheme"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "user_erasure_complete_email_subject",
        "line": 3257,
        "end_line": 3257,
        "type": "filter",
        "doc": {
            "description": "Filters the subject of the email sent when an erasure request is completed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.8"
                },
                {
                    "name": "param",
                    "content": "The email subject.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                },
                {
                    "name": "param",
                    "content": "The name of the site.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sitename"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the account action email.     @type WP_User_Request $request            User request object.     @type string          $message_recipient  The address that the email will be sent to. Defaults                                               to the value of <code>$request-&gt;email</code>, but can be changed                                               by the <code>user_erasure_fulfillment_email_to</code> filter.     @type string          $privacy_policy_url Privacy policy URL.     @type string          $sitename           The site name sending the mail.     @type string          $siteurl            The site URL sending the mail. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_data"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_erasure_fulfillment_email_to",
        "line": 3222,
        "end_line": 3222,
        "type": "filter",
        "doc": {
            "description": "Filters the recipient of the data erasure fulfillment notification.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The email address of the notification recipient.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                },
                {
                    "name": "param",
                    "content": "The request that is initiating the notification.",
                    "types": [
                        "\\WP_User_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_has_cap",
        "line": 780,
        "end_line": 780,
        "type": "filter",
        "doc": {
            "description": "Dynamically filter a user's capabilities.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "since",
                    "content": "3.7.0",
                    "description": "Added the <code>$user</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Array of key/value pairs where keys represent a capability name and boolean values                          represent whether the user has that capability.",
                    "types": [
                        "bool[]"
                    ],
                    "variable": "$allcaps"
                },
                {
                    "name": "param",
                    "content": "Required primitive capabilities for the requested capability.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$caps"
                },
                {
                    "name": "param",
                    "content": "{     Arguments that accompany the requested capability check.     @type string    $0 Requested capability.     @type int       $1 Concerned user ID.     @type mixed  ...$2 Optional second and further parameters, typically object ID. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The user object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-includes/class-wp-user.php"
    },
    {
        "name": "user_profile_picture_description",
        "line": 603,
        "end_line": 603,
        "type": "filter",
        "doc": {
            "description": "Filters the user profile picture description displayed under the Gravatar.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "since",
                    "content": "4.7.0",
                    "description": "Added the <code>$profileuser</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The description that will be printed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$description"
                },
                {
                    "name": "param",
                    "content": "The current WP_User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$profileuser"
                }
            ]
        },
        "file": "wp-admin/user-edit.php"
    },
    {
        "name": "user_registration_email",
        "line": 2487,
        "end_line": 2487,
        "type": "filter",
        "doc": {
            "description": "Filters the email address of a user being registered.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The email address of the new user.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_request_action_confirmed_message",
        "line": 3366,
        "end_line": 3366,
        "type": "filter",
        "doc": {
            "description": "Filters the message displayed to a user when they confirm a data request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The message to the user.",
                    "types": [
                        "string"
                    ],
                    "variable": "$message"
                },
                {
                    "name": "param",
                    "content": "The ID of the request being confirmed.",
                    "types": [
                        "int"
                    ],
                    "variable": "$request_id"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_request_action_description",
        "line": 3464,
        "end_line": 3464,
        "type": "filter",
        "doc": {
            "description": "Filters the user action description.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The default description.",
                    "types": [
                        "string"
                    ],
                    "variable": "$description"
                },
                {
                    "name": "param",
                    "content": "The name of the request.",
                    "types": [
                        "string"
                    ],
                    "variable": "$action_name"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_request_action_email_content",
        "line": 3553,
        "end_line": 3553,
        "type": "filter",
        "doc": {
            "description": "Filters the text of the email sent when an account action is attempted.",
            "long_description": "<p>The following strings have a special meaning and will get replaced dynamically:</p> <h3>DESCRIPTION### Description of the action being performed so the user knows what the email is for.</h3> <h3>CONFIRM_URL### The link to click on to confirm the account action.</h3> <h3>SITENAME###    The name of the site.</h3> <h3>SITEURL###     The URL to the site.</h3>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "Text in the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email_text"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the account action email.     @type WP_User_Request $request     User request object.     @type string          $email       The email address this is being sent to.     @type string          $description Description of the action being performed so the user knows what the email is for.     @type string          $confirm_url The link to click on to confirm the account action.     @type string          $sitename    The site name sending the mail.     @type string          $siteurl     The site URL sending the mail. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_data"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_request_action_email_subject",
        "line": 3582,
        "end_line": 3582,
        "type": "filter",
        "doc": {
            "description": "Filters the subject of the email sent when an account action is attempted.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The email subject.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                },
                {
                    "name": "param",
                    "content": "The name of the site.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sitename"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the account action email.     @type WP_User_Request $request     User request object.     @type string          $email       The email address this is being sent to.     @type string          $description Description of the action being performed so the user knows what the email is for.     @type string          $confirm_url The link to click on to confirm the account action.     @type string          $sitename    The site name sending the mail.     @type string          $siteurl     The site URL sending the mail. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_data"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_request_confirmed_email_subject",
        "line": 3174,
        "end_line": 3174,
        "type": "filter",
        "doc": {
            "description": "Filters the subject of the user request confirmation email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.8"
                },
                {
                    "name": "param",
                    "content": "The email subject.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                },
                {
                    "name": "param",
                    "content": "The name of the site.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sitename"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the account action email.     @type WP_User_Request $request     User request object.     @type string          $user_email  The email address confirming a request     @type string          $description Description of the action being performed so the user knows what the email is for.     @type string          $manage_url  The link to click manage privacy requests of this type.     @type string          $sitename    The site name sending the mail.     @type string          $siteurl     The site URL sending the mail.     @type string          $admin_email The administrator email receiving the mail. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_data"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_request_confirmed_email_to",
        "line": 3083,
        "end_line": 3083,
        "type": "filter",
        "doc": {
            "description": "Filters the recipient of the data request confirmation notification.",
            "long_description": "<p>In a Multisite environment, this will default to the email address of the network admin because, by default, single site admins do not have the capabilities required to process requests. Some networks may wish to delegate those capabilities to a single-site admin, or a dedicated person responsible for managing privacy requests.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The email address of the notification recipient.",
                    "types": [
                        "string"
                    ],
                    "variable": "$admin_email"
                },
                {
                    "name": "param",
                    "content": "The request that is initiating the notification.",
                    "types": [
                        "\\WP_User_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_request_key_expiration",
        "line": 3678,
        "end_line": 3678,
        "type": "filter",
        "doc": {
            "description": "Filters the expiration time of confirm keys.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The expiration time in seconds.",
                    "types": [
                        "int"
                    ],
                    "variable": "$expiration"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_row_actions",
        "line": 484,
        "end_line": 484,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed under each user in the Users list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "An array of action links to be displayed.                              Default 'Edit', 'Delete' for single site, and                              'Edit', 'Remove' for Multisite.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "WP_User object for the currently listed user.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user_object"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-users-list-table.php"
    },
    {
        "name": "user_search_columns",
        "line": 550,
        "end_line": 550,
        "type": "filter",
        "doc": {
            "description": "Filters the columns to search in a WP_User_Query search.",
            "long_description": "<p>The default columns depend on the search term, and include 'ID', 'user_login', 'user_email', 'user_url', 'user_nicename', and 'display_name'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Array of column names to be searched.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$search_columns"
                },
                {
                    "name": "param",
                    "content": "Text being searched.",
                    "types": [
                        "string"
                    ],
                    "variable": "$search"
                },
                {
                    "name": "param",
                    "content": "The current WP_User_Query instance.",
                    "types": [
                        "\\WP_User_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-user-query.php"
    },
    {
        "name": "user_trailingslashit",
        "line": 65,
        "end_line": 65,
        "type": "filter",
        "doc": {
            "description": "Filters the trailing-slashed string, depending on whether the site is set to use trailing slashes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "URL with or without a trailing slash.",
                    "types": [
                        "string"
                    ],
                    "variable": "$string"
                },
                {
                    "name": "param",
                    "content": "The type of URL being considered. Accepts 'single', 'single_trackback',                            'single_feed', 'single_paged', 'commentpaged', 'paged', 'home', 'feed',                            'category', 'page', 'year', 'month', 'day', 'post_type_archive'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type_of_url"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "user_{$field}",
        "line": 1313,
        "end_line": 1313,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a user field in a standard context.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field</code>, refers to the prefixed user field being filtered, such as 'user_login', 'user_email', 'first_name', etc.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The user object value to sanitize.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "The context to filter within.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "user_{$name}_label",
        "line": 558,
        "end_line": 558,
        "type": "filter",
        "doc": {
            "description": "Filters a user contactmethod label.",
            "long_description": "<p>The dynamic portion of the filter hook, <code>$name</code>, refers to each of the keys in the contactmethods array.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "The translatable label for the contactmethod.",
                    "types": [
                        "string"
                    ],
                    "variable": "$desc"
                }
            ]
        },
        "file": "wp-admin/user-edit.php"
    },
    {
        "name": "username_exists",
        "line": 1413,
        "end_line": 1413,
        "type": "filter",
        "doc": {
            "description": "Filters whether the given username exists or not.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "The user's ID on success, and false on failure.",
                    "types": [
                        "int",
                        "false"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "Username to check.",
                    "types": [
                        "string"
                    ],
                    "variable": "$username"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "users_have_additional_content",
        "line": 252,
        "end_line": 252,
        "type": "filter",
        "doc": {
            "description": "Filters whether the users being deleted have additional content associated with them outside of the `post_author` and `link_owner` relationships.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether the users have additional content. Default false.",
                    "types": [
                        "boolean"
                    ],
                    "variable": "$users_have_additional_content"
                },
                {
                    "name": "param",
                    "content": "Array of IDs for users being deleted.",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$userids"
                }
            ]
        },
        "file": "wp-admin/users.php"
    },
    {
        "name": "users_list_table_query_args",
        "line": 138,
        "end_line": 138,
        "type": "filter",
        "doc": {
            "description": "Filters the query arguments used to retrieve users for the current users list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to WP_User_Query to retrieve items for the current                    users list table.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-users-list-table.php"
    },
    {
        "name": "users_pre_query",
        "line": 612,
        "end_line": 612,
        "type": "filter_reference",
        "doc": {
            "description": "Filters the users array before the query takes place.",
            "long_description": "<p>Return a non-null value to bypass WordPress's default user queries. Filtering functions that require pagination information are encouraged to set the <code>total_users</code> property of the WP_User_Query object, passed to the filter by reference. If WP_User_Query does not perform a database query, it will not have enough information to generate these values itself.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Return an array of user data to short-circuit WP's user query                            or null to allow WP to run its normal queries.",
                    "types": [
                        "array",
                        "null"
                    ],
                    "variable": "$results"
                },
                {
                    "name": "param",
                    "content": "The WP_User_Query instance (passed by reference).",
                    "types": [
                        "\\WP_User_Query"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-user-query.php"
    },
    {
        "name": "validate_current_theme",
        "line": 841,
        "end_line": 841,
        "type": "filter",
        "doc": {
            "description": "Filters whether to validate the current theme.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to validate the current theme. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$validate"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "validate_username",
        "line": 1457,
        "end_line": 1457,
        "type": "filter",
        "doc": {
            "description": "Filters whether the provided username is valid or not.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.1"
                },
                {
                    "name": "param",
                    "content": "Whether given username is valid.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$valid"
                },
                {
                    "name": "param",
                    "content": "Username to check.",
                    "types": [
                        "string"
                    ],
                    "variable": "$username"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "view_mode_post_types",
        "line": 1296,
        "end_line": 1296,
        "type": "filter",
        "doc": {
            "description": "Filters the post types that have different view mode options.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Array of post types that can change view modes.                                       Default non-hierarchical post types with show_ui on.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$view_mode_post_types"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-screen.php"
    },
    {
        "name": "views_{$this->screen->id}",
        "line": 403,
        "end_line": 403,
        "type": "filter",
        "doc": {
            "description": "Filters the list of available list table views.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$this-&gt;screen-&gt;id</code>, refers to the ID of the current screen, usually a string.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of available list table views.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$views"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-list-table.php"
    },
    {
        "name": "walker_nav_menu_start_el",
        "line": 247,
        "end_line": 247,
        "type": "filter",
        "doc": {
            "description": "Filters a menu item's starting output.",
            "long_description": "<p>The menu item's starting output only includes <code>$args-&gt;before</code>, the opening <code>&lt;a&gt;</code>, the menu item's title, the closing <code>&lt;/a&gt;</code>, and <code>$args-&gt;after</code>. Currently, there is no filter for modifying the opening and closing <code>&lt;li&gt;</code> for a menu item.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The menu item's starting HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$item_output"
                },
                {
                    "name": "param",
                    "content": "Menu item data object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$item"
                },
                {
                    "name": "param",
                    "content": "Depth of menu item. Used for padding.",
                    "types": [
                        "int"
                    ],
                    "variable": "$depth"
                },
                {
                    "name": "param",
                    "content": "An object of wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-walker-nav-menu.php"
    },
    {
        "name": "whitelist_options",
        "line": 205,
        "end_line": 205,
        "type": "filter",
        "doc": {
            "description": "Filters the options white list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "White list options.",
                    "types": [
                        "array"
                    ],
                    "variable": "$whitelist_options"
                }
            ]
        },
        "file": "wp-admin/options.php"
    },
    {
        "name": "widget_archives_args",
        "line": 139,
        "end_line": 146,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the Archives widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_get_archives()"
                },
                {
                    "name": "param",
                    "content": "An array of Archives option arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-archives.php"
    },
    {
        "name": "widget_archives_dropdown_args",
        "line": 74,
        "end_line": 82,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the Archives widget drop-down.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_get_archives()"
                },
                {
                    "name": "param",
                    "content": "An array of Archives widget drop-down arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Settings for the current Archives widget instance.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-archives.php"
    },
    {
        "name": "widget_categories_args",
        "line": 126,
        "end_line": 126,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the Categories widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "param",
                    "content": "An array of Categories widget options.",
                    "types": [
                        "array"
                    ],
                    "variable": "$cat_args"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-categories.php"
    },
    {
        "name": "widget_categories_dropdown_args",
        "line": 89,
        "end_line": 89,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the Categories widget drop-down.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_dropdown_categories()"
                },
                {
                    "name": "param",
                    "content": "An array of Categories widget drop-down arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$cat_args"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-categories.php"
    },
    {
        "name": "widget_comments_args",
        "line": 46,
        "end_line": 53,
        "type": "filter",
        "doc": {
            "description": "",
            "long_description": "",
            "tags": []
        },
        "file": "wp-includes/blocks/latest-comments.php"
    },
    {
        "name": "widget_comments_args",
        "line": 103,
        "end_line": 111,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the Recent Comments widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "see",
                    "content": "for information on accepted arguments.",
                    "refers": "WP_Comment_Query::query()"
                },
                {
                    "name": "param",
                    "content": "An array of arguments used to retrieve the recent comments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$comment_args"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-recent-comments.php"
    },
    {
        "name": "widget_custom_html_content",
        "line": 159,
        "end_line": 159,
        "type": "filter",
        "doc": {
            "description": "Filters the content of the Custom HTML widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.1"
                },
                {
                    "name": "param",
                    "content": "The widget content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                },
                {
                    "name": "param",
                    "content": "Current Custom HTML widget instance.",
                    "types": [
                        "\\WP_Widget_Custom_HTML"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-custom-html.php"
    },
    {
        "name": "widget_customizer_setting_args",
        "line": 910,
        "end_line": 910,
        "type": "filter",
        "doc": {
            "description": "Filters the common arguments supplied when constructing a Customizer setting.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Customize_Setting"
                },
                {
                    "name": "param",
                    "content": "Array of Customizer setting arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Widget setting ID.",
                    "types": [
                        "string"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/class-wp-customize-widgets.php"
    },
    {
        "name": "widget_display_callback",
        "line": 368,
        "end_line": 368,
        "type": "filter",
        "doc": {
            "description": "Filters the settings for a particular widget instance.",
            "long_description": "<p>Returning false will effectively short-circuit display of the widget.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The current widget instance's settings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                },
                {
                    "name": "param",
                    "content": "The current widget instance.",
                    "types": [
                        "\\WP_Widget"
                    ],
                    "variable": "$this"
                },
                {
                    "name": "param",
                    "content": "An array of default widget arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-widget.php"
    },
    {
        "name": "widget_form_callback",
        "line": 514,
        "end_line": 514,
        "type": "filter",
        "doc": {
            "description": "Filters the widget instance's settings before displaying the control form.",
            "long_description": "<p>Returning false effectively short-circuits display of the control form.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The current widget instance's settings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                },
                {
                    "name": "param",
                    "content": "The current widget instance.",
                    "types": [
                        "\\WP_Widget"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-widget.php"
    },
    {
        "name": "widget_links_args",
        "line": 80,
        "end_line": 80,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the Links widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_list_bookmarks()"
                },
                {
                    "name": "param",
                    "content": "An array of arguments to retrieve the links list.",
                    "types": [
                        "array"
                    ],
                    "variable": "$widget_links_args"
                },
                {
                    "name": "param",
                    "content": "The settings for the particular instance of the widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-links.php"
    },
    {
        "name": "widget_meta_poweredby",
        "line": 71,
        "end_line": 79,
        "type": "filter",
        "doc": {
            "description": "Filters the \"WordPress.org\" list item HTML in the Meta widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Default HTML for the WordPress.org list item.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-meta.php"
    },
    {
        "name": "widget_nav_menu_args",
        "line": 81,
        "end_line": 81,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the Navigation Menu widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.2.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "param",
                    "content": "{     An array of arguments passed to wp_nav_menu() to retrieve a navigation menu.     @type callable|bool $fallback_cb Callback to fire if the menu doesn't exist. Default empty.     @type mixed         $menu        Menu ID, slug, or name. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$nav_menu_args"
                },
                {
                    "name": "param",
                    "content": "Nav menu object for the current menu.",
                    "types": [
                        "\\WP_Term"
                    ],
                    "variable": "$nav_menu"
                },
                {
                    "name": "param",
                    "content": "Display arguments for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-nav-menu-widget.php"
    },
    {
        "name": "widget_pages_args",
        "line": 75,
        "end_line": 84,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the Pages widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_list_pages()"
                },
                {
                    "name": "param",
                    "content": "An array of arguments to retrieve the pages list.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-pages.php"
    },
    {
        "name": "widget_posts_args",
        "line": 71,
        "end_line": 80,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for the Recent Posts widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "WP_Query::get_posts()"
                },
                {
                    "name": "param",
                    "content": "An array of arguments used to retrieve the recent posts.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-recent-posts.php"
    },
    {
        "name": "widget_tag_cloud_args",
        "line": 70,
        "end_line": 78,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy used in the Tag Cloud widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "since",
                    "content": "3.0.0",
                    "description": "Added taxonomy drop-down."
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "Added the <code>$instance</code> parameter."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_tag_cloud()"
                },
                {
                    "name": "param",
                    "content": "Args used for the tag cloud widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-tag-cloud.php"
    },
    {
        "name": "widget_text",
        "line": 278,
        "end_line": 278,
        "type": "filter",
        "doc": {
            "description": "Filters the content of the Text widget.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "Added the <code>$this</code> parameter."
                },
                {
                    "name": "since",
                    "content": "4.8.1",
                    "description": "The <code>$this</code> param may now be a <code>WP_Widget_Custom_HTML</code> object in addition to a <code>WP_Widget_Text</code> object."
                },
                {
                    "name": "param",
                    "content": "The widget content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                },
                {
                    "name": "param",
                    "content": "Current Text widget instance.",
                    "types": [
                        "\\WP_Widget_Text",
                        "\\WP_Widget_Custom_HTML"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-text.php"
    },
    {
        "name": "widget_text_content",
        "line": 293,
        "end_line": 293,
        "type": "filter",
        "doc": {
            "description": "Filters the content of the Text widget to apply changes expected from the visual (TinyMCE) editor.",
            "long_description": "<p>By default a subset of the_content filters are applied, including wpautop and wptexturize.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "The widget content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                },
                {
                    "name": "param",
                    "content": "Current Text widget instance.",
                    "types": [
                        "\\WP_Widget_Text"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-text.php"
    },
    {
        "name": "widget_title",
        "line": 54,
        "end_line": 54,
        "type": "filter",
        "doc": {
            "description": "Filters the widget title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "The widget title. Default 'Pages'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "Array of settings for the current widget.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                },
                {
                    "name": "param",
                    "content": "The widget ID.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$id_base"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-pages.php"
    },
    {
        "name": "widget_update_callback",
        "line": 461,
        "end_line": 461,
        "type": "filter",
        "doc": {
            "description": "Filters a widget's settings before saving.",
            "long_description": "<p>Returning false will effectively short-circuit the widget's ability to update settings.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The current widget instance's settings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                },
                {
                    "name": "param",
                    "content": "Array of new widget settings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$new_instance"
                },
                {
                    "name": "param",
                    "content": "Array of old widget settings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$old_instance"
                },
                {
                    "name": "param",
                    "content": "The current widget instance.",
                    "types": [
                        "\\WP_Widget"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp-widget.php"
    },
    {
        "name": "widget_{$this->id_base}_instance",
        "line": 247,
        "end_line": 247,
        "type": "filter",
        "doc": {
            "description": "Filters the media widget instance prior to rendering the media.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "Instance data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$instance"
                },
                {
                    "name": "param",
                    "content": "Widget args.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Widget object.",
                    "types": [
                        "\\WP_Widget_Media"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-media.php"
    },
    {
        "name": "widget_{$this->id_base}_instance_schema",
        "line": 164,
        "end_line": 164,
        "type": "filter",
        "doc": {
            "description": "Filters the media widget instance schema to add additional properties.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Instance schema.",
                    "types": [
                        "array"
                    ],
                    "variable": "$schema"
                },
                {
                    "name": "param",
                    "content": "Widget object.",
                    "types": [
                        "\\WP_Widget_Media"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/widgets/class-wp-widget-media.php"
    },
    {
        "name": "wp_admin_bar_class",
        "line": 42,
        "end_line": 42,
        "type": "filter",
        "doc": {
            "description": "Filters the admin bar class to instantiate.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Admin bar class to use. Default 'WP_Admin_Bar'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$wp_admin_bar_class"
                }
            ]
        },
        "file": "wp-includes/admin-bar.php"
    },
    {
        "name": "wp_admin_css",
        "line": 4484,
        "end_line": 4484,
        "type": "filter",
        "doc": {
            "description": "Filters the stylesheet link to the specified CSS file.",
            "long_description": "<p>If the site is set to display right-to-left, the RTL stylesheet link will be used instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "HTML link element for the stylesheet.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet_link"
                },
                {
                    "name": "param",
                    "content": "Style handle name or filename (without \".css\" extension)                                relative to wp-admin/. Defaults to 'wp-admin'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "wp_admin_css_uri",
        "line": 4430,
        "end_line": 4430,
        "type": "filter",
        "doc": {
            "description": "Filters the URI of a WordPress admin CSS file.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Relative path to the file with query arguments attached.",
                    "types": [
                        "string"
                    ],
                    "variable": "$_file"
                },
                {
                    "name": "param",
                    "content": "Relative path to the file, minus its \".css\" extension.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "wp_ajax_cropped_attachment_id",
        "line": 3933,
        "end_line": 3933,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment ID for a cropped image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "The attachment ID of the cropped image.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                },
                {
                    "name": "param",
                    "content": "The Customizer control requesting the cropped image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "wp_ajax_cropped_attachment_metadata",
        "line": 3922,
        "end_line": 3922,
        "type": "filter",
        "doc": {
            "description": "Filters the cropped image attachment metadata.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_generate_attachment_metadata()"
                },
                {
                    "name": "param",
                    "content": "Attachment metadata.",
                    "types": [
                        "array"
                    ],
                    "variable": "$metadata"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "wp_anonymize_comment",
        "line": 3580,
        "end_line": 3580,
        "type": "filter",
        "doc": {
            "description": "Filters whether to anonymize the comment.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "Whether to apply the comment anonymization (bool) or a custom                                        message (string). Default true.",
                    "types": [
                        "bool",
                        "string"
                    ],
                    "variable": "$anon_message"
                },
                {
                    "name": "param",
                    "content": "WP_Comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                },
                {
                    "name": "param",
                    "content": "Anonymized comment data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$anonymized_comment"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "wp_audio_embed_handler",
        "line": 201,
        "end_line": 201,
        "type": "filter",
        "doc": {
            "description": "Filters the audio embed handler callback.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Audio embed handler callback function.",
                    "types": [
                        "callable"
                    ],
                    "variable": "$handler"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "wp_audio_extensions",
        "line": 2430,
        "end_line": 2430,
        "type": "filter",
        "doc": {
            "description": "Filters the list of supported audio formats.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "An array of supported audio formats. Defaults are                            'mp3', 'ogg', 'flac', 'm4a', 'wav'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$extensions"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_audio_shortcode",
        "line": 2658,
        "end_line": 2658,
        "type": "filter",
        "doc": {
            "description": "Filters the audio shortcode output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Audio shortcode HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "Array of audio shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$atts"
                },
                {
                    "name": "param",
                    "content": "Audio file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$audio"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Media library used for the audio shortcode.",
                    "types": [
                        "string"
                    ],
                    "variable": "$library"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_audio_shortcode_class",
        "line": 2594,
        "end_line": 2594,
        "type": "filter",
        "doc": {
            "description": "Filters the class attribute for the audio shortcode output container.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "The <code>$atts</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "CSS class or list of space-separated classes.",
                    "types": [
                        "string"
                    ],
                    "variable": "$class"
                },
                {
                    "name": "param",
                    "content": "Array of audio shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$atts"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_audio_shortcode_library",
        "line": 2578,
        "end_line": 2578,
        "type": "filter",
        "doc": {
            "description": "Filters the media library used for the audio shortcode.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Media library used for the audio shortcode.",
                    "types": [
                        "string"
                    ],
                    "variable": "$library"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_audio_shortcode_override",
        "line": 2509,
        "end_line": 2509,
        "type": "filter",
        "doc": {
            "description": "Filters the default audio shortcode output.",
            "long_description": "<p>If the filtered output isn't empty, it will be used instead of generating the default audio template.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Empty variable to be replaced with shortcode markup.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "Attributes of the shortcode. @see wp_audio_shortcode()",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "Shortcode content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Unique numeric ID of this audio shortcode instance.",
                    "types": [
                        "int"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_auth_check_interval",
        "line": 1104,
        "end_line": 1104,
        "type": "filter",
        "doc": {
            "description": "Filters the authentication check interval.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The interval in which to check a user's authentication.                      Default 3 minutes in seconds, or 180.",
                    "types": [
                        "int"
                    ],
                    "variable": "$interval"
                }
            ]
        },
        "file": "wp-includes/script-loader.php"
    },
    {
        "name": "wp_auth_check_load",
        "line": 6191,
        "end_line": 6191,
        "type": "filter",
        "doc": {
            "description": "Filters whether to load the authentication check.",
            "long_description": "<p>Passing a falsey value to the filter will effectively short-circuit loading the authentication check.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to load the authentication check.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$show"
                },
                {
                    "name": "param",
                    "content": "The current screen object.",
                    "types": [
                        "\\WP_Screen"
                    ],
                    "variable": "$screen"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_auth_check_same_domain",
        "line": 6217,
        "end_line": 6217,
        "type": "filter",
        "doc": {
            "description": "Filters whether the authentication check originated at the same domain.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether the authentication check originated at the same domain.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$same_domain"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_authenticate_user",
        "line": 165,
        "end_line": 165,
        "type": "filter",
        "doc": {
            "description": "Filters whether the given user can be authenticated with the provided $password.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "WP_User or WP_Error object if a previous                                   callback failed authentication.",
                    "types": [
                        "\\WP_User",
                        "\\WP_Error"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "Password to check against the user.",
                    "types": [
                        "string"
                    ],
                    "variable": "$password"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "wp_cache_themes_persistently",
        "line": 467,
        "end_line": 467,
        "type": "filter",
        "doc": {
            "description": "Filters whether to get the cache of the registered theme directories.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Whether to get the cache of the theme directories. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$cache_expiration"
                },
                {
                    "name": "param",
                    "content": "Directory to be searched for the cache.",
                    "types": [
                        "string"
                    ],
                    "variable": "$cache_directory"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "wp_calculate_image_sizes",
        "line": 1455,
        "end_line": 1455,
        "type": "filter",
        "doc": {
            "description": "Filters the output of 'wp_calculate_image_sizes()'.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "A source size value for use in a 'sizes' attribute.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sizes"
                },
                {
                    "name": "param",
                    "content": "Requested size. Image size or array of width and height values                                    in pixels (in that order).",
                    "types": [
                        "array",
                        "string"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "The URL to the image file or null.",
                    "types": [
                        "string",
                        "null"
                    ],
                    "variable": "$image_src"
                },
                {
                    "name": "param",
                    "content": "The image meta data as returned by wp_get_attachment_metadata() or null.",
                    "types": [
                        "array",
                        "null"
                    ],
                    "variable": "$image_meta"
                },
                {
                    "name": "param",
                    "content": "Image attachment ID of the original image or 0.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_calculate_image_srcset",
        "line": 1354,
        "end_line": 1354,
        "type": "filter",
        "doc": {
            "description": "Filters an image's 'srcset' sources.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "{     One or more arrays of source data to include in the 'srcset'.     @type array $width {         @type string $url        The URL of an image source.         @type string $descriptor The descriptor type used in the image candidate string,                                  either 'w' or 'x'.         @type int    $value      The source width if paired with a 'w' descriptor, or a                                  pixel density value if paired with an 'x' descriptor.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$sources"
                },
                {
                    "name": "param",
                    "content": "{     An array of requested width and height values.     @type int $0 The width in pixels.     @type int $1 The height in pixels. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$size_array"
                },
                {
                    "name": "param",
                    "content": "The 'src' of the image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$image_src"
                },
                {
                    "name": "param",
                    "content": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                    "types": [
                        "array"
                    ],
                    "variable": "$image_meta"
                },
                {
                    "name": "param",
                    "content": "Image attachment ID or 0.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_calculate_image_srcset_meta",
        "line": 1195,
        "end_line": 1195,
        "type": "filter",
        "doc": {
            "description": "Let plugins pre-filter the image meta to be able to fix inconsistencies in the stored data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "The image meta data as returned by 'wp_get_attachment_metadata()'.",
                    "types": [
                        "array"
                    ],
                    "variable": "$image_meta"
                },
                {
                    "name": "param",
                    "content": "{     An array of requested width and height values.     @type int $0 The width in pixels.     @type int $1 The height in pixels. }",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$size_array"
                },
                {
                    "name": "param",
                    "content": "The 'src' of the image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$image_src"
                },
                {
                    "name": "param",
                    "content": "The image attachment ID or 0 if not supplied.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_check_filetype_and_ext",
        "line": 2835,
        "end_line": 2835,
        "type": "filter",
        "doc": {
            "description": "Filters the \"real\" file type of the given file.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "The $real_mime parameter was added."
                },
                {
                    "name": "param",
                    "content": "{     Values for the extension, mime type, and corrected filename.     @type string|false $ext             File extension, or false if the file doesn't match a mime type.     @type string|false $type            File mime type, or false if the file doesn't match a mime type.     @type string|false $proper_filename File name with its correct extension, or false if it cannot be determined. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$wp_check_filetype_and_ext"
                },
                {
                    "name": "param",
                    "content": "Full path to the file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "The name of the file (may differ from $file due to                                               $file being in a tmp directory).",
                    "types": [
                        "string"
                    ],
                    "variable": "$filename"
                },
                {
                    "name": "param",
                    "content": "Array of mime types keyed by their file extension regex.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$mimes"
                },
                {
                    "name": "param",
                    "content": "The actual mime type or false if the type cannot be determined.",
                    "types": [
                        "string",
                        "bool"
                    ],
                    "variable": "$real_mime"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_check_post_lock_window",
        "line": 2830,
        "end_line": 2830,
        "type": "filter",
        "doc": {
            "description": "Filters the post lock window duration.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "The interval in seconds the post lock duration                      should last, plus 5 seconds. Default 150.",
                    "types": [
                        "int"
                    ],
                    "variable": "$interval"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "wp_checkdate",
        "line": 6153,
        "end_line": 6153,
        "type": "filter",
        "doc": {
            "description": "Filters whether the given date is valid for the Gregorian calendar.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether the given date is valid.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$checkdate"
                },
                {
                    "name": "param",
                    "content": "Date to check.",
                    "types": [
                        "string"
                    ],
                    "variable": "$source_date"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_code_editor_settings",
        "line": 3890,
        "end_line": 3890,
        "type": "filter",
        "doc": {
            "description": "Filters settings that are passed into the code editor.",
            "long_description": "<p>Returning a falsey value will disable the syntax-highlighting code editor.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "The array of settings passed to the code editor. A falsey value disables the editor.",
                    "types": [
                        "array"
                    ],
                    "variable": "$settings"
                },
                {
                    "name": "param",
                    "content": "{     Args passed when calling <code>get_code_editor_settings()</code>.     @type string   $type       The MIME type of the file to be edited.     @type string   $file       Filename being edited.     @type WP_Theme $theme      Theme being edited when on theme editor.     @type string   $plugin     Plugin being edited when on plugin editor.     @type array    $codemirror Additional CodeMirror setting overrides.     @type array    $csslint    CSSLint rule overrides.     @type array    $jshint     JSHint rule overrides.     @type array    $htmlhint   JSHint rule overrides. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "wp_comment_reply",
        "line": 417,
        "end_line": 425,
        "type": "filter",
        "doc": {
            "description": "Filters the in-line comment reply-to form output in the Comments list table.",
            "long_description": "<p>Returning a non-empty value here will short-circuit display of the in-line comment-reply form in the Comments list table, echoing the returned value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_comment_reply()"
                },
                {
                    "name": "param",
                    "content": "The reply-to form content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "An array of default args.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/template.php"
    },
    {
        "name": "wp_constrain_dimensions",
        "line": 499,
        "end_line": 499,
        "type": "filter",
        "doc": {
            "description": "Filters dimensions to constrain down-sampled images to.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "{     An array of width and height values.     @type int $0 The width in pixels.     @type int $1 The height in pixels. }",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$dimensions"
                },
                {
                    "name": "param",
                    "content": "The current width of the image.",
                    "types": [
                        "int"
                    ],
                    "variable": "$current_width"
                },
                {
                    "name": "param",
                    "content": "The current height of the image.",
                    "types": [
                        "int"
                    ],
                    "variable": "$current_height"
                },
                {
                    "name": "param",
                    "content": "The maximum width permitted.",
                    "types": [
                        "int"
                    ],
                    "variable": "$max_width"
                },
                {
                    "name": "param",
                    "content": "The maximum height permitted.",
                    "types": [
                        "int"
                    ],
                    "variable": "$max_height"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_count_attachments",
        "line": 2696,
        "end_line": 2696,
        "type": "filter",
        "doc": {
            "description": "Modify returned attachment counts by mime type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "An object containing the attachment counts by                          mime type.",
                    "types": [
                        "object"
                    ],
                    "variable": "$counts"
                },
                {
                    "name": "param",
                    "content": "The mime type pattern used to filter the attachments                          counted.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mime_type"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_count_comments",
        "line": 1344,
        "end_line": 1344,
        "type": "filter",
        "doc": {
            "description": "Filters the comments count for a given post or the whole site.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An empty array or an object containing comment counts.",
                    "types": [
                        "array",
                        "\\stdClass"
                    ],
                    "variable": "$count"
                },
                {
                    "name": "param",
                    "content": "The post ID. Can be 0 to represent the whole site.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "wp_count_posts",
        "line": 2655,
        "end_line": 2655,
        "type": "filter",
        "doc": {
            "description": "Modify returned post counts by status for the current post type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "An object containing the current post_type's post                       counts by status.",
                    "types": [
                        "object"
                    ],
                    "variable": "$counts"
                },
                {
                    "name": "param",
                    "content": "Post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "The permission to determine if the posts are 'readable'                       by the current user.",
                    "types": [
                        "string"
                    ],
                    "variable": "$perm"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_dashboard_widgets",
        "line": 118,
        "end_line": 118,
        "type": "filter",
        "doc": {
            "description": "Filters the list of widgets to load for the admin dashboard.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of dashboard widget IDs.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$dashboard_widgets"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "wp_date",
        "line": 303,
        "end_line": 303,
        "type": "filter",
        "doc": {
            "description": "Filters the date formatted based on the locale.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "Formatted date string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$date"
                },
                {
                    "name": "param",
                    "content": "Format to display the date.",
                    "types": [
                        "string"
                    ],
                    "variable": "$format"
                },
                {
                    "name": "param",
                    "content": "Unix timestamp.",
                    "types": [
                        "int"
                    ],
                    "variable": "$timestamp"
                },
                {
                    "name": "param",
                    "content": "Timezone.",
                    "types": [
                        "\\DateTimeZone"
                    ],
                    "variable": "$timezone"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_default_editor",
        "line": 3385,
        "end_line": 3385,
        "type": "filter",
        "doc": {
            "description": "Filters which editor should be displayed by default.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Which editor should be displayed by default. Either 'tinymce', 'html', or 'test'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$r"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "wp_delete_file",
        "line": 6416,
        "end_line": 6416,
        "type": "filter",
        "doc": {
            "description": "Filters the path of the file to delete.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Path to the file to delete.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_die_ajax_handler",
        "line": 3171,
        "end_line": 3171,
        "type": "filter",
        "doc": {
            "description": "Filters the callback for killing WordPress execution for Ajax requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Callback function name.",
                    "types": [
                        "callable"
                    ],
                    "variable": "$function"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_die_handler",
        "line": 3220,
        "end_line": 3220,
        "type": "filter",
        "doc": {
            "description": "Filters the callback for killing WordPress execution for all non-Ajax, non-JSON, non-XML requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "Callback function name.",
                    "types": [
                        "callable"
                    ],
                    "variable": "$function"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_die_json_handler",
        "line": 3180,
        "end_line": 3180,
        "type": "filter",
        "doc": {
            "description": "Filters the callback for killing WordPress execution for JSON requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Callback function name.",
                    "types": [
                        "callable"
                    ],
                    "variable": "$function"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_die_jsonp_handler",
        "line": 3189,
        "end_line": 3189,
        "type": "filter",
        "doc": {
            "description": "Filters the callback for killing WordPress execution for JSONP requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Callback function name.",
                    "types": [
                        "callable"
                    ],
                    "variable": "$function"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_die_xml_handler",
        "line": 3211,
        "end_line": 3211,
        "type": "filter",
        "doc": {
            "description": "Filters the callback for killing WordPress execution for XML requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Callback function name.",
                    "types": [
                        "callable"
                    ],
                    "variable": "$function"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_die_xmlrpc_handler",
        "line": 3198,
        "end_line": 3198,
        "type": "filter",
        "doc": {
            "description": "Filters the callback for killing WordPress execution for XML-RPC requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Callback function name.",
                    "types": [
                        "callable"
                    ],
                    "variable": "$function"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_direct_php_update_url",
        "line": 7153,
        "end_line": 7153,
        "type": "filter",
        "doc": {
            "description": "Filters the URL for directly updating the PHP version the site is running on from the host.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.1"
                },
                {
                    "name": "param",
                    "content": "URL for directly updating PHP.",
                    "types": [
                        "string"
                    ],
                    "variable": "$direct_update_url"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_doing_ajax",
        "line": 1355,
        "end_line": 1355,
        "type": "filter",
        "doc": {
            "description": "Filters whether the current request is a WordPress Ajax request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether the current request is a WordPress Ajax request.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$wp_doing_ajax"
                }
            ]
        },
        "file": "wp-includes/load.php"
    },
    {
        "name": "wp_doing_cron",
        "line": 1391,
        "end_line": 1391,
        "type": "filter",
        "doc": {
            "description": "Filters whether the current request is a WordPress cron request.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.8.0"
                },
                {
                    "name": "param",
                    "content": "Whether the current request is a WordPress cron request.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$wp_doing_cron"
                }
            ]
        },
        "file": "wp-includes/load.php"
    },
    {
        "name": "wp_dropdown_cats",
        "line": 458,
        "end_line": 458,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy drop-down output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Arguments used to build the drop-down.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "wp_dropdown_pages",
        "line": 1209,
        "end_line": 1209,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output of a list of pages as a drop down.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "<code>$parsed_args</code> and <code>$pages</code> added as arguments."
                },
                {
                    "name": "param",
                    "content": "HTML output for drop down list of pages.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "The parsed arguments array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                },
                {
                    "name": "param",
                    "content": "Array of the page objects.",
                    "types": [
                        "\\WP_Post[]"
                    ],
                    "variable": "$pages"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_dropdown_users",
        "line": 1209,
        "end_line": 1209,
        "type": "filter",
        "doc": {
            "description": "Filters the wp_dropdown_users() HTML output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "HTML output generated by wp_dropdown_users().",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "wp_dropdown_users_args",
        "line": 1147,
        "end_line": 1147,
        "type": "filter",
        "doc": {
            "description": "Filters the query arguments for the list of users in the dropdown.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The query arguments for get_users().",
                    "types": [
                        "array"
                    ],
                    "variable": "$query_args"
                },
                {
                    "name": "param",
                    "content": "The arguments passed to wp_dropdown_users() combined with the defaults.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "wp_edit_nav_menu_walker",
        "line": 1039,
        "end_line": 1039,
        "type": "filter",
        "doc": {
            "description": "Filters the Walker class used when adding nav menu items.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The walker class to use. Default 'Walker_Nav_Menu_Edit'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$class"
                },
                {
                    "name": "param",
                    "content": "ID of the menu being rendered.",
                    "types": [
                        "int"
                    ],
                    "variable": "$menu_id"
                }
            ]
        },
        "file": "wp-admin/includes/nav-menu.php"
    },
    {
        "name": "wp_editor_expand",
        "line": 58,
        "end_line": 58,
        "type": "filter",
        "doc": {
            "description": "Filters whether to enable the 'expand' functionality in the post editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "since",
                    "content": "4.1.0",
                    "description": "Added the <code>$post_type</code> parameter."
                },
                {
                    "name": "param",
                    "content": "Whether to enable the 'expand' functionality. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$expand"
                },
                {
                    "name": "param",
                    "content": "Post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-admin/edit-form-advanced.php"
    },
    {
        "name": "wp_editor_set_quality",
        "line": 236,
        "end_line": 236,
        "type": "filter",
        "doc": {
            "description": "Filters the default image compression quality setting.",
            "long_description": "<p>Applies only during initial editor instantiation, or when set_quality() is run manually without the <code>$quality</code> argument.</p> <p>set_quality() has priority over the filter.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Quality level between 1 (low) and 100 (high).",
                    "types": [
                        "int"
                    ],
                    "variable": "$quality"
                },
                {
                    "name": "param",
                    "content": "Image mime type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mime_type"
                }
            ]
        },
        "file": "wp-includes/class-wp-image-editor.php"
    },
    {
        "name": "wp_editor_settings",
        "line": 80,
        "end_line": 80,
        "type": "filter",
        "doc": {
            "description": "Filters the wp_editor() settings.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "_WP_Editors::parse_settings()"
                },
                {
                    "name": "param",
                    "content": "Array of editor arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$settings"
                },
                {
                    "name": "param",
                    "content": "ID for the current editor instance.",
                    "types": [
                        "string"
                    ],
                    "variable": "$editor_id"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "wp_embed_handler_audio",
        "line": 272,
        "end_line": 272,
        "type": "filter",
        "doc": {
            "description": "Filters the audio embed output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Audio embed output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$audio"
                },
                {
                    "name": "param",
                    "content": "An array of embed attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "The original URL that was matched by the regex.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The original unmodified attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$rawattr"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "wp_embed_handler_video",
        "line": 304,
        "end_line": 304,
        "type": "filter",
        "doc": {
            "description": "Filters the video embed output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Video embed output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$video"
                },
                {
                    "name": "param",
                    "content": "An array of embed attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "The original URL that was matched by the regex.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The original unmodified attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$rawattr"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "wp_embed_handler_youtube",
        "line": 245,
        "end_line": 245,
        "type": "filter",
        "doc": {
            "description": "Filters the YoutTube embed output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_embed_handler_youtube()"
                },
                {
                    "name": "param",
                    "content": "YouTube embed output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$embed"
                },
                {
                    "name": "param",
                    "content": "An array of embed attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "The original URL that was matched by the regex.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "The original unmodified attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$rawattr"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "wp_fatal_error_handler_enabled",
        "line": 119,
        "end_line": 119,
        "type": "filter",
        "doc": {
            "description": "Filters whether the fatal error handler is enabled.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "True if the fatal error handler is enabled, false otherwise.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enabled"
                }
            ]
        },
        "file": "wp-includes/error-protection.php"
    },
    {
        "name": "wp_feed_cache_transient_lifetime",
        "line": 66,
        "end_line": 66,
        "type": "filter",
        "doc": {
            "description": "Filters the transient lifetime of the feed cache.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Cache duration in seconds. Default is 43200 seconds (12 hours).",
                    "types": [
                        "int"
                    ],
                    "variable": "$lifetime"
                },
                {
                    "name": "param",
                    "content": "Unique identifier for the cache object.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filename"
                }
            ]
        },
        "file": "wp-includes/class-wp-feed-cache-transient.php"
    },
    {
        "name": "wp_generate_attachment_metadata",
        "line": 584,
        "end_line": 584,
        "type": "filter",
        "doc": {
            "description": "Filters the generated attachment meta data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of attachment meta data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$metadata"
                },
                {
                    "name": "param",
                    "content": "Current attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "wp_generate_tag_cloud",
        "line": 1011,
        "end_line": 1011,
        "type": "filter",
        "doc": {
            "description": "Filters the generated output of a tag cloud.",
            "long_description": "<p>The filter is only evaluated if a true value is passed to the $filter argument in wp_generate_tag_cloud().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_generate_tag_cloud()"
                },
                {
                    "name": "param",
                    "content": "String containing the generated HTML tag cloud output                             or an array of tag links if the 'format' argument                             equals 'array'.",
                    "types": [
                        "array",
                        "string"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "An array of terms used in the tag cloud.",
                    "types": [
                        "\\WP_Term[]"
                    ],
                    "variable": "$tags"
                },
                {
                    "name": "param",
                    "content": "An array of wp_generate_tag_cloud() arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "wp_generate_tag_cloud_data",
        "line": 956,
        "end_line": 956,
        "type": "filter",
        "doc": {
            "description": "Filters the data used to generate the tag cloud.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "An array of term data for term used to generate the tag cloud.",
                    "types": [
                        "array"
                    ],
                    "variable": "$tags_data"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "wp_generator_type",
        "line": 4530,
        "end_line": 4530,
        "type": "filter",
        "doc": {
            "description": "Filters the output of the XHTML generator tag.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The XHTML generator.",
                    "types": [
                        "string"
                    ],
                    "variable": "$generator_type"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "wp_get_attachment_caption",
        "line": 5895,
        "end_line": 5895,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment caption.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Caption for the given attachment.",
                    "types": [
                        "string"
                    ],
                    "variable": "$caption"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_get_attachment_id3_keys",
        "line": 2466,
        "end_line": 2466,
        "type": "filter",
        "doc": {
            "description": "Filters the editable list of keys to look up data from an attachment's metadata.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "Key/value pairs of field keys to labels.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "Attachment object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$attachment"
                },
                {
                    "name": "param",
                    "content": "The context. Accepts 'edit', 'display'. Default 'display'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_get_attachment_image_attributes",
        "line": 1047,
        "end_line": 1047,
        "type": "filter",
        "doc": {
            "description": "Filters the list of attachment image attributes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of attribute values for the image markup, keyed by attribute name.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "Image attachment post.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$attachment"
                },
                {
                    "name": "param",
                    "content": "Requested size. Image size or array of width and height values                                 (in that order). Default 'thumbnail'.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_get_attachment_image_src",
        "line": 979,
        "end_line": 979,
        "type": "filter",
        "doc": {
            "description": "Filters the image src result.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Either array with src, width &amp; height, icon src, or false.",
                    "types": [
                        "array",
                        "false"
                    ],
                    "variable": "$image"
                },
                {
                    "name": "param",
                    "content": "Image attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                },
                {
                    "name": "param",
                    "content": "Size of image. Image size or array of width and height values                                    (in that order). Default 'thumbnail'.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "Whether the image should be treated as an icon. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$icon"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_get_attachment_link",
        "line": 1638,
        "end_line": 1638,
        "type": "filter",
        "doc": {
            "description": "Filters a retrieved attachment page link.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "since",
                    "content": "5.1.0",
                    "description": "Added the $attr parameter."
                },
                {
                    "name": "param",
                    "content": "The page link HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link_html"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$id"
                },
                {
                    "name": "param",
                    "content": "Size of the image. Image size or array of width and height values (in that order).                                Default 'thumbnail'.",
                    "types": [
                        "string",
                        "array"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "Whether to add permalink to image. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$permalink"
                },
                {
                    "name": "param",
                    "content": "Whether to include an icon. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$icon"
                },
                {
                    "name": "param",
                    "content": "If string, will be link text. Default false.",
                    "types": [
                        "string",
                        "bool"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "Array or string of attributes. Default empty.",
                    "types": [
                        "array",
                        "string"
                    ],
                    "variable": "$attr"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_get_attachment_metadata",
        "line": 5759,
        "end_line": 5759,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment meta data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of meta data for the given attachment, or false                                  if the object does not exist.",
                    "types": [
                        "array",
                        "bool"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "Attachment post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_get_attachment_thumb_file",
        "line": 5931,
        "end_line": 5931,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment thumbnail file path.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "File path to the attachment thumbnail.",
                    "types": [
                        "string"
                    ],
                    "variable": "$thumbfile"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_get_attachment_thumb_url",
        "line": 5977,
        "end_line": 5977,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment thumbnail URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "URL for the attachment thumbnail.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_get_attachment_url",
        "line": 5857,
        "end_line": 5857,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "URL for the given attachment.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "Attachment post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_get_comment_fields_max_lengths",
        "line": 1211,
        "end_line": 1211,
        "type": "filter",
        "doc": {
            "description": "Filters the lengths for the comment form fields.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "Associative array <code>'field_name' =&gt; 'maximum length'</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$lengths"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "wp_get_current_commenter",
        "line": 1814,
        "end_line": 1814,
        "type": "filter",
        "doc": {
            "description": "Filters the current commenter's name, email, and URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "{     An array of current commenter variables.     @type string $comment_author       The name of the author of the comment. Default empty.     @type string $comment_author_email The email address of the <code>$comment_author</code>. Default empty.     @type string $comment_author_url   The URL address of the <code>$comment_author</code>. Default empty. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$comment_author_data"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "wp_get_custom_css",
        "line": 1812,
        "end_line": 1812,
        "type": "filter",
        "doc": {
            "description": "Filters the Custom CSS Output into the <head>.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "CSS pulled in from the Custom CSS CPT.",
                    "types": [
                        "string"
                    ],
                    "variable": "$css"
                },
                {
                    "name": "param",
                    "content": "The theme stylesheet name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$stylesheet"
                }
            ]
        },
        "file": "wp-includes/theme.php"
    },
    {
        "name": "wp_get_default_privacy_policy_content",
        "line": 713,
        "end_line": 713,
        "type": "filter",
        "doc": {
            "description": "Filters the default content suggested for inclusion in a privacy policy.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "since",
                    "content": "5.0.0",
                    "description": "Added the <code>$strings</code>, <code>$description</code>, and <code>$blocks</code> parameters."
                },
                {
                    "name": "param",
                    "content": "The default policy content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "An array of privacy policy content strings.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$strings"
                },
                {
                    "name": "param",
                    "content": "Whether policy descriptions should be included.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$description"
                },
                {
                    "name": "param",
                    "content": "Whether the content should be formatted for the block editor.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$blocks"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-privacy-policy-content.php"
    },
    {
        "name": "wp_get_missing_image_subsizes",
        "line": 124,
        "end_line": 124,
        "type": "filter",
        "doc": {
            "description": "Filters the array of missing image sub-sizes for an uploaded image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "Array with the missing image sub-sizes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$missing_sizes"
                },
                {
                    "name": "param",
                    "content": "The image meta data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$image_meta"
                },
                {
                    "name": "param",
                    "content": "The image attachment post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "wp_get_nav_menu_items",
        "line": 777,
        "end_line": 777,
        "type": "filter",
        "doc": {
            "description": "Filters the navigation menu items being returned.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "An array of menu item post objects.",
                    "types": [
                        "array"
                    ],
                    "variable": "$items"
                },
                {
                    "name": "param",
                    "content": "The menu object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$menu"
                },
                {
                    "name": "param",
                    "content": "An array of arguments used to retrieve menu item objects.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/nav-menu.php"
    },
    {
        "name": "wp_get_nav_menu_name",
        "line": 226,
        "end_line": 226,
        "type": "filter",
        "doc": {
            "description": "Filters the navigation menu name being returned.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Menu name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$menu_name"
                },
                {
                    "name": "param",
                    "content": "Menu location identifier.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                }
            ]
        },
        "file": "wp-includes/nav-menu.php"
    },
    {
        "name": "wp_get_nav_menu_object",
        "line": 49,
        "end_line": 49,
        "type": "filter",
        "doc": {
            "description": "Filters the nav_menu term retrieved for wp_get_nav_menu_object().",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Term from nav_menu taxonomy, or false if nothing had been found.",
                    "types": [
                        "\\WP_Term",
                        "false"
                    ],
                    "variable": "$menu_obj"
                },
                {
                    "name": "param",
                    "content": "The menu ID, slug, name, or object passed to wp_get_nav_menu_object().",
                    "types": [
                        "int",
                        "string",
                        "\\WP_Term"
                    ],
                    "variable": "$menu"
                }
            ]
        },
        "file": "wp-includes/nav-menu.php"
    },
    {
        "name": "wp_get_nav_menus",
        "line": 623,
        "end_line": 623,
        "type": "filter",
        "doc": {
            "description": "Filters the navigation menu objects being returned.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_terms()"
                },
                {
                    "name": "param",
                    "content": "An array of menu objects.",
                    "types": [
                        "\\WP_Term[]"
                    ],
                    "variable": "$menus"
                },
                {
                    "name": "param",
                    "content": "An array of arguments used to retrieve menu objects.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/nav-menu.php"
    },
    {
        "name": "wp_get_object_terms",
        "line": 2068,
        "end_line": 2068,
        "type": "filter",
        "doc": {
            "description": "Filters the terms for a given object or objects.",
            "long_description": "<p>The <code>$taxonomies</code> parameter passed to this filter is formatted as a SQL fragment. The {@see 'get_object_terms'} filter is recommended as an alternative.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of terms for the given object or objects.",
                    "types": [
                        "array"
                    ],
                    "variable": "$terms"
                },
                {
                    "name": "param",
                    "content": "Array of object IDs for which terms were retrieved.",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$object_ids"
                },
                {
                    "name": "param",
                    "content": "Array of taxonomy names from which terms were retrieved.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                },
                {
                    "name": "param",
                    "content": "Array of arguments for retrieving terms for the given                             object(s). See wp_get_object_terms() for details.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "wp_get_object_terms_args",
        "line": 2001,
        "end_line": 2001,
        "type": "filter",
        "doc": {
            "description": "Filter arguments for retrieving object terms.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "An array of arguments for retrieving terms for the given object(s).                             See {@see wp_get_object_terms()} for details.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Array of object IDs.",
                    "types": [
                        "int[]"
                    ],
                    "variable": "$object_ids"
                },
                {
                    "name": "param",
                    "content": "Array of taxonomy names to retrieve terms from.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$taxonomies"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "wp_get_original_image_path",
        "line": 7180,
        "end_line": 7180,
        "type": "filter",
        "doc": {
            "description": "Filters the path to the original image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "Path to original image file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$original_image"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_get_original_image_url",
        "line": 7222,
        "end_line": 7222,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to the original attachment image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "URL to original image.",
                    "types": [
                        "string"
                    ],
                    "variable": "$original_image_url"
                },
                {
                    "name": "param",
                    "content": "Attachment ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_get_revision_ui_diff",
        "line": 152,
        "end_line": 152,
        "type": "filter",
        "doc": {
            "description": "Filters the fields displayed in the post revision diff UI.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of revision UI fields. Each item is an array of id, name, and diff.",
                    "types": [
                        "array[]"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "The revision post to compare from.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$compare_from"
                },
                {
                    "name": "param",
                    "content": "The revision post to compare to.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$compare_to"
                }
            ]
        },
        "file": "wp-admin/includes/revision.php"
    },
    {
        "name": "wp_get_update_data",
        "line": 720,
        "end_line": 720,
        "type": "filter",
        "doc": {
            "description": "Filters the returned array of update data for plugins, themes, and WordPress core.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "{     Fetched update data.     @type array   $counts       An array of counts for available plugin, theme, and WordPress updates.     @type string  $update_title Titles of available updates. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$update_data"
                },
                {
                    "name": "param",
                    "content": "An array of update counts and UI strings for available updates.",
                    "types": [
                        "array"
                    ],
                    "variable": "$titles"
                }
            ]
        },
        "file": "wp-includes/update.php"
    },
    {
        "name": "wp_handle_upload",
        "line": 915,
        "end_line": 923,
        "type": "filter",
        "doc": {
            "description": "Filters the data array for the uploaded file.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "{     Array of upload data.     @type string $file Filename of the newly-uploaded file.     @type string $url  URL of the uploaded file.     @type string $type File type. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$upload"
                },
                {
                    "name": "param",
                    "content": "The type of upload action. Values include 'upload' or 'sideload'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "wp_header_image_attachment_metadata",
        "line": 1271,
        "end_line": 1271,
        "type": "filter",
        "doc": {
            "description": "Filters the header image attachment metadata.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_generate_attachment_metadata()"
                },
                {
                    "name": "param",
                    "content": "Attachment metadata.",
                    "types": [
                        "array"
                    ],
                    "variable": "$metadata"
                }
            ]
        },
        "file": "wp-admin/includes/class-custom-image-header.php"
    },
    {
        "name": "wp_headers",
        "line": 485,
        "end_line": 485,
        "type": "filter",
        "doc": {
            "description": "Filters the HTTP headers before they're sent to the browser.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of headers to be sent.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$headers"
                },
                {
                    "name": "param",
                    "content": "Current WordPress environment instance.",
                    "types": [
                        "\\WP"
                    ],
                    "variable": "$this"
                }
            ]
        },
        "file": "wp-includes/class-wp.php"
    },
    {
        "name": "wp_http_accept_encoding",
        "line": 181,
        "end_line": 181,
        "type": "filter",
        "doc": {
            "description": "Filters the allowed encoding types.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Array of what encoding types to accept and their priority values.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "URL of the HTTP request.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                },
                {
                    "name": "param",
                    "content": "HTTP request arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/class-wp-http-encoding.php"
    },
    {
        "name": "wp_http_cookie_value",
        "line": 227,
        "end_line": 227,
        "type": "filter",
        "doc": {
            "description": "Filters the header-encoded cookie value.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "The cookie value.",
                    "types": [
                        "string"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "The cookie name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$name"
                }
            ]
        },
        "file": "wp-includes/class-wp-http-cookie.php"
    },
    {
        "name": "wp_http_ixr_client_headers",
        "line": 77,
        "end_line": 77,
        "type": "filter",
        "doc": {
            "description": "Filters the headers collection to be sent to the XML-RPC server.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of headers to be sent.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$headers"
                }
            ]
        },
        "file": "wp-includes/class-wp-http-ixr-client.php"
    },
    {
        "name": "wp_image_editor_before_change",
        "line": 561,
        "end_line": 561,
        "type": "filter",
        "doc": {
            "description": "Filters the WP_Image_Editor instance before applying changes to the image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "WP_Image_Editor instance.",
                    "types": [
                        "\\WP_Image_Editor"
                    ],
                    "variable": "$image"
                },
                {
                    "name": "param",
                    "content": "Array of change operations.",
                    "types": [
                        "array"
                    ],
                    "variable": "$changes"
                }
            ]
        },
        "file": "wp-admin/includes/image-edit.php"
    },
    {
        "name": "wp_image_editors",
        "line": 3272,
        "end_line": 3272,
        "type": "filter",
        "doc": {
            "description": "Filters the list of image editing library classes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of available image editor class names. Defaults are                                'WP_Image_Editor_Imagick', 'WP_Image_Editor_GD'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$image_editors"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_image_maybe_exif_rotate",
        "line": 414,
        "end_line": 414,
        "type": "filter",
        "doc": {
            "description": "Filters the `$orientation` value to correct it before rotating or to prevemnt rotating the image.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "EXIF Orientation value as retrieved from the image file.",
                    "types": [
                        "int"
                    ],
                    "variable": "$orientation"
                },
                {
                    "name": "param",
                    "content": "Path to the image file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                }
            ]
        },
        "file": "wp-includes/class-wp-image-editor.php"
    },
    {
        "name": "wp_image_resize_identical_dimensions",
        "line": 642,
        "end_line": 642,
        "type": "filter",
        "doc": {
            "description": "Filters whether to proceed with making an image sub-size with identical dimensions with the original/source image. Differences of 1px may be due to rounding and are ignored.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "The filtered value.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$proceed"
                },
                {
                    "name": "param",
                    "content": "Original image width.",
                    "types": [
                        "int"
                    ],
                    "variable": "$orig_w"
                },
                {
                    "name": "param",
                    "content": "Original image height.",
                    "types": [
                        "int"
                    ],
                    "variable": "$orig_h"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_initialize_site_args",
        "line": 707,
        "end_line": 707,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments for initializing a site.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Arguments to modify the initialization behavior.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Site that is being initialized.",
                    "types": [
                        "\\WP_Site"
                    ],
                    "variable": "$site"
                },
                {
                    "name": "param",
                    "content": "Network that the site belongs to.",
                    "types": [
                        "\\WP_Network"
                    ],
                    "variable": "$network"
                }
            ]
        },
        "file": "wp-includes/ms-site.php"
    },
    {
        "name": "wp_insert_attachment_data",
        "line": 3870,
        "end_line": 3870,
        "type": "filter",
        "doc": {
            "description": "Filters attachment post data before it is updated in or added to the database.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "An array of sanitized attachment post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "An array of unsanitized attachment post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$postarr"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_insert_post_data",
        "line": 3880,
        "end_line": 3880,
        "type": "filter",
        "doc": {
            "description": "Filters slashed post data just before it is inserted into the database.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of slashed post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "An array of sanitized, but otherwise unmodified post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$postarr"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_insert_post_empty_content",
        "line": 3642,
        "end_line": 3642,
        "type": "filter",
        "doc": {
            "description": "Filters whether the post should be considered \"empty\".",
            "long_description": "<p>The post is considered \"empty\" if both:</p> <ol> <li>The post type supports the title, editor, and excerpt fields</li> <li>The title, editor, and excerpt fields are all empty</li> </ol> <p>Returning a truthy value to the filter will effectively short-circuit the new post being inserted, returning 0. If $wp_error is true, a WP_Error will be returned instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "Whether the post should be considered \"empty\".",
                    "types": [
                        "bool"
                    ],
                    "variable": "$maybe_empty"
                },
                {
                    "name": "param",
                    "content": "Array of post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$postarr"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_insert_post_parent",
        "line": 3818,
        "end_line": 3818,
        "type": "filter",
        "doc": {
            "description": "Filters the post parent -- used to check for and prevent hierarchy loops.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Post parent ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_parent"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_ID"
                },
                {
                    "name": "param",
                    "content": "Array of parsed post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$new_postarr"
                },
                {
                    "name": "param",
                    "content": "Array of sanitized, but otherwise unmodified post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$postarr"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_insert_term_data",
        "line": 2264,
        "end_line": 2264,
        "type": "filter",
        "doc": {
            "description": "Filters term data before it is inserted into the database.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Term data to be inserted.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "Taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to wp_insert_term().",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "wp_insert_term_duplicate_term_check",
        "line": 2323,
        "end_line": 2323,
        "type": "filter",
        "doc": {
            "description": "Filters the duplicate term check that takes place during term creation.",
            "long_description": "<p>Term parent+taxonomy+slug combinations are meant to be unique, and wp_insert_term() performs a last-minute confirmation of this uniqueness before allowing a new term to be created. Plugins with different uniqueness requirements may use this filter to bypass or modify the duplicate-term check.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Duplicate term row from terms table, if found.",
                    "types": [
                        "object"
                    ],
                    "variable": "$duplicate_term"
                },
                {
                    "name": "param",
                    "content": "Term being inserted.",
                    "types": [
                        "string"
                    ],
                    "variable": "$term"
                },
                {
                    "name": "param",
                    "content": "Taxonomy name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "Term arguments passed to the function.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "term_taxonomy_id for the newly created term.",
                    "types": [
                        "int"
                    ],
                    "variable": "$tt_id"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "wp_is_comment_flood",
        "line": 759,
        "end_line": 766,
        "type": "filter",
        "doc": {
            "description": "Filters whether a comment is part of a comment flood.",
            "long_description": "<p>The default check is wp_check_comment_flood(). See check_comment_flood_db().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Is a comment flooding occurring? Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_flood"
                },
                {
                    "name": "param",
                    "content": "Comment author's IP address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_author_IP"
                },
                {
                    "name": "param",
                    "content": "Comment author's email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_author_email"
                },
                {
                    "name": "param",
                    "content": "GMT date the comment was posted.",
                    "types": [
                        "string"
                    ],
                    "variable": "$comment_date_gmt"
                },
                {
                    "name": "param",
                    "content": "Whether to prevent executing wp_die()                                     or die() if a comment flood is occurring.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$avoid_die"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "wp_is_large_network",
        "line": 2567,
        "end_line": 2567,
        "type": "filter",
        "doc": {
            "description": "Filters whether the network is considered large.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "since",
                    "content": "4.8.0",
                    "description": "The <code>$network_id</code> parameter has been added."
                },
                {
                    "name": "param",
                    "content": "Whether the network has more than 10000 users or sites.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_large_network"
                },
                {
                    "name": "param",
                    "content": "The component to count. Accepts 'users', or 'sites'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$component"
                },
                {
                    "name": "param",
                    "content": "The count of items for the component.",
                    "types": [
                        "int"
                    ],
                    "variable": "$count"
                },
                {
                    "name": "param",
                    "content": "The ID of the network being checked.",
                    "types": [
                        "int"
                    ],
                    "variable": "$network_id"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wp_is_mobile",
        "line": 168,
        "end_line": 168,
        "type": "filter",
        "doc": {
            "description": "Filters whether the request should be treated as coming from a mobile device or not.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Whether the request is from a mobile device or not.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_mobile"
                }
            ]
        },
        "file": "wp-includes/vars.php"
    },
    {
        "name": "wp_is_php_version_acceptable",
        "line": 1441,
        "end_line": 1441,
        "type": "filter",
        "doc": {
            "description": "Filters whether the active PHP version is considered acceptable by WordPress.",
            "long_description": "<p>Returning false will trigger a PHP version warning to show up in the admin dashboard to administrators.</p> <p>This filter is only run if the wordpress.org Serve Happy API considers the PHP version acceptable, ensuring that this filter can only make this check stricter, but not loosen it.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.1"
                },
                {
                    "name": "param",
                    "content": "Whether the PHP version is considered acceptable. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$is_acceptable"
                },
                {
                    "name": "param",
                    "content": "PHP version checked.",
                    "types": [
                        "string"
                    ],
                    "variable": "$version"
                }
            ]
        },
        "file": "wp-admin/includes/misc.php"
    },
    {
        "name": "wp_kses_allowed_html",
        "line": 841,
        "end_line": 841,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML that is allowed for a given context.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Context to judge allowed tags by.",
                    "types": [
                        "array[]",
                        "string"
                    ],
                    "variable": "$context"
                },
                {
                    "name": "param",
                    "content": "Context name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context_type"
                }
            ]
        },
        "file": "wp-includes/kses.php"
    },
    {
        "name": "wp_kses_uri_attributes",
        "line": 995,
        "end_line": 995,
        "type": "filter",
        "doc": {
            "description": "Filters the list of attributes that are required to contain a URL.",
            "long_description": "<p>Use this filter to add any <code>data-</code> attributes that are required to be validated as a URL.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.1"
                },
                {
                    "name": "param",
                    "content": "HTML attributes requiring validation as a URL.",
                    "types": [
                        "array"
                    ],
                    "variable": "$uri_attributes"
                }
            ]
        },
        "file": "wp-includes/kses.php"
    },
    {
        "name": "wp_link_pages",
        "line": 1006,
        "end_line": 1006,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output of page links for paginated posts.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "HTML output of paginated posts' page links.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_link_pages_args",
        "line": 947,
        "end_line": 947,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments used in retrieving page links for paginated posts.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "An array of arguments for page links for paginated posts.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_link_pages_link",
        "line": 968,
        "end_line": 968,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output of individual page number links.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "The page number HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "Page number for paginated posts' page links.",
                    "types": [
                        "int"
                    ],
                    "variable": "$i"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_link_query",
        "line": 1712,
        "end_line": 1712,
        "type": "filter",
        "doc": {
            "description": "Filters the link query results.",
            "long_description": "<p>Allows modification of the returned link query results.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "see",
                    "content": "filter",
                    "refers": "'wp_link_query_args'"
                },
                {
                    "name": "param",
                    "content": "{     An associative array of query results.     @type array {         @type int    $ID        Post ID.         @type string $title     The trimmed, escaped post title.         @type string $permalink Post permalink.         @type string $info      A 'Y/m/d'-formatted date for 'post' post type,                                 the 'singular_name' post type label otherwise.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$results"
                },
                {
                    "name": "param",
                    "content": "An array of WP_Query arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "wp_link_query_args",
        "line": 1667,
        "end_line": 1667,
        "type": "filter",
        "doc": {
            "description": "Filters the link query arguments.",
            "long_description": "<p>Allows modification of the link query arguments before querying.</p>",
            "tags": [
                {
                    "name": "see",
                    "content": "for a full list of arguments",
                    "refers": "WP_Query"
                },
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "An array of WP_Query arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$query"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "wp_list_bookmarks",
        "line": 317,
        "end_line": 317,
        "type": "filter",
        "doc": {
            "description": "Filters the bookmarks list before it is echoed or returned.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "The HTML list of bookmarks.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                }
            ]
        },
        "file": "wp-includes/bookmark-template.php"
    },
    {
        "name": "wp_list_categories",
        "line": 646,
        "end_line": 646,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output of a taxonomy list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomy-listing arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "wp_list_comments_args",
        "line": 2033,
        "end_line": 2033,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments used in retrieving the comment list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_list_comments()"
                },
                {
                    "name": "param",
                    "content": "An array of arguments for displaying comments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                }
            ]
        },
        "file": "wp-includes/comment-template.php"
    },
    {
        "name": "wp_list_pages",
        "line": 1337,
        "end_line": 1337,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output of the pages to list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.1"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "<code>$pages</code> added as arguments."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_list_pages()"
                },
                {
                    "name": "param",
                    "content": "HTML output of the pages list.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "An array of page-listing arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                },
                {
                    "name": "param",
                    "content": "Array of the page objects.",
                    "types": [
                        "\\WP_Post[]"
                    ],
                    "variable": "$pages"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_list_pages_excludes",
        "line": 1297,
        "end_line": 1297,
        "type": "filter",
        "doc": {
            "description": "Filters the array of pages to exclude from the pages list.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of page IDs to exclude.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$exclude_array"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_login_errors",
        "line": 1308,
        "end_line": 1308,
        "type": "filter",
        "doc": {
            "description": "Filters the login page errors.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "WP Error object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$errors"
                },
                {
                    "name": "param",
                    "content": "Redirect destination URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$redirect_to"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "wp_mail",
        "line": 181,
        "end_line": 181,
        "type": "filter",
        "doc": {
            "description": "Filters the wp_mail() arguments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "A compacted array of wp_mail() arguments, including the \"to\" email,                    subject, message, headers, and attachments values.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_mail_charset",
        "line": 451,
        "end_line": 451,
        "type": "filter",
        "doc": {
            "description": "Filters the default wp_mail() charset.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Default email charset.",
                    "types": [
                        "string"
                    ],
                    "variable": "$charset"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_mail_content_type",
        "line": 428,
        "end_line": 428,
        "type": "filter",
        "doc": {
            "description": "Filters the wp_mail() content type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Default wp_mail() content type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content_type"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_mail_from",
        "line": 345,
        "end_line": 345,
        "type": "filter",
        "doc": {
            "description": "Filters the email address to send from.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "Email address to send from.",
                    "types": [
                        "string"
                    ],
                    "variable": "$from_email"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_mail_from_name",
        "line": 354,
        "end_line": 354,
        "type": "filter",
        "doc": {
            "description": "Filters the name to associate with the \"from\" email address.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Name associated with the \"from\" email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$from_name"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_mail_original_content",
        "line": 188,
        "end_line": 188,
        "type": "filter",
        "doc": {
            "description": "Filters the original content of the email.",
            "long_description": "<p>Give Post-By-Email extending plugins full access to the content, either the raw content, or the content of the last quoted-printable section.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The original email content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                }
            ]
        },
        "file": "wp-mail.php"
    },
    {
        "name": "wp_mce_translation",
        "line": 1381,
        "end_line": 1381,
        "type": "filter",
        "doc": {
            "description": "Filters translated strings prepared for TinyMCE.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.9.0"
                },
                {
                    "name": "param",
                    "content": "Key/value pairs of strings.",
                    "types": [
                        "array"
                    ],
                    "variable": "$mce_translation"
                },
                {
                    "name": "param",
                    "content": "Locale.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mce_locale"
                }
            ]
        },
        "file": "wp-includes/class-wp-editor.php"
    },
    {
        "name": "wp_mediaelement_fallback",
        "line": 2411,
        "end_line": 2411,
        "type": "filter",
        "doc": {
            "description": "Filters the Mediaelement fallback output for no-JS.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Fallback output for no-JS.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Media file URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_mime_type_icon",
        "line": 6182,
        "end_line": 6182,
        "type": "filter",
        "doc": {
            "description": "Filters the mime type icon.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Path to the mime type icon.",
                    "types": [
                        "string"
                    ],
                    "variable": "$icon"
                },
                {
                    "name": "param",
                    "content": "Mime type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mime"
                },
                {
                    "name": "param",
                    "content": "Attachment ID. Will equal 0 if the function passed                        the mime type.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_nav_locations_listed_per_menu",
        "line": 818,
        "end_line": 818,
        "type": "filter",
        "doc": {
            "description": "Filters the number of locations listed per menu in the drop-down select.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Number of menu locations to list. Default 3.",
                    "types": [
                        "int"
                    ],
                    "variable": "$locations"
                }
            ]
        },
        "file": "wp-admin/nav-menus.php"
    },
    {
        "name": "wp_nav_menu",
        "line": 282,
        "end_line": 282,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML content for navigation menus.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_nav_menu()"
                },
                {
                    "name": "param",
                    "content": "The HTML content for the navigation menu.",
                    "types": [
                        "string"
                    ],
                    "variable": "$nav_menu"
                },
                {
                    "name": "param",
                    "content": "An object containing wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/nav-menu-template.php"
    },
    {
        "name": "wp_nav_menu_args",
        "line": 87,
        "end_line": 87,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments used to display a navigation menu.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_nav_menu()"
                },
                {
                    "name": "param",
                    "content": "Array of wp_nav_menu() arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/nav-menu-template.php"
    },
    {
        "name": "wp_nav_menu_container_allowedtags",
        "line": 175,
        "end_line": 175,
        "type": "filter",
        "doc": {
            "description": "Filters the list of HTML tags that are valid for use as menu containers.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The acceptable HTML tags for use as menu containers.                       Default is array containing 'div' and 'nav'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$tags"
                }
            ]
        },
        "file": "wp-includes/nav-menu-template.php"
    },
    {
        "name": "wp_nav_menu_items",
        "line": 247,
        "end_line": 247,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML list content for navigation menus.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_nav_menu()"
                },
                {
                    "name": "param",
                    "content": "The HTML list content for the menu items.",
                    "types": [
                        "string"
                    ],
                    "variable": "$items"
                },
                {
                    "name": "param",
                    "content": "An object containing wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/nav-menu-template.php"
    },
    {
        "name": "wp_nav_menu_objects",
        "line": 215,
        "end_line": 215,
        "type": "filter",
        "doc": {
            "description": "Filters the sorted list of menu item objects before generating the menu's HTML.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The menu items, sorted by each menu item's menu order.",
                    "types": [
                        "array"
                    ],
                    "variable": "$sorted_menu_items"
                },
                {
                    "name": "param",
                    "content": "An object containing wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/nav-menu-template.php"
    },
    {
        "name": "wp_nav_menu_{$menu->slug}_items",
        "line": 258,
        "end_line": 258,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML list content for a specific navigation menu.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_nav_menu()"
                },
                {
                    "name": "param",
                    "content": "The HTML list content for the menu items.",
                    "types": [
                        "string"
                    ],
                    "variable": "$items"
                },
                {
                    "name": "param",
                    "content": "An object containing wp_nav_menu() arguments.",
                    "types": [
                        "\\stdClass"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/nav-menu-template.php"
    },
    {
        "name": "wp_network_dashboard_widgets",
        "line": 84,
        "end_line": 84,
        "type": "filter",
        "doc": {
            "description": "Filters the list of widgets to load for the Network Admin dashboard.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of dashboard widget IDs.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$dashboard_widgets"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "wp_new_user_notification_email",
        "line": 2038,
        "end_line": 2038,
        "type": "filter",
        "doc": {
            "description": "Filters the contents of the new user notification email sent to the new user.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "{     Used to build wp_mail().     @type string $to      The intended recipient - New user email address.     @type string $subject The subject of the email.     @type string $message The body of the email.     @type string $headers The headers of the email. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$wp_new_user_notification_email"
                },
                {
                    "name": "param",
                    "content": "User object for new user.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "The site title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$blogname"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_new_user_notification_email_admin",
        "line": 1981,
        "end_line": 1981,
        "type": "filter",
        "doc": {
            "description": "Filters the contents of the new user notification email sent to the site admin.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "{     Used to build wp_mail().     @type string $to      The intended recipient - site admin email address.     @type string $subject The subject of the email.     @type string $message The body of the email.     @type string $headers The headers of the email. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$wp_new_user_notification_email_admin"
                },
                {
                    "name": "param",
                    "content": "User object for new user.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "The site title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$blogname"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_normalize_site_data",
        "line": 491,
        "end_line": 491,
        "type": "filter",
        "doc": {
            "description": "Filters passed site data in order to normalize it.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of site data passed to the respective function.                    See {@see wp_insert_site()} for the possibly included data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                }
            ]
        },
        "file": "wp-includes/ms-site.php"
    },
    {
        "name": "wp_page_menu",
        "line": 1490,
        "end_line": 1490,
        "type": "filter",
        "doc": {
            "description": "Filters the HTML output of a page-based menu.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_page_menu()"
                },
                {
                    "name": "param",
                    "content": "The HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$menu"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_page_menu_args",
        "line": 1416,
        "end_line": 1416,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments used to generate a page-based menu.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_page_menu()"
                },
                {
                    "name": "param",
                    "content": "An array of page menu arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_parse_str",
        "line": 4864,
        "end_line": 4864,
        "type": "filter",
        "doc": {
            "description": "Filters the array of variables derived from a parsed string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The array populated with variables.",
                    "types": [
                        "array"
                    ],
                    "variable": "$array"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "wp_password_change_notification_email",
        "line": 1903,
        "end_line": 1903,
        "type": "filter",
        "doc": {
            "description": "Filters the contents of the password change notification email sent to the site admin.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "{     Used to build wp_mail().     @type string $to      The intended recipient - site admin email address.     @type string $subject The subject of the email.     @type string $message The body of the email.     @type string $headers The headers of the email. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$wp_password_change_notification_email"
                },
                {
                    "name": "param",
                    "content": "User object for user whose password was changed.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "The site title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$blogname"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_php_error_args",
        "line": 218,
        "end_line": 218,
        "type": "filter",
        "doc": {
            "description": "Filters the arguments passed to {@see wp_die()} for the default PHP error template.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Associative array of arguments passed to <code>wp_die()</code>. By default these contain a                    'response' key, and optionally 'link_url' and 'link_text' keys.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "Error information retrieved from <code>error_get_last()</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$error"
                }
            ]
        },
        "file": "wp-includes/class-wp-fatal-error-handler.php"
    },
    {
        "name": "wp_php_error_message",
        "line": 207,
        "end_line": 207,
        "type": "filter",
        "doc": {
            "description": "Filters the message that the default PHP error template displays.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "HTML error message to display.",
                    "types": [
                        "string"
                    ],
                    "variable": "$message"
                },
                {
                    "name": "param",
                    "content": "Error information retrieved from <code>error_get_last()</code>.",
                    "types": [
                        "array"
                    ],
                    "variable": "$error"
                }
            ]
        },
        "file": "wp-includes/class-wp-fatal-error-handler.php"
    },
    {
        "name": "wp_post_revision_title_expanded",
        "line": 1896,
        "end_line": 1896,
        "type": "filter",
        "doc": {
            "description": "Filters the formatted author and date for a revision.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The formatted string.",
                    "types": [
                        "string"
                    ],
                    "variable": "$revision_date_author"
                },
                {
                    "name": "param",
                    "content": "The revision object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$revision"
                },
                {
                    "name": "param",
                    "content": "Whether to link to the revisions page, as passed into                                      wp_post_revision_title_expanded().",
                    "types": [
                        "bool"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-includes/post-template.php"
    },
    {
        "name": "wp_pre_insert_user_data",
        "line": 1789,
        "end_line": 1789,
        "type": "filter",
        "doc": {
            "description": "Filters user data before the record is created or updated.",
            "long_description": "<p>It only includes data in the wp_users table wp_user, not any user metadata.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "{     Values and keys for the user.     @type string $user_login      The user's login. Only included if $update == false     @type string $user_pass       The user's password.     @type string $user_email      The user's email.     @type string $user_url        The user's url.     @type string $user_nicename   The user's nice name. Defaults to a URL-safe version of user's login     @type string $display_name    The user's display name.     @type string $user_registered MySQL timestamp describing the moment when the user registered. Defaults to                                   the current UTC timestamp. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "Whether the user is being updated rather than created.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$update"
                },
                {
                    "name": "param",
                    "content": "ID of the user to be updated, or NULL if the user is being created.",
                    "types": [
                        "int",
                        "null"
                    ],
                    "variable": "$id"
                }
            ]
        },
        "file": "wp-includes/user.php"
    },
    {
        "name": "wp_prepare_attachment_for_js",
        "line": 3621,
        "end_line": 3621,
        "type": "filter",
        "doc": {
            "description": "Filters the attachment data prepared for JavaScript.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Array of prepared attachment data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "Attachment object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$attachment"
                },
                {
                    "name": "param",
                    "content": "Array of attachment meta data, or false if there is none.",
                    "types": [
                        "array",
                        "false"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_prepare_revision_for_js",
        "line": 273,
        "end_line": 273,
        "type": "filter",
        "doc": {
            "description": "Filters the array of revisions used on the revisions screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "{     The bootstrapped data for the revisions screen.     @type int        $id         Revision ID.     @type string     $title      Title for the revision's parent WP_Post object.     @type int        $author     Revision post author ID.     @type string     $date       Date the revision was modified.     @type string     $dateShort  Short-form version of the date the revision was modified.     @type string     $timeAgo    GMT-aware amount of time ago the revision was modified.     @type bool       $autosave   Whether the revision is an autosave.     @type bool       $current    Whether the revision is both not an autosave and the post                                  modified date matches the revision modified date (GMT-aware).     @type bool|false $restoreUrl URL if the revision can be restored, false otherwise. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$revisions_data"
                },
                {
                    "name": "param",
                    "content": "The revision's WP_Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$revision"
                },
                {
                    "name": "param",
                    "content": "The revision's parent WP_Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/includes/revision.php"
    },
    {
        "name": "wp_prepare_themes_for_js",
        "line": 691,
        "end_line": 691,
        "type": "filter",
        "doc": {
            "description": "Filters the themes prepared for JavaScript, for themes.php.",
            "long_description": "<p>Could be useful for changing the order, which is by name by default.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.8.0"
                },
                {
                    "name": "param",
                    "content": "Array of theme data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$prepared_themes"
                }
            ]
        },
        "file": "wp-admin/includes/theme.php"
    },
    {
        "name": "wp_privacy_anonymize_data",
        "line": 6921,
        "end_line": 6921,
        "type": "filter",
        "doc": {
            "description": "Filters the anonymous data for each type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "Anonymized data.",
                    "types": [
                        "string"
                    ],
                    "variable": "$anonymous"
                },
                {
                    "name": "param",
                    "content": "Type of the data.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "Original data.",
                    "types": [
                        "string"
                    ],
                    "variable": "$data"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_privacy_export_expiration",
        "line": 7015,
        "end_line": 7015,
        "type": "filter",
        "doc": {
            "description": "Filters the lifetime, in seconds, of a personal data export file.",
            "long_description": "<p>By default, the lifetime is 3 days. Once the file reaches that age, it will automatically be deleted by a cron job.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The expiration age of the export, in seconds.",
                    "types": [
                        "int"
                    ],
                    "variable": "$expiration"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_privacy_exports_dir",
        "line": 6944,
        "end_line": 6944,
        "type": "filter",
        "doc": {
            "description": "Filters the directory used to store personal data export files.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "Exports directory.",
                    "types": [
                        "string"
                    ],
                    "variable": "$exports_dir"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_privacy_exports_url",
        "line": 6967,
        "end_line": 6967,
        "type": "filter",
        "doc": {
            "description": "Filters the URL of the directory used to store personal data export files.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "Exports directory URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$exports_url"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_privacy_personal_data_email_content",
        "line": 590,
        "end_line": 590,
        "type": "filter",
        "doc": {
            "description": "Filters the text of the email sent with a personal data export file.",
            "long_description": "<p>The following strings have a special meaning and will get replaced dynamically:</p> <h3>EXPIRATION###         The date when the URL will be automatically deleted.</h3> <h3>LINK###               URL of the personal data export file for the user.</h3> <h3>SITENAME###           The name of the site.</h3> <h3>SITEURL###            The URL to the site.</h3>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "since",
                    "content": "5.3.0",
                    "description": "Introduced the <code>$email_data</code> array."
                },
                {
                    "name": "param",
                    "content": "Text in the email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email_text"
                },
                {
                    "name": "param",
                    "content": "The request ID for this personal data export.",
                    "types": [
                        "int"
                    ],
                    "variable": "$request_id"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the account action email.     @type WP_User_Request $request           User request object.     @type int             $expiration        The time in seconds until the export file expires.     @type string          $expiration_date   The localized date and time when the export file expires.     @type string          $message_recipient The address that the email will be sent to. Defaults                                              to the value of <code>$request-&gt;email</code>, but can be changed                                              by the <code>wp_privacy_personal_data_email_to</code> filter.     @type string          $export_file_url   The export file URL.     @type string          $sitename          The site name sending the mail.     @type string          $siteurl           The site URL sending the mail.",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_data"
                }
            ]
        },
        "file": "wp-admin/includes/privacy-tools.php"
    },
    {
        "name": "wp_privacy_personal_data_email_subject",
        "line": 545,
        "end_line": 545,
        "type": "filter",
        "doc": {
            "description": "Filters the subject of the email sent when an export request is completed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "The email subject.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                },
                {
                    "name": "param",
                    "content": "The name of the site.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sitename"
                },
                {
                    "name": "param",
                    "content": "{     Data relating to the account action email.     @type WP_User_Request $request           User request object.     @type int             $expiration        The time in seconds until the export file expires.     @type string          $expiration_date   The localized date and time when the export file expires.     @type string          $message_recipient The address that the email will be sent to. Defaults                                              to the value of <code>$request-&gt;email</code>, but can be changed                                              by the <code>wp_privacy_personal_data_email_to</code> filter.     @type string          $export_file_url   The export file URL.     @type string          $sitename          The site name sending the mail.     @type string          $siteurl           The site URL sending the mail. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$email_data"
                }
            ]
        },
        "file": "wp-admin/includes/privacy-tools.php"
    },
    {
        "name": "wp_privacy_personal_data_email_to",
        "line": 509,
        "end_line": 509,
        "type": "filter",
        "doc": {
            "description": "Filters the recipient of the personal data export email notification.",
            "long_description": "<p>Should be used with great caution to avoid sending the data export link to wrong emails.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.3.0"
                },
                {
                    "name": "param",
                    "content": "The email address of the notification recipient.",
                    "types": [
                        "string"
                    ],
                    "variable": "$request_email"
                },
                {
                    "name": "param",
                    "content": "The request that is initiating the notification.",
                    "types": [
                        "\\WP_User_Request"
                    ],
                    "variable": "$request"
                }
            ]
        },
        "file": "wp-admin/includes/privacy-tools.php"
    },
    {
        "name": "wp_privacy_personal_data_erasers",
        "line": 4945,
        "end_line": 4945,
        "type": "filter",
        "doc": {
            "description": "Filters the array of personal data eraser callbacks.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "{     An array of callable erasers of personal data. Default empty array.     @type array {         Array of personal data exporters.         @type string $callback               Callable eraser that accepts an email address and                                              a page and returns an array with boolean values for                                              whether items were removed or retained and any messages                                              from the eraser, as well as if additional pages are                                              available.         @type string $exporter_friendly_name Translated user facing friendly name for the eraser.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "wp_privacy_personal_data_erasure_page",
        "line": 5096,
        "end_line": 5096,
        "type": "filter",
        "doc": {
            "description": "Filters a page of personal data eraser data.",
            "long_description": "<p>Allows the erasure response to be consumed by destinations in addition to Ajax.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The personal data for the given exporter and page.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The index of the eraser that provided this data.",
                    "types": [
                        "int"
                    ],
                    "variable": "$eraser_index"
                },
                {
                    "name": "param",
                    "content": "The email address associated with this personal data.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email_address"
                },
                {
                    "name": "param",
                    "content": "The page for this response.",
                    "types": [
                        "int"
                    ],
                    "variable": "$page"
                },
                {
                    "name": "param",
                    "content": "The privacy request post ID associated with this request.",
                    "types": [
                        "int"
                    ],
                    "variable": "$request_id"
                },
                {
                    "name": "param",
                    "content": "The key (slug) of the eraser that provided this data.",
                    "types": [
                        "string"
                    ],
                    "variable": "$eraser_key"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "wp_privacy_personal_data_export_page",
        "line": 4867,
        "end_line": 4867,
        "type": "filter",
        "doc": {
            "description": "Filters a page of personal data exporter data. Used to build the export report.",
            "long_description": "<p>Allows the export response to be consumed by destinations in addition to Ajax.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "The personal data for the given exporter and page.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The index of the exporter that provided this data.",
                    "types": [
                        "int"
                    ],
                    "variable": "$exporter_index"
                },
                {
                    "name": "param",
                    "content": "The email address associated with this personal data.",
                    "types": [
                        "string"
                    ],
                    "variable": "$email_address"
                },
                {
                    "name": "param",
                    "content": "The page for this response.",
                    "types": [
                        "int"
                    ],
                    "variable": "$page"
                },
                {
                    "name": "param",
                    "content": "The privacy request post ID associated with this request.",
                    "types": [
                        "int"
                    ],
                    "variable": "$request_id"
                },
                {
                    "name": "param",
                    "content": "Whether the final results of the export should be emailed to the user.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$send_as_email"
                },
                {
                    "name": "param",
                    "content": "The key (slug) of the exporter that provided this data.",
                    "types": [
                        "string"
                    ],
                    "variable": "$exporter_key"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "wp_privacy_personal_data_exporters",
        "line": 4754,
        "end_line": 4754,
        "type": "filter",
        "doc": {
            "description": "Filters the array of exporter callbacks.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.6"
                },
                {
                    "name": "param",
                    "content": "{     An array of callable exporters of personal data. Default empty array.     @type array {         Array of personal data exporters.         @type string $callback               Callable exporter function that accepts an                                              email address and a page and returns an array                                              of name =&gt; value pairs of personal data.         @type string $exporter_friendly_name Translated user facing friendly name for the                                              exporter.     } }",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "wp_protected_ajax_actions",
        "line": 887,
        "end_line": 887,
        "type": "filter",
        "doc": {
            "description": "Filters the array of protected AJAX actions.",
            "long_description": "<p>This filter is only fired when doing AJAX and the AJAX request has an 'action' property.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Array of strings with AJAX actions to protect.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions_to_protect"
                }
            ]
        },
        "file": "wp-includes/load.php"
    },
    {
        "name": "wp_query_search_exclusion_prefix",
        "line": 1361,
        "end_line": 1361,
        "type": "filter",
        "doc": {
            "description": "Filters the prefix that indicates that a search term should be excluded from results.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The prefix. Default '-'. Returning                                 an empty value disables exclusions.",
                    "types": [
                        "string"
                    ],
                    "variable": "$exclusion_prefix"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "wp_read_image_metadata",
        "line": 820,
        "end_line": 820,
        "type": "filter",
        "doc": {
            "description": "Filters the array of meta data read from an image's exif data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$iptc</code> parameter was added."
                },
                {
                    "name": "since",
                    "content": "5.0.0",
                    "description": "The <code>$exif</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "Image meta data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                },
                {
                    "name": "param",
                    "content": "Path to image file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "Type of image, one of the <code>IMAGETYPE_XXX</code> constants.",
                    "types": [
                        "int"
                    ],
                    "variable": "$image_type"
                },
                {
                    "name": "param",
                    "content": "IPTC data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$iptc"
                },
                {
                    "name": "param",
                    "content": "EXIF data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$exif"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "wp_read_image_metadata_types",
        "line": 732,
        "end_line": 732,
        "type": "filter",
        "doc": {
            "description": "Filters the image types to check for exif data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "Image types to check for exif data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$image_types"
                }
            ]
        },
        "file": "wp-admin/includes/image.php"
    },
    {
        "name": "wp_read_video_metadata",
        "line": 3538,
        "end_line": 3538,
        "type": "filter",
        "doc": {
            "description": "Filters the array of metadata retrieved from a video.",
            "long_description": "<p>In core, usually this selection is what is stored. More complete data can be parsed from the <code>$data</code> parameter.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.9.0"
                },
                {
                    "name": "param",
                    "content": "Filtered Video metadata.",
                    "types": [
                        "array"
                    ],
                    "variable": "$metadata"
                },
                {
                    "name": "param",
                    "content": "Path to video file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file"
                },
                {
                    "name": "param",
                    "content": "File format of video, as analyzed by getID3.",
                    "types": [
                        "string"
                    ],
                    "variable": "$file_format"
                },
                {
                    "name": "param",
                    "content": "Raw metadata from getID3.",
                    "types": [
                        "string"
                    ],
                    "variable": "$data"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "wp_redirect",
        "line": 1237,
        "end_line": 1237,
        "type": "filter",
        "doc": {
            "description": "Filters the redirect location.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "The path or URL to redirect to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                },
                {
                    "name": "param",
                    "content": "The HTTP response status code to use.",
                    "types": [
                        "int"
                    ],
                    "variable": "$status"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_redirect_status",
        "line": 1247,
        "end_line": 1247,
        "type": "filter",
        "doc": {
            "description": "Filters the redirect HTTP response status code to use.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "The HTTP response status code to use.",
                    "types": [
                        "int"
                    ],
                    "variable": "$status"
                },
                {
                    "name": "param",
                    "content": "The path or URL to redirect to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_refresh_nonces",
        "line": 3351,
        "end_line": 3351,
        "type": "filter",
        "doc": {
            "description": "Filters the nonces to send to the New/Edit Post screen.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "The Heartbeat response.",
                    "types": [
                        "array"
                    ],
                    "variable": "$response"
                },
                {
                    "name": "param",
                    "content": "The $_POST data sent.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "The screen id.",
                    "types": [
                        "string"
                    ],
                    "variable": "$screen_id"
                }
            ]
        },
        "file": "wp-admin/includes/ajax-actions.php"
    },
    {
        "name": "wp_resource_hints",
        "line": 3213,
        "end_line": 3213,
        "type": "filter",
        "doc": {
            "description": "Filters domains and URLs for resource hints of relation type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "URLs to print for resource hints.",
                    "types": [
                        "array"
                    ],
                    "variable": "$urls"
                },
                {
                    "name": "param",
                    "content": "The relation type the URLs are printed for, e.g. 'preconnect' or 'prerender'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$relation_type"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "wp_rest_search_handlers",
        "line": 258,
        "end_line": 258,
        "type": "filter",
        "doc": {
            "description": "Filters the search handlers to use in the REST search controller.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "List of search handlers to use in the controller. Each search                               handler instance must extend the <code>WP_REST_Search_Handler</code> class.                               Default is only a handler for posts.",
                    "types": [
                        "array"
                    ],
                    "variable": "$search_handlers"
                }
            ]
        },
        "file": "wp-includes/rest-api.php"
    },
    {
        "name": "wp_rest_server_class",
        "line": 458,
        "end_line": 458,
        "type": "filter",
        "doc": {
            "description": "Filters the REST Server Class.",
            "long_description": "<p>This filter allows you to adjust the server class used by the API, using a different class to handle requests.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "The name of the server class. Default 'WP_REST_Server'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$class_name"
                }
            ]
        },
        "file": "wp-includes/rest-api.php"
    },
    {
        "name": "wp_revisions_to_keep",
        "line": 548,
        "end_line": 548,
        "type": "filter",
        "doc": {
            "description": "Filters the number of revisions to save for the given post.",
            "long_description": "<p>Overrides the value of WP_POST_REVISIONS.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Number of revisions to store.",
                    "types": [
                        "int"
                    ],
                    "variable": "$num"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/revision.php"
    },
    {
        "name": "wp_safe_redirect_fallback",
        "line": 1378,
        "end_line": 1378,
        "type": "filter",
        "doc": {
            "description": "Filters the redirect fallback URL for when the provided redirect is not safe (local).",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "The fallback URL to use by default.",
                    "types": [
                        "string"
                    ],
                    "variable": "$fallback_url"
                },
                {
                    "name": "param",
                    "content": "The HTTP response status code to use.",
                    "types": [
                        "int"
                    ],
                    "variable": "$status"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "wp_save_image_editor_file",
        "line": 344,
        "end_line": 344,
        "type": "filter",
        "doc": {
            "description": "Filters whether to skip saving the image file.",
            "long_description": "<p>Returning a non-null value will short-circuit the save method, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Value to return instead of saving. Default null.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$override"
                },
                {
                    "name": "param",
                    "content": "Name of the file to be saved.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filename"
                },
                {
                    "name": "param",
                    "content": "WP_Image_Editor instance.",
                    "types": [
                        "\\WP_Image_Editor"
                    ],
                    "variable": "$image"
                },
                {
                    "name": "param",
                    "content": "Image mime type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mime_type"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-admin/includes/image-edit.php"
    },
    {
        "name": "wp_save_image_file",
        "line": 373,
        "end_line": 373,
        "type": "filter",
        "doc": {
            "description": "Filters whether to skip saving the image file.",
            "long_description": "<p>Returning a non-null value will short-circuit the save method, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "deprecated",
                    "content": "3.5.0",
                    "description": "Use wp_save_image_editor_file instead."
                },
                {
                    "name": "param",
                    "content": "Value to return instead of saving. Default null.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$override"
                },
                {
                    "name": "param",
                    "content": "Name of the file to be saved.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filename"
                },
                {
                    "name": "param",
                    "content": "WP_Image_Editor instance.",
                    "types": [
                        "\\WP_Image_Editor"
                    ],
                    "variable": "$image"
                },
                {
                    "name": "param",
                    "content": "Image mime type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$mime_type"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-admin/includes/image-edit.php"
    },
    {
        "name": "wp_save_post_revision_check_for_changes",
        "line": 159,
        "end_line": 159,
        "type": "filter",
        "doc": {
            "description": "Filters whether the post has changed since the last revision.",
            "long_description": "<p>By default a revision is saved only if one of the revisioned fields has changed. This filter can override that so a revision is saved even if nothing has changed.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to check for changes before saving a new revision.                                   Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$check_for_changes"
                },
                {
                    "name": "param",
                    "content": "The last revision post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$last_revision"
                },
                {
                    "name": "param",
                    "content": "The post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/revision.php"
    },
    {
        "name": "wp_save_post_revision_post_has_changed",
        "line": 181,
        "end_line": 181,
        "type": "filter",
        "doc": {
            "description": "Filters whether a post has changed.",
            "long_description": "<p>By default a revision is saved only if one of the revisioned fields has changed. This filter allows for additional checks to determine if there were changes.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the post has changed.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$post_has_changed"
                },
                {
                    "name": "param",
                    "content": "The last revision post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$last_revision"
                },
                {
                    "name": "param",
                    "content": "The post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-includes/revision.php"
    },
    {
        "name": "wp_search_stopwords",
        "line": 1476,
        "end_line": 1476,
        "type": "filter",
        "doc": {
            "description": "Filters stopwords used when parsing search terms.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.7.0"
                },
                {
                    "name": "param",
                    "content": "Array of stopwords.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$stopwords"
                }
            ]
        },
        "file": "wp-includes/class-wp-query.php"
    },
    {
        "name": "wp_setup_nav_menu_item",
        "line": 976,
        "end_line": 976,
        "type": "filter",
        "doc": {
            "description": "Filters a navigation menu item object.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The menu item object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$menu_item"
                }
            ]
        },
        "file": "wp-includes/nav-menu.php"
    },
    {
        "name": "wp_should_handle_php_error",
        "line": 116,
        "end_line": 116,
        "type": "filter",
        "doc": {
            "description": "Filters whether a given thrown error should be handled by the fatal error handler.",
            "long_description": "<p>This filter is only fired if the error is not already configured to be handled by WordPress core. As such, it exclusively allows adding further rules for which errors should be handled, but not removing existing ones.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "Whether the error should be handled by the fatal error handler.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$should_handle_error"
                },
                {
                    "name": "param",
                    "content": "Error information retrieved from error_get_last().",
                    "types": [
                        "array"
                    ],
                    "variable": "$error"
                }
            ]
        },
        "file": "wp-includes/class-wp-fatal-error-handler.php"
    },
    {
        "name": "wp_should_upgrade_global_tables",
        "line": 3378,
        "end_line": 3378,
        "type": "filter",
        "doc": {
            "description": "Filters if upgrade routines should be run on global tables.",
            "long_description": "",
            "tags": [
                {
                    "name": "param",
                    "content": "Whether to run the upgrade routines on global tables.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$should_upgrade"
                }
            ]
        },
        "file": "wp-admin/includes/upgrade.php"
    },
    {
        "name": "wp_signature_hosts",
        "line": 1070,
        "end_line": 1070,
        "type": "filter",
        "doc": {
            "description": "Filters the list of hosts which should have Signature Verification attempted on.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "List of hostnames.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$hostnames"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "wp_signature_softfail",
        "line": 1127,
        "end_line": 1127,
        "type": "filter",
        "doc": {
            "description": "Filters whether Signature Verification failures should be allowed to soft fail.",
            "long_description": "<p>WARNING: This may be removed from a future release.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "If a softfail is allowed.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$signature_softfail"
                },
                {
                    "name": "param",
                    "content": "The url being accessed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "wp_signature_url",
        "line": 1095,
        "end_line": 1095,
        "type": "filter",
        "doc": {
            "description": "Filter the URL where the signature for a file is located.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "The URL where signatures can be found for a file, or false if none are known.",
                    "types": [
                        "false",
                        "string"
                    ],
                    "variable": "$signature_url"
                },
                {
                    "name": "param",
                    "content": "The URL being verified.",
                    "types": [
                        "string"
                    ],
                    "variable": "$url"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "wp_signup_location",
        "line": 1012,
        "end_line": 1012,
        "type": "filter",
        "doc": {
            "description": "Filters the Multisite sign up URL.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The sign up URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sign_up_url"
                }
            ]
        },
        "file": "wp-login.php"
    },
    {
        "name": "wp_spaces_regexp",
        "line": 5514,
        "end_line": 5514,
        "type": "filter",
        "doc": {
            "description": "Filters the regexp for common whitespace characters.",
            "long_description": "<p>This string is substituted for the \\s sequence as needed in regular expressions. For websites not written in English, different characters may represent whitespace. For websites not encoded in UTF-8, the 0xC2 0xA0 sequence may not be in use.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "Regexp pattern for matching common whitespace characters.",
                    "types": [
                        "string"
                    ],
                    "variable": "$spaces"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "wp_sprintf",
        "line": 4957,
        "end_line": 4957,
        "type": "filter",
        "doc": {
            "description": "Filters a fragment from the pattern passed to wp_sprintf().",
            "long_description": "<p>If the fragment is unchanged, then sprintf() will be run on the fragment.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "A fragment from the pattern.",
                    "types": [
                        "string"
                    ],
                    "variable": "$fragment"
                },
                {
                    "name": "param",
                    "content": "The argument.",
                    "types": [
                        "string"
                    ],
                    "variable": "$arg"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "wp_sprintf_l",
        "line": 5007,
        "end_line": 5017,
        "type": "filter",
        "doc": {
            "description": "Filters the translated delimiters used by wp_sprintf_l().",
            "long_description": "<p>Placeholders (%s) are included to assist translators and then removed before the array of strings reaches the filter.</p> <p>Please note: Ampersands and entities should be avoided here.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of translated delimiters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$delimiters"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "wp_tag_cloud",
        "line": 735,
        "end_line": 735,
        "type": "filter",
        "doc": {
            "description": "Filters the tag cloud output.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "HTML output of the tag cloud.",
                    "types": [
                        "string"
                    ],
                    "variable": "$return"
                },
                {
                    "name": "param",
                    "content": "An array of tag cloud arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/category-template.php"
    },
    {
        "name": "wp_targeted_link_rel",
        "line": 3183,
        "end_line": 3183,
        "type": "filter",
        "doc": {
            "description": "Filters the rel values that are added to links with `target` attribute.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "The rel values.",
                    "types": [
                        "string"
                    ],
                    "variable": "$rel"
                },
                {
                    "name": "param",
                    "content": "The matched content of the link tag including all HTML attributes.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link_html"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "wp_terms_checklist_args",
        "line": 101,
        "end_line": 101,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy terms checklist arguments.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_terms_checklist()"
                },
                {
                    "name": "param",
                    "content": "An array of arguments.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                },
                {
                    "name": "param",
                    "content": "The post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-admin/includes/template.php"
    },
    {
        "name": "wp_theme_editor_filetypes",
        "line": 286,
        "end_line": 286,
        "type": "filter",
        "doc": {
            "description": "Filters the list of file types allowed for editing in the Theme editor.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.4.0"
                },
                {
                    "name": "param",
                    "content": "List of allowed file types.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$default_types"
                },
                {
                    "name": "param",
                    "content": "The current Theme object.",
                    "types": [
                        "\\WP_Theme"
                    ],
                    "variable": "$theme"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "wp_title",
        "line": 1304,
        "end_line": 1304,
        "type": "filter",
        "doc": {
            "description": "Filters the text of the page title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.0.0"
                },
                {
                    "name": "param",
                    "content": "Page title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "Title separator.",
                    "types": [
                        "string"
                    ],
                    "variable": "$sep"
                },
                {
                    "name": "param",
                    "content": "Location of the separator ('left' or 'right').",
                    "types": [
                        "string"
                    ],
                    "variable": "$seplocation"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "wp_title_parts",
        "line": 1285,
        "end_line": 1285,
        "type": "filter",
        "doc": {
            "description": "Filters the parts of the page title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "Array of parts of the page title.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$title_array"
                }
            ]
        },
        "file": "wp-includes/general-template.php"
    },
    {
        "name": "wp_title_rss",
        "line": 143,
        "end_line": 143,
        "type": "filter",
        "doc": {
            "description": "Filters the blog title for display of the feed title.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "since",
                    "content": "4.4.0",
                    "description": "The <code>$sep</code> parameter was deprecated and renamed to <code>$deprecated</code>."
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "get_wp_title_rss()"
                },
                {
                    "name": "param",
                    "content": "The current blog title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$wp_title_rss"
                },
                {
                    "name": "param",
                    "content": "Unused.",
                    "types": [
                        "string"
                    ],
                    "variable": "$deprecated"
                }
            ]
        },
        "file": "wp-includes/feed.php"
    },
    {
        "name": "wp_trim_excerpt",
        "line": 3827,
        "end_line": 3827,
        "type": "filter",
        "doc": {
            "description": "Filters the trimmed excerpt string.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The trimmed text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "The text prior to trimming.",
                    "types": [
                        "string"
                    ],
                    "variable": "$raw_excerpt"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "wp_trim_words",
        "line": 3886,
        "end_line": 3886,
        "type": "filter",
        "doc": {
            "description": "Filters the text content after words have been trimmed.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "The trimmed text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "The number of words to trim the text to. Default 55.",
                    "types": [
                        "int"
                    ],
                    "variable": "$num_words"
                },
                {
                    "name": "param",
                    "content": "An optional string to append to the end of the trimmed text, e.g. &hellip;.",
                    "types": [
                        "string"
                    ],
                    "variable": "$more"
                },
                {
                    "name": "param",
                    "content": "The text before it was trimmed.",
                    "types": [
                        "string"
                    ],
                    "variable": "$original_text"
                }
            ]
        },
        "file": "wp-includes/formatting.php"
    },
    {
        "name": "wp_trusted_keys",
        "line": 1363,
        "end_line": 1363,
        "type": "filter",
        "doc": {
            "description": "Filter the valid signing keys used to verify the contents of files.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.2.0"
                },
                {
                    "name": "param",
                    "content": "The trusted keys that may sign packages.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$trusted_keys"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "wp_unique_filename",
        "line": 2453,
        "end_line": 2453,
        "type": "filter",
        "doc": {
            "description": "Filters the result when generating a unique file name.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.5.0"
                },
                {
                    "name": "param",
                    "content": "Unique file name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$filename"
                },
                {
                    "name": "param",
                    "content": "File extension, eg. \".png\".",
                    "types": [
                        "string"
                    ],
                    "variable": "$ext"
                },
                {
                    "name": "param",
                    "content": "Directory path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$dir"
                },
                {
                    "name": "param",
                    "content": "Callback function that generates the unique file name.",
                    "types": [
                        "callable",
                        "null"
                    ],
                    "variable": "$unique_filename_callback"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_unique_post_slug",
        "line": 4442,
        "end_line": 4442,
        "type": "filter",
        "doc": {
            "description": "Filters the unique post slug.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "The post slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$slug"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_ID"
                },
                {
                    "name": "param",
                    "content": "The post status.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_status"
                },
                {
                    "name": "param",
                    "content": "Post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                },
                {
                    "name": "param",
                    "content": "Post parent ID",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_parent"
                },
                {
                    "name": "param",
                    "content": "The original post slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$original_slug"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_unique_post_slug_is_bad_attachment_slug",
        "line": 4339,
        "end_line": 4339,
        "type": "filter",
        "doc": {
            "description": "Filters whether the post slug would make a bad attachment slug.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the slug would be bad as an attachment slug.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$bad_slug"
                },
                {
                    "name": "param",
                    "content": "The post slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$slug"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_unique_post_slug_is_bad_flat_slug",
        "line": 4419,
        "end_line": 4419,
        "type": "filter",
        "doc": {
            "description": "Filters whether the post slug would be bad as a flat slug.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the post slug would be bad as a flat slug.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$bad_slug"
                },
                {
                    "name": "param",
                    "content": "The post slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$slug"
                },
                {
                    "name": "param",
                    "content": "Post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_unique_post_slug_is_bad_hierarchical_slug",
        "line": 4370,
        "end_line": 4370,
        "type": "filter",
        "doc": {
            "description": "Filters whether the post slug would make a bad hierarchical post slug.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the post slug would be bad in a hierarchical post context.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$bad_slug"
                },
                {
                    "name": "param",
                    "content": "The post slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$slug"
                },
                {
                    "name": "param",
                    "content": "Post type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$post_type"
                },
                {
                    "name": "param",
                    "content": "Post parent ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_parent"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_unique_term_slug",
        "line": 2778,
        "end_line": 2778,
        "type": "filter",
        "doc": {
            "description": "Filters the unique term slug.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Unique term slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$slug"
                },
                {
                    "name": "param",
                    "content": "Term object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$term"
                },
                {
                    "name": "param",
                    "content": "Slug originally passed to the function for testing.",
                    "types": [
                        "string"
                    ],
                    "variable": "$original_slug"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "wp_unique_term_slug_is_bad_slug",
        "line": 2747,
        "end_line": 2747,
        "type": "filter",
        "doc": {
            "description": "Filters whether the proposed unique term slug is bad.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.3.0"
                },
                {
                    "name": "param",
                    "content": "Whether the slug needs to be made unique with a suffix.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$needs_suffix"
                },
                {
                    "name": "param",
                    "content": "The slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$slug"
                },
                {
                    "name": "param",
                    "content": "Term object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$term"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "wp_update_attachment_metadata",
        "line": 5786,
        "end_line": 5786,
        "type": "filter",
        "doc": {
            "description": "Filters the updated attachment meta data.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of updated attachment meta data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "Attachment post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "wp_update_comment_data",
        "line": 2375,
        "end_line": 2375,
        "type": "filter",
        "doc": {
            "description": "Filters the comment data immediately before it is updated in the database.",
            "long_description": "<p>Note: data being passed to the filter is already unslashed.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "The new, processed comment data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "The old, unslashed comment data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$comment"
                },
                {
                    "name": "param",
                    "content": "The new, raw comment data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$commentarr"
                }
            ]
        },
        "file": "wp-includes/comment.php"
    },
    {
        "name": "wp_update_php_url",
        "line": 7056,
        "end_line": 7056,
        "type": "filter",
        "doc": {
            "description": "Filters the URL to learn more about updating the PHP version the site is running on.",
            "long_description": "<p>Providing an empty string is not allowed and will result in the default URL being used. Furthermore the page the URL links to should preferably be localized in the site language.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "URL to learn more about updating PHP.",
                    "types": [
                        "string"
                    ],
                    "variable": "$update_url"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_update_term_data",
        "line": 2957,
        "end_line": 2957,
        "type": "filter",
        "doc": {
            "description": "Filters term data before it is updated in the database.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "Term data to be updated.",
                    "types": [
                        "array"
                    ],
                    "variable": "$data"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                },
                {
                    "name": "param",
                    "content": "Taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "Arguments passed to wp_update_term().",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "wp_update_term_parent",
        "line": 2912,
        "end_line": 2912,
        "type": "filter",
        "doc": {
            "description": "Filters the term parent.",
            "long_description": "<p>Hook to this filter to see if it will cause a hierarchy loop.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "ID of the parent term.",
                    "types": [
                        "int"
                    ],
                    "variable": "$parent"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                },
                {
                    "name": "param",
                    "content": "Taxonomy slug.",
                    "types": [
                        "string"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "An array of potentially altered update arguments for the given term.",
                    "types": [
                        "array"
                    ],
                    "variable": "$parsed_args"
                },
                {
                    "name": "param",
                    "content": "An array of update arguments for the given term.",
                    "types": [
                        "array"
                    ],
                    "variable": "$args"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "wp_upload_bits",
        "line": 2524,
        "end_line": 2531,
        "type": "filter",
        "doc": {
            "description": "Filters whether to treat the upload bits as an error.",
            "long_description": "<p>Passing a non-array to the filter will effectively short-circuit preparing the upload bits, returning that value instead.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "An array of upload bits data, or a non-array error to return.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$upload_bits_error"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "wp_user_dashboard_widgets",
        "line": 101,
        "end_line": 101,
        "type": "filter",
        "doc": {
            "description": "Filters the list of widgets to load for the User Admin dashboard.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "An array of dashboard widget IDs.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$dashboard_widgets"
                }
            ]
        },
        "file": "wp-admin/includes/dashboard.php"
    },
    {
        "name": "wp_using_themes",
        "line": 1373,
        "end_line": 1373,
        "type": "filter",
        "doc": {
            "description": "Filters whether the current request should use themes.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "Whether the current request should use themes.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$wp_using_themes"
                }
            ]
        },
        "file": "wp-includes/load.php"
    },
    {
        "name": "wp_video_embed_handler",
        "line": 210,
        "end_line": 210,
        "type": "filter",
        "doc": {
            "description": "Filters the video embed handler callback.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Video embed handler callback function.",
                    "types": [
                        "callable"
                    ],
                    "variable": "$handler"
                }
            ]
        },
        "file": "wp-includes/embed.php"
    },
    {
        "name": "wp_video_extensions",
        "line": 2678,
        "end_line": 2678,
        "type": "filter",
        "doc": {
            "description": "Filters the list of supported video formats.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "An array of supported video formats. Defaults are                             'mp4', 'm4v', 'webm', 'ogv', 'flv'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$extensions"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_video_shortcode",
        "line": 2941,
        "end_line": 2941,
        "type": "filter",
        "doc": {
            "description": "Filters the output of the video shortcode.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Video shortcode HTML output.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Array of video shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$atts"
                },
                {
                    "name": "param",
                    "content": "Video file.",
                    "types": [
                        "string"
                    ],
                    "variable": "$video"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Media library used for the video shortcode.",
                    "types": [
                        "string"
                    ],
                    "variable": "$library"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_video_shortcode_class",
        "line": 2862,
        "end_line": 2862,
        "type": "filter",
        "doc": {
            "description": "Filters the class attribute for the video shortcode output container.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "since",
                    "content": "4.9.0",
                    "description": "The <code>$atts</code> parameter was added."
                },
                {
                    "name": "param",
                    "content": "CSS class or list of space-separated classes.",
                    "types": [
                        "string"
                    ],
                    "variable": "$class"
                },
                {
                    "name": "param",
                    "content": "Array of video shortcode attributes.",
                    "types": [
                        "array"
                    ],
                    "variable": "$atts"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_video_shortcode_library",
        "line": 2828,
        "end_line": 2828,
        "type": "filter",
        "doc": {
            "description": "Filters the media library used for the video shortcode.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "param",
                    "content": "Media library used for the video shortcode.",
                    "types": [
                        "string"
                    ],
                    "variable": "$library"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_video_shortcode_override",
        "line": 2731,
        "end_line": 2731,
        "type": "filter",
        "doc": {
            "description": "Filters the default video shortcode output.",
            "long_description": "<p>If the filtered output isn't empty, it will be used instead of generating the default video template.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.6.0"
                },
                {
                    "name": "see",
                    "content": "",
                    "refers": "wp_video_shortcode()"
                },
                {
                    "name": "param",
                    "content": "Empty variable to be replaced with shortcode markup.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "Attributes of the shortcode. @see wp_video_shortcode()",
                    "types": [
                        "array"
                    ],
                    "variable": "$attr"
                },
                {
                    "name": "param",
                    "content": "Video shortcode content.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Unique numeric ID of this video shortcode instance.",
                    "types": [
                        "int"
                    ],
                    "variable": "$instance"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "wp_xmlrpc_server_class",
        "line": 82,
        "end_line": 82,
        "type": "filter",
        "doc": {
            "description": "Filters the class used for handling XML-RPC requests.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "The name of the XML-RPC server class.",
                    "types": [
                        "string"
                    ],
                    "variable": "$class"
                }
            ]
        },
        "file": "xmlrpc.php"
    },
    {
        "name": "wpmu_active_signup",
        "line": 901,
        "end_line": 901,
        "type": "filter",
        "doc": {
            "description": "Filters the type of site sign-up.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "String that returns registration type. The value can be                              'all', 'none', 'blog', or 'user'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$active_signup"
                }
            ]
        },
        "file": "wp-signup.php"
    },
    {
        "name": "wpmu_blogs_columns",
        "line": 380,
        "end_line": 380,
        "type": "filter",
        "doc": {
            "description": "Filters the displayed site columns in Sites list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "An array of displayed site columns. Default 'cb',                               'blogname', 'lastupdated', 'registered', 'users'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$sites_columns"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-sites-list-table.php"
    },
    {
        "name": "wpmu_delete_blog_upload_dir",
        "line": 859,
        "end_line": 859,
        "type": "filter",
        "doc": {
            "description": "Filters the upload base directory to delete when the site is deleted.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Uploads path without subdirectory. @see wp_upload_dir()",
                    "types": [
                        "string"
                    ],
                    "variable": "$uploads['basedir']"
                },
                {
                    "name": "param",
                    "content": "The site ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$site_id"
                }
            ]
        },
        "file": "wp-includes/ms-site.php"
    },
    {
        "name": "wpmu_drop_tables",
        "line": 845,
        "end_line": 845,
        "type": "filter",
        "doc": {
            "description": "Filters the tables to drop when the site is deleted.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Array of names of the site tables to be dropped.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$tables"
                },
                {
                    "name": "param",
                    "content": "The ID of the site to drop tables for.",
                    "types": [
                        "int"
                    ],
                    "variable": "$site_id"
                }
            ]
        },
        "file": "wp-includes/ms-site.php"
    },
    {
        "name": "wpmu_signup_blog_notification",
        "line": 906,
        "end_line": 906,
        "type": "filter",
        "doc": {
            "description": "Filters whether to bypass the new site email notification.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Site domain.",
                    "types": [
                        "string",
                        "bool"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "Site path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Site title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "User login name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_login"
                },
                {
                    "name": "param",
                    "content": "User email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                },
                {
                    "name": "param",
                    "content": "Activation key created in wpmu_signup_blog().",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wpmu_signup_blog_notification_email",
        "line": 945,
        "end_line": 956,
        "type": "filter",
        "doc": {
            "description": "Filters the message content of the new blog notification email.",
            "long_description": "<p>Content should be formatted for transmission via wp_mail().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Content of the notification email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "Site domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "Site path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Site title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "User login name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_login"
                },
                {
                    "name": "param",
                    "content": "User email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                },
                {
                    "name": "param",
                    "content": "Activation key created in wpmu_signup_blog().",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wpmu_signup_blog_notification_subject",
        "line": 977,
        "end_line": 988,
        "type": "filter",
        "doc": {
            "description": "Filters the subject of the new blog notification email.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Subject of the notification email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                },
                {
                    "name": "param",
                    "content": "Site domain.",
                    "types": [
                        "string"
                    ],
                    "variable": "$domain"
                },
                {
                    "name": "param",
                    "content": "Site path.",
                    "types": [
                        "string"
                    ],
                    "variable": "$path"
                },
                {
                    "name": "param",
                    "content": "Site title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "User login name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_login"
                },
                {
                    "name": "param",
                    "content": "User email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                },
                {
                    "name": "param",
                    "content": "Activation key created in wpmu_signup_blog().",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wpmu_signup_user_notification",
        "line": 1035,
        "end_line": 1035,
        "type": "filter",
        "doc": {
            "description": "Filters whether to bypass the email notification for new user sign-up.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "User login name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_login"
                },
                {
                    "name": "param",
                    "content": "User email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                },
                {
                    "name": "param",
                    "content": "Activation key created in wpmu_signup_user().",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. Default empty array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wpmu_signup_user_notification_email",
        "line": 1063,
        "end_line": 1071,
        "type": "filter",
        "doc": {
            "description": "Filters the content of the notification email for new user sign-up.",
            "long_description": "<p>Content should be formatted for transmission via wp_mail().</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Content of the notification email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$content"
                },
                {
                    "name": "param",
                    "content": "User login name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_login"
                },
                {
                    "name": "param",
                    "content": "User email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                },
                {
                    "name": "param",
                    "content": "Activation key created in wpmu_signup_user().",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. Default empty array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wpmu_signup_user_notification_subject",
        "line": 1087,
        "end_line": 1095,
        "type": "filter",
        "doc": {
            "description": "Filters the subject of the notification email of new user signup.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Subject of the notification email.",
                    "types": [
                        "string"
                    ],
                    "variable": "$subject"
                },
                {
                    "name": "param",
                    "content": "User login name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_login"
                },
                {
                    "name": "param",
                    "content": "User email address.",
                    "types": [
                        "string"
                    ],
                    "variable": "$user_email"
                },
                {
                    "name": "param",
                    "content": "Activation key created in wpmu_signup_user().",
                    "types": [
                        "string"
                    ],
                    "variable": "$key"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. Default empty array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wpmu_users_columns",
        "line": 211,
        "end_line": 211,
        "type": "filter",
        "doc": {
            "description": "Filters the columns displayed in the Network Admin Users list table.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "An array of user columns. Default 'cb', 'username',                                'name', 'email', 'registered', 'blogs'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$users_columns"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-ms-users-list-table.php"
    },
    {
        "name": "wpmu_validate_blog_signup",
        "line": 735,
        "end_line": 735,
        "type": "filter",
        "doc": {
            "description": "Filters site details and error messages following registration.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "{     Array of domain, path, blog name, blog title, user and error messages.     @type string         $domain     Domain for the site.     @type string         $path       Path for the site. Used in subdirectory installations.     @type string         $blogname   The unique site name (slug).     @type string         $blog_title Blog title.     @type string|WP_User $user       By default, an empty string. A user object if provided.     @type WP_Error       $errors     WP_Error containing any errors found. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$result"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wpmu_validate_user_signup",
        "line": 570,
        "end_line": 570,
        "type": "filter",
        "doc": {
            "description": "Filters the validated user registration details.",
            "long_description": "<p>This does not allow you to override the username or email of the user during registration. The values are solely used for validation and error handling.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "{     The array of user name, email and the error messages.     @type string   $user_name     Sanitized and unique username.     @type string   $orig_username Original username.     @type string   $user_email    User email address.     @type WP_Error $errors        WP_Error object containing any errors found. }",
                    "types": [
                        "array"
                    ],
                    "variable": "$result"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wpmu_welcome_notification",
        "line": 1549,
        "end_line": 1549,
        "type": "filter",
        "doc": {
            "description": "Filters whether to bypass the welcome email after site activation.",
            "long_description": "<p>Returning false disables the welcome email.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "Blog ID.",
                    "types": [
                        "int",
                        "bool"
                    ],
                    "variable": "$blog_id"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "User password.",
                    "types": [
                        "string"
                    ],
                    "variable": "$password"
                },
                {
                    "name": "param",
                    "content": "Site title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. By default, contains the requested privacy setting and lang_id.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "wpmu_welcome_user_notification",
        "line": 1665,
        "end_line": 1665,
        "type": "filter",
        "doc": {
            "description": "Filters whether to bypass the welcome email after user activation.",
            "long_description": "<p>Returning false disables the welcome email.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "MU (3.0.0)",
                    "description": "MU (3.0.0)"
                },
                {
                    "name": "param",
                    "content": "User ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$user_id"
                },
                {
                    "name": "param",
                    "content": "User password.",
                    "types": [
                        "string"
                    ],
                    "variable": "$password"
                },
                {
                    "name": "param",
                    "content": "Signup meta data. Default empty array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-includes/ms-functions.php"
    },
    {
        "name": "write_your_story",
        "line": 271,
        "end_line": 271,
        "type": "filter",
        "doc": {
            "description": "Filters the body placeholder text.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "5.0.0"
                },
                {
                    "name": "param",
                    "content": "Placeholder text. Default 'Start writing or type / to choose a block'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                },
                {
                    "name": "param",
                    "content": "Post object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                }
            ]
        },
        "file": "wp-admin/edit-form-blocks.php"
    },
    {
        "name": "wxr_export_skip_commentmeta",
        "line": 650,
        "end_line": 650,
        "type": "filter",
        "doc": {
            "description": "Filters whether to selectively skip comment meta used for WXR exports.",
            "long_description": "<p>Returning a truthy value to the filter will skip the current meta object from being exported.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.0.0"
                },
                {
                    "name": "param",
                    "content": "Whether to skip the current comment meta. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$skip"
                },
                {
                    "name": "param",
                    "content": "Current meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Current meta object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-admin/includes/export.php"
    },
    {
        "name": "wxr_export_skip_postmeta",
        "line": 607,
        "end_line": 607,
        "type": "filter",
        "doc": {
            "description": "Filters whether to selectively skip post meta used for WXR exports.",
            "long_description": "<p>Returning a truthy value to the filter will skip the current meta object from being exported.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "Whether to skip the current post meta. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$skip"
                },
                {
                    "name": "param",
                    "content": "Current meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Current meta object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-admin/includes/export.php"
    },
    {
        "name": "wxr_export_skip_termmeta",
        "line": 340,
        "end_line": 340,
        "type": "filter",
        "doc": {
            "description": "Filters whether to selectively skip term meta used for WXR exports.",
            "long_description": "<p>Returning a truthy value to the filter will skip the current meta object from being exported.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Whether to skip the current piece of term meta. Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$skip"
                },
                {
                    "name": "param",
                    "content": "Current meta key.",
                    "types": [
                        "string"
                    ],
                    "variable": "$meta_key"
                },
                {
                    "name": "param",
                    "content": "Current meta object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$meta"
                }
            ]
        },
        "file": "wp-admin/includes/export.php"
    },
    {
        "name": "x_redirect_by",
        "line": 1270,
        "end_line": 1270,
        "type": "filter",
        "doc": {
            "description": "Filters the X-Redirect-By header.",
            "long_description": "<p>Allows applications to identify themselves when they're doing a redirect.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "5.1.0"
                },
                {
                    "name": "param",
                    "content": "The application doing the redirect.",
                    "types": [
                        "string"
                    ],
                    "variable": "$x_redirect_by"
                },
                {
                    "name": "param",
                    "content": "Status code to use.",
                    "types": [
                        "int"
                    ],
                    "variable": "$status"
                },
                {
                    "name": "param",
                    "content": "The path to redirect to.",
                    "types": [
                        "string"
                    ],
                    "variable": "$location"
                }
            ]
        },
        "file": "wp-includes/pluggable.php"
    },
    {
        "name": "xmlrpc_allow_anonymous_comments",
        "line": 3839,
        "end_line": 3839,
        "type": "filter",
        "doc": {
            "description": "Filters whether to allow anonymous comments over XML-RPC.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.7.0"
                },
                {
                    "name": "param",
                    "content": "Whether to allow anonymous commenting via XML-RPC.                    Default false.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$allow"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_blog_options",
        "line": 633,
        "end_line": 633,
        "type": "filter",
        "doc": {
            "description": "Filters the XML-RPC blog options property.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "param",
                    "content": "An array of XML-RPC blog options.",
                    "types": [
                        "array"
                    ],
                    "variable": "$blog_options"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_default_post_fields",
        "line": 1857,
        "end_line": 1857,
        "type": "filter",
        "doc": {
            "description": "Filters the list of post query fields used by the given XML-RPC method.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Array of post fields. Default array contains 'post', 'terms', and 'custom_fields'.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "Method name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$method"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_default_posttype_fields",
        "line": 4466,
        "end_line": 4466,
        "type": "filter",
        "doc": {
            "description": "Filters the default query fields used by the given XML-RPC method.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of post type query fields for the given method.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "The method name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$method"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_default_revision_fields",
        "line": 4593,
        "end_line": 4593,
        "type": "filter",
        "doc": {
            "description": "Filters the default revision query fields used by the given XML-RPC method.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of revision query fields.",
                    "types": [
                        "array"
                    ],
                    "variable": "$field"
                },
                {
                    "name": "param",
                    "content": "The method name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$method"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_default_taxonomy_fields",
        "line": 2488,
        "end_line": 2488,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy query fields used by the given XML-RPC method.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomy fields to retrieve.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "The method name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$method"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_default_user_fields",
        "line": 2632,
        "end_line": 2632,
        "type": "filter",
        "doc": {
            "description": "Filters the default user query fields used by the given XML-RPC method.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "User query fields for given method. Default 'all'.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                },
                {
                    "name": "param",
                    "content": "The method name.",
                    "types": [
                        "string"
                    ],
                    "variable": "$method"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_enabled",
        "line": 265,
        "end_line": 265,
        "type": "filter",
        "doc": {
            "description": "Filters whether XML-RPC methods requiring authentication are enabled.",
            "long_description": "<p>Contrary to the way it's named, this filter does not control whether XML-RPC is <em>fully</em> enabled, rather, it only controls whether XML-RPC methods requiring authentication - such as for publishing purposes - are enabled.</p> <p>Further, the filter does not control whether pingbacks or other custom endpoints that don't require authentication are enabled. This behavior is expected, and due to how parity was matched with the <code>enable_xmlrpc</code> UI option the filter replaced when it was introduced in 3.5.</p> <p>To disable XML-RPC methods that require authentication, use:</p> <pre><code>add_filter( 'xmlrpc_enabled', '__return_false' );</code></pre> <p>For more granular control over all XML-RPC methods and requests, see the {@see 'xmlrpc_methods'} and {@see 'xmlrpc_element_limit'} hooks.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Whether XML-RPC is enabled. Default true.",
                    "types": [
                        "bool"
                    ],
                    "variable": "$enabled"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_login_error",
        "line": 292,
        "end_line": 292,
        "type": "filter",
        "doc": {
            "description": "Filters the XML-RPC user login error message.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "The XML-RPC error message.",
                    "types": [
                        "string"
                    ],
                    "variable": "$error"
                },
                {
                    "name": "param",
                    "content": "WP_Error object.",
                    "types": [
                        "\\WP_Error"
                    ],
                    "variable": "$user"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_methods",
        "line": 166,
        "end_line": 166,
        "type": "filter",
        "doc": {
            "description": "Filters the methods exposed by the XML-RPC server.",
            "long_description": "<p>This filter can be used to add new methods, and remove built-in methods.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of XML-RPC methods, keyed by their methodName.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$methods"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_pingback_error",
        "line": 7045,
        "end_line": 7045,
        "type": "filter",
        "doc": {
            "description": "Filters the XML-RPC pingback error return.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.1"
                },
                {
                    "name": "param",
                    "content": "An IXR_Error object containing the error code and message.",
                    "types": [
                        "\\IXR_Error"
                    ],
                    "variable": "$error"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_prepare_comment",
        "line": 1166,
        "end_line": 1166,
        "type": "filter",
        "doc": {
            "description": "Filters XML-RPC-prepared data for the given comment.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of prepared comment data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$_comment"
                },
                {
                    "name": "param",
                    "content": "Comment object.",
                    "types": [
                        "\\WP_Comment"
                    ],
                    "variable": "$comment"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_prepare_media_item",
        "line": 1039,
        "end_line": 1039,
        "type": "filter",
        "doc": {
            "description": "Filters XML-RPC-prepared data for the given media item.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of media item data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$_media_item"
                },
                {
                    "name": "param",
                    "content": "Media item object.",
                    "types": [
                        "object"
                    ],
                    "variable": "$media_item"
                },
                {
                    "name": "param",
                    "content": "Image size.",
                    "types": [
                        "string"
                    ],
                    "variable": "$thumbnail_size"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_prepare_page",
        "line": 1119,
        "end_line": 1119,
        "type": "filter",
        "doc": {
            "description": "Filters XML-RPC-prepared data for the given page.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of page data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$_page"
                },
                {
                    "name": "param",
                    "content": "Page object.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$page"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_prepare_post",
        "line": 947,
        "end_line": 947,
        "type": "filter",
        "doc": {
            "description": "Filters XML-RPC-prepared date for the given post.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of modified post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$_post"
                },
                {
                    "name": "param",
                    "content": "An array of post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "An array of post fields.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_prepare_post_type",
        "line": 1000,
        "end_line": 1000,
        "type": "filter",
        "doc": {
            "description": "Filters XML-RPC-prepared date for the given post type.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "since",
                    "content": "4.6.0",
                    "description": "Converted the <code>$post_type</code> parameter to accept a WP_Post_Type object."
                },
                {
                    "name": "param",
                    "content": "An array of post type data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$_post_type"
                },
                {
                    "name": "param",
                    "content": "Post type object.",
                    "types": [
                        "\\WP_Post_Type"
                    ],
                    "variable": "$post_type"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_prepare_taxonomy",
        "line": 785,
        "end_line": 785,
        "type": "filter",
        "doc": {
            "description": "Filters XML-RPC-prepared data for the given taxonomy.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of taxonomy data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$_taxonomy"
                },
                {
                    "name": "param",
                    "content": "Taxonomy object.",
                    "types": [
                        "\\WP_Taxonomy"
                    ],
                    "variable": "$taxonomy"
                },
                {
                    "name": "param",
                    "content": "The subset of taxonomy fields to return.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_prepare_term",
        "line": 820,
        "end_line": 820,
        "type": "filter",
        "doc": {
            "description": "Filters XML-RPC-prepared data for the given term.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "An array of term data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$_term"
                },
                {
                    "name": "param",
                    "content": "Term object or array.",
                    "types": [
                        "array",
                        "object"
                    ],
                    "variable": "$term"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_prepare_user",
        "line": 1213,
        "end_line": 1213,
        "type": "filter",
        "doc": {
            "description": "Filters XML-RPC-prepared data for the given user.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "An array of user data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$_user"
                },
                {
                    "name": "param",
                    "content": "User object.",
                    "types": [
                        "\\WP_User"
                    ],
                    "variable": "$user"
                },
                {
                    "name": "param",
                    "content": "An array of user fields.",
                    "types": [
                        "array"
                    ],
                    "variable": "$fields"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_text_filters",
        "line": 6642,
        "end_line": 6642,
        "type": "filter",
        "doc": {
            "description": "Filters the MoveableType text filters list for XML-RPC.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "2.2.0"
                },
                {
                    "name": "param",
                    "content": "An array of text filters.",
                    "types": [
                        "array"
                    ],
                    "variable": "$filters"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "xmlrpc_wp_insert_post_data",
        "line": 1632,
        "end_line": 1632,
        "type": "filter",
        "doc": {
            "description": "Filters post data array to be inserted via XML-RPC.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "3.4.0"
                },
                {
                    "name": "param",
                    "content": "Parsed array of post data.",
                    "types": [
                        "array"
                    ],
                    "variable": "$post_data"
                },
                {
                    "name": "param",
                    "content": "Post data array.",
                    "types": [
                        "array"
                    ],
                    "variable": "$content_struct"
                }
            ]
        },
        "file": "wp-includes/class-wp-xmlrpc-server.php"
    },
    {
        "name": "year_link",
        "line": 491,
        "end_line": 491,
        "type": "filter",
        "doc": {
            "description": "Filters the year archive permalink.",
            "long_description": "",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "param",
                    "content": "Permalink for the year archive.",
                    "types": [
                        "string"
                    ],
                    "variable": "$yearlink"
                },
                {
                    "name": "param",
                    "content": "Year for the archive.",
                    "types": [
                        "int"
                    ],
                    "variable": "$year"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "{$action}_prefilter",
        "line": 736,
        "end_line": 736,
        "type": "filter",
        "doc": {
            "description": "Filters the data for a file before it is uploaded to WordPress.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$action</code>, refers to the post action.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0",
                    "description": "as 'wp_handle_upload_prefilter'."
                },
                {
                    "name": "since",
                    "content": "4.0.0",
                    "description": "Converted to a dynamic hook with <code>$action</code>."
                },
                {
                    "name": "param",
                    "content": "An array of data for a single file.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$file"
                }
            ]
        },
        "file": "wp-admin/includes/file.php"
    },
    {
        "name": "{$adjacent}_image_link",
        "line": 3037,
        "end_line": 3037,
        "type": "filter",
        "doc": {
            "description": "Filters the adjacent image link.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$adjacent</code>, refers to the type of adjacency, either 'next', or 'previous'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.5.0"
                },
                {
                    "name": "param",
                    "content": "Adjacent image HTML markup.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Attachment ID",
                    "types": [
                        "int"
                    ],
                    "variable": "$attachment_id"
                },
                {
                    "name": "param",
                    "content": "Image size.",
                    "types": [
                        "string"
                    ],
                    "variable": "$size"
                },
                {
                    "name": "param",
                    "content": "Link text.",
                    "types": [
                        "string"
                    ],
                    "variable": "$text"
                }
            ]
        },
        "file": "wp-includes/media.php"
    },
    {
        "name": "{$adjacent}_post_link",
        "line": 2194,
        "end_line": 2194,
        "type": "filter",
        "doc": {
            "description": "Filters the adjacent post link.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$adjacent</code>, refers to the type of adjacency, 'next' or 'previous'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.6.0"
                },
                {
                    "name": "since",
                    "content": "4.2.0",
                    "description": "Added the <code>$adjacent</code> parameter."
                },
                {
                    "name": "param",
                    "content": "The adjacent post link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$output"
                },
                {
                    "name": "param",
                    "content": "Link anchor format.",
                    "types": [
                        "string"
                    ],
                    "variable": "$format"
                },
                {
                    "name": "param",
                    "content": "Link permalink format.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                },
                {
                    "name": "param",
                    "content": "The adjacent post.",
                    "types": [
                        "\\WP_Post"
                    ],
                    "variable": "$post"
                },
                {
                    "name": "param",
                    "content": "Whether the post is previous or next.",
                    "types": [
                        "string"
                    ],
                    "variable": "$adjacent"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "{$adjacent}_post_rel_link",
        "line": 1934,
        "end_line": 1934,
        "type": "filter",
        "doc": {
            "description": "Filters the adjacent post relational link.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$adjacent</code>, refers to the type of adjacency, 'next' or 'previous'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.8.0"
                },
                {
                    "name": "param",
                    "content": "The relational link.",
                    "types": [
                        "string"
                    ],
                    "variable": "$link"
                }
            ]
        },
        "file": "wp-includes/link-template.php"
    },
    {
        "name": "{$context}_memory_limit",
        "line": 6595,
        "end_line": 6595,
        "type": "filter",
        "doc": {
            "description": "Filters the memory limit allocated for arbitrary contexts.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$context</code>, refers to an arbitrary context passed on calling the function. This allows for plugins to define their own contexts for raising the memory limit.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.6.0"
                },
                {
                    "name": "param",
                    "content": "Maximum memory limit to allocate for images.                                   Default '256M' or the original php.ini <code>memory_limit</code>,                                   whichever is higher. Accepts an integer (bytes), or a                                   shorthand string notation, such as '256M'.",
                    "types": [
                        "int",
                        "string"
                    ],
                    "variable": "$filtered_limit"
                }
            ]
        },
        "file": "wp-includes/functions.php"
    },
    {
        "name": "{$field_no_prefix}_edit_pre",
        "line": 2403,
        "end_line": 2403,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a specific post field to edit.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field_no_prefix</code>, refers to the post field name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the post field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "{$field_no_prefix}_save_pre",
        "line": 2442,
        "end_line": 2442,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a specific field before saving.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field_no_prefix</code>, refers to the post field name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the post field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "{$field}",
        "line": 2477,
        "end_line": 2477,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a specific post field for display.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field</code>, refers to the post field name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the prefixed post field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Post ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$post_id"
                },
                {
                    "name": "param",
                    "content": "Context for how to sanitize the field. Possible                        values include 'raw', 'edit', 'db', 'display',                        'attribute' and 'js'.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "{$field}_pre",
        "line": 2456,
        "end_line": 2456,
        "type": "filter",
        "doc": {
            "description": "Filters the value of a specific post field before saving.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$field</code>, refers to the post field name.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the post field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-includes/post.php"
    },
    {
        "name": "{$option}",
        "line": 781,
        "end_line": 781,
        "type": "filter",
        "doc": {
            "description": "Filters the number of items to be displayed on each page of the list table.",
            "long_description": "<p>The dynamic hook name, $option, refers to the <code>per_page</code> option depending on the type of list table in use. Possible values include: 'edit_comments_per_page', 'sites_network_per_page', 'site_themes_network_per_page', 'themes_network_per_page', 'users_network_per_page', 'edit_post_per_page', 'edit_page_per<em>page', 'edit</em>{$post_type}_per_page', etc.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.9.0"
                },
                {
                    "name": "param",
                    "content": "Number of items to be displayed. Default 20.",
                    "types": [
                        "int"
                    ],
                    "variable": "$per_page"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-list-table.php"
    },
    {
        "name": "{$permastructname}_rewrite_rules",
        "line": 1403,
        "end_line": 1403,
        "type": "filter",
        "doc": {
            "description": "Filters rewrite rules used for individual permastructs.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$permastructname</code>, refers to the name of the registered permastruct, e.g. 'post_tag' (tags), 'category' (categories), etc.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.1.0"
                },
                {
                    "name": "param",
                    "content": "Array of rewrite rules generated for the current permastruct, keyed by their regex pattern.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$rules"
                }
            ]
        },
        "file": "wp-includes/class-wp-rewrite.php"
    },
    {
        "name": "{$tag}",
        "line": 633,
        "end_line": 633,
        "type": "filter_reference",
        "doc": {
            "description": "",
            "long_description": "",
            "tags": [
                {
                    "name": "var",
                    "content": "",
                    "types": [
                        "\\WP_Hook[]"
                    ],
                    "variable": "$wp_filter"
                }
            ]
        },
        "file": "wp-includes/plugin.php"
    },
    {
        "name": "{$taxonomy}_row_actions",
        "line": 524,
        "end_line": 524,
        "type": "filter",
        "doc": {
            "description": "Filters the action links displayed for each term in the terms list table.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$taxonomy</code>, refers to the taxonomy slug.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "An array of action links to be displayed. Default                          'Edit', 'Quick Edit', 'Delete', and 'View'.",
                    "types": [
                        "string[]"
                    ],
                    "variable": "$actions"
                },
                {
                    "name": "param",
                    "content": "Term object.",
                    "types": [
                        "\\WP_Term"
                    ],
                    "variable": "$tag"
                }
            ]
        },
        "file": "wp-admin/includes/class-wp-terms-list-table.php"
    },
    {
        "name": "{$taxonomy}_{$field}",
        "line": 1665,
        "end_line": 1665,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy field sanitized for display.",
            "long_description": "<p>The dynamic portions of the filter name, <code>$taxonomy</code>, and <code>$field</code>, refer to the taxonomy slug and taxonomy field, respectively.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the taxonomy field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                },
                {
                    "name": "param",
                    "content": "Term ID.",
                    "types": [
                        "int"
                    ],
                    "variable": "$term_id"
                },
                {
                    "name": "param",
                    "content": "Context to retrieve the taxonomy field value.",
                    "types": [
                        "string"
                    ],
                    "variable": "$context"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "{$taxonomy}_{$field}_rss",
        "line": 1635,
        "end_line": 1635,
        "type": "filter",
        "doc": {
            "description": "Filters the taxonomy field for use in RSS.",
            "long_description": "<p>The dynamic portions of the hook name, <code>$taxonomy</code>, and <code>$field</code>, refer to the taxonomy slug and field name, respectively.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "2.3.0"
                },
                {
                    "name": "param",
                    "content": "Value of the taxonomy field.",
                    "types": [
                        "mixed"
                    ],
                    "variable": "$value"
                }
            ]
        },
        "file": "wp-includes/taxonomy.php"
    },
    {
        "name": "{$type}_send_to_editor_url",
        "line": 901,
        "end_line": 901,
        "type": "filter",
        "doc": {
            "description": "Filters the URL sent to the editor for a specific media type.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$type</code>, refers to the type of media being sent.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.3.0"
                },
                {
                    "name": "param",
                    "content": "HTML markup sent to the editor.",
                    "types": [
                        "string"
                    ],
                    "variable": "$html"
                },
                {
                    "name": "param",
                    "content": "Media source URL.",
                    "types": [
                        "string"
                    ],
                    "variable": "$src"
                },
                {
                    "name": "param",
                    "content": "Media title.",
                    "types": [
                        "string"
                    ],
                    "variable": "$title"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    },
    {
        "name": "{$type}_template",
        "line": 63,
        "end_line": 63,
        "type": "filter",
        "doc": {
            "description": "Filters the path of the queried template by type.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$type</code>, refers to the filename -- minus the file extension and any non-alphanumeric characters delimiting words -- of the file to load. This hook also applies to various types of files loaded as part of the Template Hierarchy.</p> <p>Possible values for <code>$type</code> include: 'index', '404', 'archive', 'author', 'category', 'tag', 'taxonomy', 'date', 'embed', 'home', 'frontpage', 'privacypolicy', 'page', 'paged', 'search', 'single', 'singular', and 'attachment'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "1.5.0"
                },
                {
                    "name": "since",
                    "content": "4.8.0",
                    "description": "The <code>$type</code> and <code>$templates</code> parameters were added."
                },
                {
                    "name": "param",
                    "content": "Path to the template. See locate_template().",
                    "types": [
                        "string"
                    ],
                    "variable": "$template"
                },
                {
                    "name": "param",
                    "content": "Sanitized filename without extension.",
                    "types": [
                        "string"
                    ],
                    "variable": "$type"
                },
                {
                    "name": "param",
                    "content": "A list of template candidates, in descending order of priority.",
                    "types": [
                        "array"
                    ],
                    "variable": "$templates"
                }
            ]
        },
        "file": "wp-includes/template.php"
    },
    {
        "name": "{$type}_template_hierarchy",
        "line": 42,
        "end_line": 42,
        "type": "filter",
        "doc": {
            "description": "Filters the list of template filenames that are searched for when retrieving a template to use.",
            "long_description": "<p>The last element in the array should always be the fallback template for this query type.</p> <p>Possible values for <code>$type</code> include: 'index', '404', 'archive', 'author', 'category', 'tag', 'taxonomy', 'date', 'embed', 'home', 'frontpage', 'privacypolicy', 'page', 'paged', 'search', 'single', 'singular', and 'attachment'.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "4.7.0"
                },
                {
                    "name": "param",
                    "content": "A list of template candidates, in descending order of priority.",
                    "types": [
                        "array"
                    ],
                    "variable": "$templates"
                }
            ]
        },
        "file": "wp-includes/template.php"
    },
    {
        "name": "{$type}_upload_iframe_src",
        "line": 702,
        "end_line": 702,
        "type": "filter",
        "doc": {
            "description": "Filters the upload iframe source URL for a specific media type.",
            "long_description": "<p>The dynamic portion of the hook name, <code>$type</code>, refers to the type of media uploaded.</p>",
            "tags": [
                {
                    "name": "since",
                    "content": "3.0.0"
                },
                {
                    "name": "param",
                    "content": "The upload iframe source URL by type.",
                    "types": [
                        "string"
                    ],
                    "variable": "$upload_iframe_src"
                }
            ]
        },
        "file": "wp-admin/includes/media.php"
    }
]